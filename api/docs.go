// Package api GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/environments/names": {
            "post": {
                "description": "This enables users to search for environments in a given list of repositories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environments"
                ],
                "summary": "Search environments",
                "operationId": "searchEnvironments",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ContentUnitSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.SearchEnvironmentResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/features/": {
            "get": {
                "description": "Get features enables retrieving information about the features within an application, regardless of their current status (enabled or disabled) and the user's access to them.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "features"
                ],
                "summary": "List Features within the application, whether they are enabled, and whether the requesting user can use them",
                "operationId": "listFeatures",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.FeatureSet"
                        }
                    }
                }
            }
        },
        "/package_groups/names": {
            "post": {
                "description": "This enables users to search for package groups in a given list of repositories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagegroups"
                ],
                "summary": "Search package groups",
                "operationId": "searchPackageGroup",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ContentUnitSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.SearchPackageGroupResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/popular_repositories/": {
            "get": {
                "description": "This operation enables retrieving a paginated list of repository suggestions that are commonly used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "popular_repositories"
                ],
                "summary": "List Popular Repositories",
                "operationId": "listPopularRepositories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name or URL.",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PopularRepositoriesCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/public_repositories/": {
            "get": {
                "description": "Get public repositories.\nThis enables listing a set of pre-created entries that represent a base set of RPMs needed for image building. These repositories are defined and made available to all user accounts, enabling them to perform RPM name searches using URLs as search criteria. These public repositories are not listed by the normal repositories API.\nIt does not show up via the normal repositories API.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public_repositories"
                ],
                "summary": "List Public Repositories",
                "operationId": "listPublicRepositories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PublicRepositoryCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/": {
            "get": {
                "description": "This operation enables users to retrieve a list of repositories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "List Repositories",
                "operationId": "listRepositories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of release versions to filter on. For example, ` + "`" + `1,2` + "`" + ` would return repositories with versions 1 or 2 only.",
                        "name": "version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of architectures or platforms for that you want to retrieve repositories. It controls responses where repositories support multiple architectures or platforms. For example, ‘x86_64,s390x' returns repositories with ` + "`" + `x86_64` + "`" + ` or ` + "`" + `s390x` + "`" + ` only.",
                        "name": "arch",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter repositories by supported release version. For example, ` + "`" + `1` + "`" + ` returns repositories with the version ` + "`" + `1` + "`" + ` or where version is not set.",
                        "name": "available_for_version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter repositories by architecture. For example, ` + "`" + `x86_64` + "`" + ` returns repositories with the version ` + "`" + `x86_64` + "`" + ` or where architecture is not set.",
                        "name": "available_for_arch",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name or URL.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter repositories by name.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of URLs to control api response.",
                        "name": "url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of UUIDs to control api response.",
                        "name": "uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort the response data based on specific repository parameters. Sort criteria can include ` + "`" + `name` + "`" + `, ` + "`" + `url` + "`" + `, ` + "`" + `status` + "`" + `, and ` + "`" + `package_count` + "`" + `.",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of statuses to control api response. Statuses can include ` + "`" + `Pending` + "`" + `, ` + "`" + `Valid` + "`" + `, ` + "`" + `Invalid` + "`" + `, ` + "`" + `Unavailable` + "`" + `.",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of origins to filter api response. Origins can include ` + "`" + `red_hat` + "`" + ` and ` + "`" + `external` + "`" + `.",
                        "name": "origin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "content type of a repository to filter on (rpm)",
                        "name": "content_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "This operation enables creating custom repositories based on user preferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Create Repository",
                "operationId": "createRepository",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryResponse"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "resource URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/bulk_create/": {
            "post": {
                "description": "This enables creating multiple repositories in a single API. If a user encounters any error, none of the repositories will be created. The applicable error message will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Bulk create repositories",
                "operationId": "bulkCreateRepositories",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RepositoryRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RepositoryResponse"
                            }
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "resource URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/bulk_delete/": {
            "post": {
                "description": "This enables deleting multiple repositories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Bulk delete repositories",
                "operationId": "bulkDeleteRepositories",
                "parameters": [
                    {
                        "description": "Identifiers of the repositories",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UUIDListRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Repositories were successfully deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}": {
            "get": {
                "description": "Get repository information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Get Repository",
                "operationId": "getRepository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Update Repository",
                "operationId": "fullUpdateRepository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "This enables deleting a specific repository.",
                "tags": [
                    "repositories"
                ],
                "summary": "Delete a repository",
                "operationId": "deleteRepository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Repository was successfully deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Partially update a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Partial Update Repository",
                "operationId": "partialUpdateRepository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}/add_uploads/": {
            "post": {
                "description": "Check for repository updates.",
                "tags": [
                    "repositories"
                ],
                "summary": "add uploads to a repository",
                "operationId": "add_upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.AddUploadsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TaskInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}/environments": {
            "get": {
                "description": "List environments in a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environments"
                ],
                "summary": "List Repositories Environments",
                "operationId": "listRepositoriesEnvironments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort the response based on specific repository parameters. Sort criteria can include ` + "`" + `id` + "`" + `, ` + "`" + `name` + "`" + `, and ` + "`" + `description` + "`" + `.",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryEnvironmentCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}/introspect/": {
            "post": {
                "description": "Check for repository updates.",
                "tags": [
                    "repositories"
                ],
                "summary": "introspect a repository",
                "operationId": "introspect",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryIntrospectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TaskInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}/package_groups": {
            "get": {
                "description": "List package groups in a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagegroups"
                ],
                "summary": "List Repositories Package Groups",
                "operationId": "listRepositoriesPackageGroups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort the response based on specific repository parameters. Sort criteria can include ` + "`" + `id` + "`" + `, ` + "`" + `name` + "`" + `, ` + "`" + `description` + "`" + `, and ` + "`" + `package_list` + "`" + `.",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryPackageGroupCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}/rpms": {
            "get": {
                "description": "List RPMs in a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rpms"
                ],
                "summary": "List Repositories RPMs",
                "operationId": "listRepositoriesRpms",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort the response based on specific repository parameters. Sort criteria can include ` + "`" + `name` + "`" + `, ` + "`" + `url` + "`" + `, ` + "`" + `status` + "`" + `, and ` + "`" + `package_count` + "`" + `.",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryRpmCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}/snapshot/": {
            "post": {
                "description": "Snapshot a repository if not already snapshotting",
                "tags": [
                    "repositories"
                ],
                "summary": "snapshot a repository",
                "operationId": "createSnapshot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TaskInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/{uuid}/snapshots/": {
            "get": {
                "description": "List snapshots of a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "snapshots"
                ],
                "summary": "List snapshots of a repository",
                "operationId": "listSnapshots",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repository_gpg_key/{uuid}": {
            "get": {
                "description": "Get the GPG key file for a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Get the GPG key file for a repository",
                "operationId": "getGpgKeyFile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repository_parameters/": {
            "get": {
                "description": "List repository parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "List Repository Parameters",
                "operationId": "listRepositoryParameters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RepositoryParameterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repository_parameters/external_gpg_key/": {
            "post": {
                "description": "Fetch a gpgkey from a remote repo.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gpgKey"
                ],
                "summary": "Fetch gpgkey from URL",
                "operationId": "fetchGpgKey",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.FetchGPGKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.FetchGPGKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repository_parameters/validate/": {
            "post": {
                "description": "This validates the parameters before creating a repository. It provides a way to ensure the accuracy and validity of the provided parameters, including a check for the presence of remote yum metadata. Users can perform necessary checks before proceeding with the creation of a repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Validate parameters prior to creating a repository",
                "operationId": "validateRepositoryParameters",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RepositoryValidationRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RepositoryValidationResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rpms/names": {
            "post": {
                "description": "This enables users to search for RPMs (Red Hat Package Manager) in a given list of repositories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rpms"
                ],
                "summary": "Search RPMs",
                "operationId": "searchRpm",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ContentUnitSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.SearchRpmResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rpms/presence": {
            "post": {
                "description": "This enables users to detect presence of RPMs (Red Hat Package Manager) in a given list of repositories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rpms"
                ],
                "summary": "Detect RPMs presence",
                "operationId": "detectRpm",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.DetectRpmsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DetectRpmsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/snapshots/environments/names": {
            "post": {
                "description": "This enables users to search for environments in a given list of snapshots.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environments"
                ],
                "summary": "Search environments within snapshots",
                "operationId": "searchSnapshotEnvironments",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotSearchRpmRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.SearchEnvironmentResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/snapshots/for_date/": {
            "post": {
                "description": "Get nearest snapshot by date for a list of repositories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "snapshots"
                ],
                "summary": "Get nearest snapshot by date for a list of repositories.",
                "operationId": "listSnapshotsByDate",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ListSnapshotByDateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ListSnapshotByDateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/snapshots/package_groups/names": {
            "post": {
                "description": "This enables users to search for package groups in a given list of snapshots.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagegroups"
                ],
                "summary": "Search package groups within snapshots",
                "operationId": "searchSnapshotPackageGroups",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotSearchRpmRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.SearchPackageGroupResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/snapshots/rpms/names": {
            "post": {
                "description": "This enables users to search for RPMs (Red Hat Package Manager) in a given list of snapshots.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rpms"
                ],
                "summary": "Search RPMs within snapshots",
                "operationId": "searchSnapshotRpms",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotSearchRpmRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.SearchRpmResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/snapshots/{snapshot_uuid}/config.repo": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "repositories"
                ],
                "summary": "Get configuration file of a repository",
                "operationId": "getRepoConfigurationFile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Identifier of the snapshot",
                        "name": "snapshot_uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/snapshots/{uuid}/errata": {
            "get": {
                "description": "List errata in a repository snapshot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rpms"
                ],
                "summary": "List Snapshot Errata",
                "operationId": "listSnapshotErrata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Snapshot ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of types to control api response. Type can include ` + "`" + `security` + "`" + `, ` + "`" + `enhancement` + "`" + `, ` + "`" + `bugfix` + "`" + `, and ` + "`" + `other` + "`" + `.",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of severities to control api response. Severity can include ` + "`" + `Important` + "`" + `, ` + "`" + `Critical` + "`" + `, ` + "`" + `Moderate` + "`" + `, ` + "`" + `Low` + "`" + `, and ` + "`" + `Unknown` + "`" + `.",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort the response based on specific parameters. Sort criteria can include ` + "`" + `issued_date` + "`" + `, ` + "`" + `updated_date` + "`" + `, ` + "`" + `type` + "`" + `, and ` + "`" + `severity` + "`" + `.",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotErrataCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/snapshots/{uuid}/rpms": {
            "get": {
                "description": "List RPMs in a repository snapshot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rpms"
                ],
                "summary": "List Snapshot RPMs",
                "operationId": "listSnapshotRpms",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Snapshot ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name.",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotRpmCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/": {
            "get": {
                "description": "Get the list of tasks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "List Tasks",
                "operationId": "listTasks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of statuses to control response. Statuses can include ` + "`" + `running` + "`" + `, ` + "`" + `completed` + "`" + `, ` + "`" + `failed` + "`" + `.",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results based on a specific task types. Helps to narrow down the results to a specific type. Task types can be ` + "`" + `snapshot` + "`" + ` or ` + "`" + `introspect` + "`" + `. ",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A unique identifier of a repository to filter the results.",
                        "name": "repository_uuid",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "A flag to exclude tasks for the red hat org from the query.",
                        "name": "exclude_red_hat_org",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TaskInfoCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{uuid}": {
            "get": {
                "description": "Get information about a specific task.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get Task",
                "operationId": "getTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TaskInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/templates/": {
            "get": {
                "description": "This operation enables users to retrieve a list of templates.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "List Templates",
                "operationId": "listTemplates",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter templates by version.",
                        "name": "version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter templates by architecture.",
                        "name": "arch",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter templates by name.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter templates by associated repositories using a comma separated list of repository UUIDs",
                        "name": "repository_uuids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort the response data based on specific parameters. Sort criteria can include ` + "`" + `name` + "`" + `, ` + "`" + `arch` + "`" + `, and ` + "`" + `version` + "`" + `.",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TemplateCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "This operation enables creating templates based on user preferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Create Template",
                "operationId": "createTemplate",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.TemplateResponse"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "resource URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/templates/{uuid}": {
            "get": {
                "description": "Get template information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Get Template",
                "operationId": "getTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.TemplateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "This operation enables updating all attributes of a template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Fully update all attributes of a Template",
                "operationId": "fullUpdateTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TemplateUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.TemplateResponse"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "resource URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "This enables deleting a specific template.",
                "tags": [
                    "templates"
                ],
                "summary": "Delete a template",
                "operationId": "deleteTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Template was successfully deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "This operation enables updating some subset of attributes of a template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Update some attributes of a Template",
                "operationId": "partialUpdateTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TemplateUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.TemplateResponse"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "resource URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/templates/{uuid}/errata": {
            "get": {
                "description": "List errata in a content template.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "List Template Errata",
                "operationId": "listTemplateErrata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of types to control api response. Type can include ` + "`" + `security` + "`" + `, ` + "`" + `enhancement` + "`" + `, ` + "`" + `bugfix` + "`" + `, and ` + "`" + `other` + "`" + `.",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A comma separated list of severities to control api response. Severity can include ` + "`" + `Important` + "`" + `, ` + "`" + `Critical` + "`" + `, ` + "`" + `Moderate` + "`" + `, ` + "`" + `Low` + "`" + `, and ` + "`" + `Unknown` + "`" + `.",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort the response based on specific parameters. Sort criteria can include ` + "`" + `issued_date` + "`" + `, ` + "`" + `updated_date` + "`" + `, ` + "`" + `type` + "`" + `, and ` + "`" + `severity` + "`" + `.",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotErrataCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/templates/{uuid}/rpms": {
            "get": {
                "description": "List RPMs in a content template.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rpms"
                ],
                "summary": "List Template RPMs",
                "operationId": "listTemplateRpms",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID.",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to include in response. Use it to control the number of items, particularly when dealing with large datasets. Default value: ` + "`" + `100` + "`" + `.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Starting point for retrieving a subset of results. Determines how many items to skip from the beginning of the result set. Default value:` + "`" + `0` + "`" + `.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Term to filter and retrieve items that match the specified search criteria. Search term can include name.",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotRpmCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AddUploadsRequest": {
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "List of created artifacts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Artifact"
                    }
                },
                "uploads": {
                    "description": "List of unfinished uploads",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Upload"
                    }
                }
            }
        },
        "api.Artifact": {
            "type": "object",
            "properties": {
                "href": {
                    "description": "HREF to the  completed artifact",
                    "type": "string"
                },
                "sha256": {
                    "description": "SHA256 sum of the completed artifact",
                    "type": "string"
                }
            }
        },
        "api.ContentUnitSearchRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Maximum number of records to return for the search",
                    "type": "integer"
                },
                "search": {
                    "description": "Search string to search content unit names",
                    "type": "string"
                },
                "urls": {
                    "description": "URLs of repositories to search",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uuids": {
                    "description": "List of repository UUIDs to search",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.DetectRpmsRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Maximum number of records to return for the search",
                    "type": "integer"
                },
                "rpm_names": {
                    "description": "List of rpm names to search",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "urls": {
                    "description": "URLs of repositories to search",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uuids": {
                    "description": "List of repository UUIDs to search",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.DetectRpmsResponse": {
            "type": "object",
            "properties": {
                "found": {
                    "description": "List of rpm names found in given repositories",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "missing": {
                    "description": "List of rpm names not found in given repositories",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.Feature": {
            "type": "object",
            "properties": {
                "accessible": {
                    "description": "Whether the current user can access the feature",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "Whether the feature is enabled on the running server",
                    "type": "boolean"
                }
            }
        },
        "api.FeatureSet": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/api.Feature"
            }
        },
        "api.FetchGPGKeyRequest": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "The url from which to download the GPG Key.",
                    "type": "string"
                }
            }
        },
        "api.FetchGPGKeyResponse": {
            "type": "object",
            "properties": {
                "gpg_key": {
                    "description": "The downloaded GPG Keys from the provided url.",
                    "type": "string"
                }
            }
        },
        "api.GenericAttributeValidationResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message if the attribute is not valid",
                    "type": "string"
                },
                "skipped": {
                    "description": "Skipped if the attribute is not passed in for validation",
                    "type": "boolean"
                },
                "valid": {
                    "description": "Valid if not skipped and the provided attribute is valid",
                    "type": "boolean"
                }
            }
        },
        "api.Links": {
            "type": "object",
            "properties": {
                "first": {
                    "description": "Path to first page of results",
                    "type": "string"
                },
                "last": {
                    "description": "Path to last page of results",
                    "type": "string"
                },
                "next": {
                    "description": "Path to next page of results",
                    "type": "string"
                },
                "prev": {
                    "description": "Path to previous page of results",
                    "type": "string"
                }
            }
        },
        "api.ListSnapshotByDateRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Exact date to search by.",
                    "type": "string"
                },
                "repository_uuids": {
                    "description": "Repository UUIDs to find snapshots for",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.ListSnapshotByDateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Requested Data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.SnapshotForDate"
                    }
                }
            }
        },
        "api.PopularRepositoriesCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.PopularRepositoryResponse"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.PopularRepositoryResponse": {
            "type": "object",
            "properties": {
                "distribution_arch": {
                    "description": "Architecture to restrict client usage to",
                    "type": "string",
                    "example": "x86_64"
                },
                "distribution_versions": {
                    "description": "Versions to restrict client usage to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "7",
                        "8"
                    ]
                },
                "existing_name": {
                    "description": "Existing reference name for repository",
                    "type": "string"
                },
                "gpg_key": {
                    "description": "GPG key for repository",
                    "type": "string"
                },
                "metadata_verification": {
                    "description": "Verify packages",
                    "type": "boolean"
                },
                "suggested_name": {
                    "description": "Suggested name of the popular repository",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the remote yum repository",
                    "type": "string"
                },
                "uuid": {
                    "description": "UUID of the repository if it exists for the user",
                    "type": "string"
                }
            }
        },
        "api.PublicRepositoryCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.PublicRepositoryResponse"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.PublicRepositoryResponse": {
            "type": "object",
            "properties": {
                "last_introspection_error": {
                    "description": "Error of last attempted introspection",
                    "type": "string"
                },
                "last_introspection_status": {
                    "description": "Status of last introspection",
                    "type": "string"
                },
                "last_introspection_time": {
                    "description": "Timestamp of last attempted introspection",
                    "type": "string"
                },
                "last_success_introspection_time": {
                    "description": "Timestamp of last successful introspection",
                    "type": "string"
                },
                "last_update_introspection_time": {
                    "description": "Timestamp of last introspection that had updates",
                    "type": "string"
                },
                "package_count": {
                    "description": "Number of packages last read in the repository",
                    "type": "integer"
                },
                "status": {
                    "description": "Combined introspection and snapshot status of the repository",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the remote yum repository",
                    "type": "string"
                }
            }
        },
        "api.RepositoryCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Requested Data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.RepositoryResponse"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.RepositoryEnvironment": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "The environment description",
                    "type": "string"
                },
                "id": {
                    "description": "The environment ID",
                    "type": "string"
                },
                "name": {
                    "description": "The environment name",
                    "type": "string"
                },
                "uuid": {
                    "description": "Identifier of the environment",
                    "type": "string"
                }
            }
        },
        "api.RepositoryEnvironmentCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of environments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.RepositoryEnvironment"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.RepositoryIntrospectRequest": {
            "type": "object",
            "properties": {
                "reset_count": {
                    "description": "Reset the failed introspections count",
                    "type": "boolean"
                }
            }
        },
        "api.RepositoryPackageGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "The package group description",
                    "type": "string"
                },
                "id": {
                    "description": "The package group ID",
                    "type": "string"
                },
                "name": {
                    "description": "The package group name",
                    "type": "string"
                },
                "packagelist": {
                    "description": "The list of packages in the package group",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uuid": {
                    "description": "Identifier of the package group",
                    "type": "string"
                }
            }
        },
        "api.RepositoryPackageGroupCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of package groups",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.RepositoryPackageGroup"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.RepositoryParameterResponse": {
            "type": "object",
            "properties": {
                "distribution_arches": {
                    "description": "Architectures available for repository creation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/config.DistributionArch"
                    }
                },
                "distribution_versions": {
                    "description": "Versions available for repository creation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/config.DistributionVersion"
                    }
                }
            }
        },
        "api.RepositoryRequest": {
            "type": "object",
            "properties": {
                "distribution_arch": {
                    "description": "Architecture to restrict client usage to",
                    "type": "string",
                    "example": "x86_64"
                },
                "distribution_versions": {
                    "description": "Versions to restrict client usage to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "7",
                        "8"
                    ]
                },
                "gpg_key": {
                    "description": "GPG key for repository",
                    "type": "string"
                },
                "metadata_verification": {
                    "description": "Verify packages",
                    "type": "boolean"
                },
                "module_hotfixes": {
                    "description": "Disable modularity filtering on this repository",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote yum repository",
                    "type": "string"
                },
                "origin": {
                    "description": "Origin of the repository",
                    "type": "string",
                    "readOnly": true
                },
                "snapshot": {
                    "description": "Enable snapshotting and hosting of this repository",
                    "type": "boolean"
                },
                "url": {
                    "description": "URL of the remote yum repository",
                    "type": "string"
                }
            }
        },
        "api.RepositoryResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "Account ID of the owner",
                    "type": "string",
                    "readOnly": true
                },
                "content_type": {
                    "description": "Content Type (rpm) of the repository",
                    "type": "string"
                },
                "distribution_arch": {
                    "description": "Architecture to restrict client usage to",
                    "type": "string",
                    "example": "x86_64"
                },
                "distribution_versions": {
                    "description": "Versions to restrict client usage to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "7",
                        "8"
                    ]
                },
                "failed_introspections_count": {
                    "description": "Number of consecutive failed introspections",
                    "type": "integer"
                },
                "gpg_key": {
                    "description": "GPG key for repository",
                    "type": "string"
                },
                "label": {
                    "description": "Label used to configure the yum repository on clients",
                    "type": "string"
                },
                "last_introspection_error": {
                    "description": "Error of last attempted introspection",
                    "type": "string"
                },
                "last_introspection_status": {
                    "description": "Status of last introspection",
                    "type": "string"
                },
                "last_introspection_time": {
                    "description": "Timestamp of last attempted introspection",
                    "type": "string"
                },
                "last_snapshot": {
                    "description": "Latest Snapshot taken",
                    "$ref": "#/definitions/api.SnapshotResponse"
                },
                "last_snapshot_task": {
                    "description": "Last snapshot task response (contains last snapshot status)",
                    "$ref": "#/definitions/api.TaskInfoResponse"
                },
                "last_snapshot_task_uuid": {
                    "description": "UUID of the last snapshot task",
                    "type": "string"
                },
                "last_snapshot_uuid": {
                    "description": "UUID of the last dao.Snapshot",
                    "type": "string"
                },
                "last_success_introspection_time": {
                    "description": "Timestamp of last successful introspection",
                    "type": "string"
                },
                "last_update_introspection_time": {
                    "description": "Timestamp of last introspection that had updates",
                    "type": "string"
                },
                "metadata_verification": {
                    "description": "Verify packages",
                    "type": "boolean"
                },
                "module_hotfixes": {
                    "description": "Disable modularity filtering on this repository",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote yum repository",
                    "type": "string"
                },
                "org_id": {
                    "description": "Organization ID of the owner",
                    "type": "string",
                    "readOnly": true
                },
                "origin": {
                    "description": "Origin of the repository",
                    "type": "string"
                },
                "package_count": {
                    "description": "Number of packages last read in the repository",
                    "type": "integer"
                },
                "snapshot": {
                    "description": "Enable snapshotting and hosting of this repository",
                    "type": "boolean"
                },
                "status": {
                    "description": "Combined status of last introspection and snapshot of repository (Valid, Invalid, Unavailable, Pending)",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the remote yum repository",
                    "type": "string"
                },
                "uuid": {
                    "description": "UUID of the object",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "api.RepositoryRpm": {
            "type": "object",
            "properties": {
                "arch": {
                    "description": "The architecture of the rpm",
                    "type": "string"
                },
                "checksum": {
                    "description": "The checksum of the rpm",
                    "type": "string"
                },
                "epoch": {
                    "description": "The epoch of the rpm",
                    "type": "integer"
                },
                "name": {
                    "description": "The rpm package name",
                    "type": "string"
                },
                "release": {
                    "description": "The release of the rpm",
                    "type": "string"
                },
                "summary": {
                    "description": "The summary of the rpm",
                    "type": "string"
                },
                "uuid": {
                    "description": "Identifier of the rpm",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the  rpm",
                    "type": "string"
                }
            }
        },
        "api.RepositoryRpmCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of rpms",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.RepositoryRpm"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.RepositoryUpdateRequest": {
            "type": "object",
            "properties": {
                "distribution_arch": {
                    "description": "Architecture to restrict client usage to",
                    "type": "string",
                    "example": "x86_64"
                },
                "distribution_versions": {
                    "description": "Versions to restrict client usage to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "7",
                        "8"
                    ]
                },
                "gpg_key": {
                    "description": "GPG key for repository",
                    "type": "string"
                },
                "metadata_verification": {
                    "description": "Verify packages",
                    "type": "boolean"
                },
                "module_hotfixes": {
                    "description": "Disable modularity filtering on this repository",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote yum repository",
                    "type": "string"
                },
                "snapshot": {
                    "description": "Enable snapshotting and hosting of this repository",
                    "type": "boolean"
                },
                "url": {
                    "description": "URL of the remote yum repository",
                    "type": "string"
                }
            }
        },
        "api.RepositoryValidationRequest": {
            "type": "object",
            "properties": {
                "gpg_key": {
                    "description": "GPGKey of the remote yum repository",
                    "type": "string"
                },
                "metadata_verification": {
                    "description": "If set, attempt to validate the yum metadata with the specified GPG Key",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote yum repository",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the remote yum repository",
                    "type": "string"
                },
                "uuid": {
                    "description": "If set, this is an \"Update\" validation",
                    "type": "string"
                }
            }
        },
        "api.RepositoryValidationResponse": {
            "type": "object",
            "properties": {
                "gpg_key": {
                    "description": "Validation response for the GPG Key",
                    "$ref": "#/definitions/api.GenericAttributeValidationResponse"
                },
                "name": {
                    "description": "Validation response for repository name",
                    "$ref": "#/definitions/api.GenericAttributeValidationResponse"
                },
                "url": {
                    "description": "Validation response for repository url",
                    "$ref": "#/definitions/api.UrlValidationResponse"
                }
            }
        },
        "api.ResponseMetadata": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Total count of results",
                    "type": "integer"
                },
                "limit": {
                    "description": "Limit of results used for the request",
                    "type": "integer"
                },
                "offset": {
                    "description": "Offset into results used for the request",
                    "type": "integer"
                }
            }
        },
        "api.SearchEnvironmentResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the environment found",
                    "type": "string"
                },
                "environment_name": {
                    "description": "Environment found",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the environment found",
                    "type": "string"
                }
            }
        },
        "api.SearchPackageGroupResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the package group found",
                    "type": "string"
                },
                "id": {
                    "description": "Package group ID",
                    "type": "string"
                },
                "package_group_name": {
                    "description": "Name of package group found",
                    "type": "string"
                },
                "package_list": {
                    "description": "Package list of the package group found",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.SearchRpmResponse": {
            "type": "object",
            "properties": {
                "package_name": {
                    "description": "Package name found",
                    "type": "string"
                },
                "summary": {
                    "description": "Summary of the package found",
                    "type": "string"
                }
            }
        },
        "api.SnapshotCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Requested Data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.SnapshotResponse"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.SnapshotErrata": {
            "type": "object",
            "properties": {
                "cves": {
                    "description": "List of CVEs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "description": "Description of the errata",
                    "type": "string"
                },
                "errata_id": {
                    "description": "ID of the errata",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "issued_date": {
                    "description": "IssuedDate of the errata",
                    "type": "string"
                },
                "reboot_suggested": {
                    "description": "Whether a reboot is suggested",
                    "type": "boolean"
                },
                "severity": {
                    "description": "Severity of the errata",
                    "type": "string"
                },
                "summary": {
                    "description": "Summary of the errata",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the errata",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the errata",
                    "type": "string"
                },
                "updated_date": {
                    "description": "UpdateDate of the errata",
                    "type": "string"
                }
            }
        },
        "api.SnapshotErrataCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of errata",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.SnapshotErrata"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.SnapshotForDate": {
            "type": "object",
            "properties": {
                "is_after": {
                    "description": "Is the snapshot after the specified date",
                    "type": "boolean"
                },
                "match": {
                    "description": "This is the snapshot (if found)",
                    "$ref": "#/definitions/api.SnapshotResponse"
                },
                "repository_uuid": {
                    "description": "Repository uuid for associated snapshot",
                    "type": "string"
                }
            }
        },
        "api.SnapshotResponse": {
            "type": "object",
            "properties": {
                "added_counts": {
                    "description": "Count of each content type",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "content_counts": {
                    "description": "Count of each content type",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "created_at": {
                    "description": "Datetime the snapshot was created",
                    "type": "string"
                },
                "removed_counts": {
                    "description": "Count of each content type",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "repository_path": {
                    "description": "Path to repository snapshot contents",
                    "type": "string"
                },
                "url": {
                    "description": "URL to the snapshot's content",
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "api.SnapshotRpm": {
            "type": "object",
            "properties": {
                "arch": {
                    "description": "The architecture of the rpm",
                    "type": "string"
                },
                "epoch": {
                    "description": "The epoch of the rpm",
                    "type": "string"
                },
                "name": {
                    "description": "The rpm package name",
                    "type": "string"
                },
                "release": {
                    "description": "The release of the rpm",
                    "type": "string"
                },
                "summary": {
                    "description": "The summary of the rpm",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the  rpm",
                    "type": "string"
                }
            }
        },
        "api.SnapshotRpmCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of rpms",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.SnapshotRpm"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.SnapshotSearchRpmRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Maximum number of records to return for the search",
                    "type": "integer"
                },
                "search": {
                    "description": "Search string to search rpm names",
                    "type": "string"
                },
                "uuids": {
                    "description": "List of Snapshot UUIDs to search",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.TaskInfoCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Requested Data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TaskInfoResponse"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.TaskInfoResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp of task creation",
                    "type": "string"
                },
                "dependencies": {
                    "description": "UUIDs of parent tasks",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dependents": {
                    "description": "UUIDs of child tasks",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ended_at": {
                    "description": "Timestamp task ended running at",
                    "type": "string"
                },
                "error": {
                    "description": "Error thrown while running task",
                    "type": "string"
                },
                "org_id": {
                    "description": "Organization ID of the owner",
                    "type": "string"
                },
                "repository_name": {
                    "description": "Name of the associated repository",
                    "type": "string"
                },
                "repository_uuid": {
                    "description": "UUID of the associated repository",
                    "type": "string"
                },
                "status": {
                    "description": "Status of task (running, failed, completed, canceled, pending)",
                    "type": "string"
                },
                "type": {
                    "description": "Type of task",
                    "type": "string"
                },
                "uuid": {
                    "description": "UUID of the object",
                    "type": "string"
                }
            }
        },
        "api.TemplateCollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Requested Data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TemplateResponse"
                    }
                },
                "links": {
                    "description": "Links to other pages of results",
                    "$ref": "#/definitions/api.Links"
                },
                "meta": {
                    "description": "Metadata about the request",
                    "$ref": "#/definitions/api.ResponseMetadata"
                }
            }
        },
        "api.TemplateRequest": {
            "type": "object",
            "properties": {
                "arch": {
                    "description": "Architecture of the template",
                    "type": "string"
                },
                "date": {
                    "description": "Latest date to include snapshots for",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the template",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template",
                    "type": "string"
                },
                "repository_uuids": {
                    "description": "Repositories to add to the template",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "use_latest": {
                    "description": "Use latest snapshot for all repositories in the template",
                    "type": "boolean"
                },
                "version": {
                    "description": "Version of the template",
                    "type": "string"
                }
            }
        },
        "api.TemplateResponse": {
            "type": "object",
            "properties": {
                "arch": {
                    "description": "Architecture of the template",
                    "type": "string"
                },
                "created_at": {
                    "description": "Datetime template was created",
                    "type": "string"
                },
                "created_by": {
                    "description": "User that created the template",
                    "type": "string"
                },
                "date": {
                    "description": "Latest date to include snapshots for",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the template",
                    "type": "string"
                },
                "last_updated_by": {
                    "description": "User that most recently updated the template",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template",
                    "type": "string"
                },
                "org_id": {
                    "description": "Organization ID of the owner",
                    "type": "string"
                },
                "repository_uuids": {
                    "description": "Repositories added to the template",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rhsm_environment_id": {
                    "description": "Environment ID used by subscription-manager and candlepin",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Datetime template was last updated",
                    "type": "string"
                },
                "use_latest": {
                    "description": "Use latest snapshot for all repositories in the template",
                    "type": "boolean"
                },
                "uuid": {
                    "type": "string",
                    "readOnly": true
                },
                "version": {
                    "description": "Version of the template",
                    "type": "string"
                }
            }
        },
        "api.TemplateUpdateRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Latest date to include snapshots for",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the template",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template",
                    "type": "string"
                },
                "repository_uuids": {
                    "description": "Repositories to add to the template",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "use_latest": {
                    "description": "Use latest snapshot for all repositories in the template",
                    "type": "boolean"
                }
            }
        },
        "api.UUIDListRequest": {
            "type": "object",
            "properties": {
                "uuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.Upload": {
            "type": "object",
            "properties": {
                "href": {
                    "description": "HREF to the unfinished upload",
                    "type": "string"
                },
                "sha256": {
                    "description": "SHA256 sum of the uploaded file",
                    "type": "string"
                }
            }
        },
        "api.UrlValidationResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message if the attribute is not valid",
                    "type": "string"
                },
                "http_code": {
                    "description": "If the metadata cannot be fetched successfully, the http code that is returned if the http request was completed",
                    "type": "integer"
                },
                "metadata_present": {
                    "description": "True if the metadata can be fetched successfully",
                    "type": "boolean"
                },
                "metadata_signature_present": {
                    "description": "True if a repomd.xml.sig file was found in the repository",
                    "type": "boolean"
                },
                "skipped": {
                    "description": "Skipped if the URL is not passed in for validation",
                    "type": "boolean"
                },
                "valid": {
                    "description": "Valid if not skipped and the provided attribute is valid",
                    "type": "boolean"
                }
            }
        },
        "config.DistributionArch": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Static label of the architecture",
                    "type": "string"
                },
                "name": {
                    "description": "Human-readable form of the architecture",
                    "type": "string"
                }
            }
        },
        "config.DistributionVersion": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Static label of the version",
                    "type": "string"
                },
                "name": {
                    "description": "Human-readable form of the version",
                    "type": "string"
                }
            }
        },
        "errors.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/errors.HandlerError"
                    }
                }
            }
        },
        "errors.HandlerError": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "An explanation specific to the problem",
                    "type": "string"
                },
                "status": {
                    "description": "HTTP status code applicable to the error",
                    "type": "integer"
                },
                "title": {
                    "description": "A summary of the problem",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "RhIdentity": {
            "type": "apiKey",
            "name": "x-rh-identity",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v1.0.0",
	Host:             "api.example.com",
	BasePath:         "/api/content-sources/v1.0/",
	Schemes:          []string{},
	Title:            "ContentSourcesBackend",
	Description:      "The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications.\n",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
