/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiFeature,
} from '../models/index';
import {
    ApiFeatureFromJSON,
    ApiFeatureToJSON,
} from '../models/index';

/**
 * 
 */
export class FeaturesApi extends runtime.BaseAPI {

    /**
     * Get features enables retrieving information about the features within an application, regardless of their current status (enabled or disabled) and the user\'s access to them.
     * List Features within the application, whether they are enabled, and whether the requesting user can use them
     */
    async listFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: ApiFeature; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/features/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, ApiFeatureFromJSON));
    }

    /**
     * Get features enables retrieving information about the features within an application, regardless of their current status (enabled or disabled) and the user\'s access to them.
     * List Features within the application, whether they are enabled, and whether the requesting user can use them
     */
    async listFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: ApiFeature; }> {
        const response = await this.listFeaturesRaw(initOverrides);
        return await response.value();
    }

}
