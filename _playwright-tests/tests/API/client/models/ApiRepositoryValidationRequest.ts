/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiRepositoryValidationRequest
 */
export interface ApiRepositoryValidationRequest {
    /**
     * GPGKey of the remote yum repository
     * @type {string}
     * @memberof ApiRepositoryValidationRequest
     */
    gpgKey?: string;
    /**
     * If set, attempt to validate the yum metadata with the specified GPG Key
     * @type {boolean}
     * @memberof ApiRepositoryValidationRequest
     */
    metadataVerification?: boolean;
    /**
     * Name of the remote yum repository
     * @type {string}
     * @memberof ApiRepositoryValidationRequest
     */
    name?: string;
    /**
     * URL of the remote yum repository
     * @type {string}
     * @memberof ApiRepositoryValidationRequest
     */
    url?: string;
    /**
     * If set, this is an "Update" validation
     * @type {string}
     * @memberof ApiRepositoryValidationRequest
     */
    uuid?: string;
}

/**
 * Check if a given object implements the ApiRepositoryValidationRequest interface.
 */
export function instanceOfApiRepositoryValidationRequest(value: object): value is ApiRepositoryValidationRequest {
    return true;
}

export function ApiRepositoryValidationRequestFromJSON(json: any): ApiRepositoryValidationRequest {
    return ApiRepositoryValidationRequestFromJSONTyped(json, false);
}

export function ApiRepositoryValidationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiRepositoryValidationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'gpgKey': json['gpg_key'] == null ? undefined : json['gpg_key'],
        'metadataVerification': json['metadata_verification'] == null ? undefined : json['metadata_verification'],
        'name': json['name'] == null ? undefined : json['name'],
        'url': json['url'] == null ? undefined : json['url'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
    };
}

export function ApiRepositoryValidationRequestToJSON(json: any): ApiRepositoryValidationRequest {
    return ApiRepositoryValidationRequestToJSONTyped(json, false);
}

export function ApiRepositoryValidationRequestToJSONTyped(value?: ApiRepositoryValidationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'gpg_key': value['gpgKey'],
        'metadata_verification': value['metadataVerification'],
        'name': value['name'],
        'url': value['url'],
        'uuid': value['uuid'],
    };
}

