/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiRepositoryExportRequest
 */
export interface ApiRepositoryExportRequest {
    /**
     * List of repository uuids to export
     * @type {Array<string>}
     * @memberof ApiRepositoryExportRequest
     */
    repositoryUuids: Array<string>;
}

/**
 * Check if a given object implements the ApiRepositoryExportRequest interface.
 */
export function instanceOfApiRepositoryExportRequest(value: object): value is ApiRepositoryExportRequest {
    if (!('repositoryUuids' in value) || value['repositoryUuids'] === undefined) return false;
    return true;
}

export function ApiRepositoryExportRequestFromJSON(json: any): ApiRepositoryExportRequest {
    return ApiRepositoryExportRequestFromJSONTyped(json, false);
}

export function ApiRepositoryExportRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiRepositoryExportRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'repositoryUuids': json['repository_uuids'],
    };
}

export function ApiRepositoryExportRequestToJSON(json: any): ApiRepositoryExportRequest {
    return ApiRepositoryExportRequestToJSONTyped(json, false);
}

export function ApiRepositoryExportRequestToJSONTyped(value?: ApiRepositoryExportRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'repository_uuids': value['repositoryUuids'],
    };
}

