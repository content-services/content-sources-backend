/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApiTaskInfoResponse } from './ApiTaskInfoResponse';
import {
    ApiTaskInfoResponseFromJSON,
    ApiTaskInfoResponseFromJSONTyped,
    ApiTaskInfoResponseToJSON,
    ApiTaskInfoResponseToJSONTyped,
} from './ApiTaskInfoResponse';
import type { ApiSnapshotResponse } from './ApiSnapshotResponse';
import {
    ApiSnapshotResponseFromJSON,
    ApiSnapshotResponseFromJSONTyped,
    ApiSnapshotResponseToJSON,
    ApiSnapshotResponseToJSONTyped,
} from './ApiSnapshotResponse';

/**
 * 
 * @export
 * @interface ApiTemplateResponse
 */
export interface ApiTemplateResponse {
    /**
     * Architecture of the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    arch?: string;
    /**
     * Datetime template was created
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    createdAt?: string;
    /**
     * User that created the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    createdBy?: string;
    /**
     * Latest date to include snapshots for
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    date?: string;
    /**
     * Description of the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    description?: string;
    /**
     * Error of last update_latest_snapshot task that updated the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    lastUpdateSnapshotError?: string;
    /**
     * 
     * @type {ApiTaskInfoResponse}
     * @memberof ApiTemplateResponse
     */
    lastUpdateTask?: ApiTaskInfoResponse;
    /**
     * UUID of the last update_template_content task that updated the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    lastUpdateTaskUuid?: string;
    /**
     * User that most recently updated the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    lastUpdatedBy?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    name?: string;
    /**
     * Organization ID of the owner
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    orgId?: string;
    /**
     * Repositories added to the template
     * @type {Array<string>}
     * @memberof ApiTemplateResponse
     */
    repositoryUuids?: Array<string>;
    /**
     * Whether the candlepin environment is created and systems can be added
     * @type {boolean}
     * @memberof ApiTemplateResponse
     */
    readonly rhsmEnvironmentCreated?: boolean;
    /**
     * Environment ID used by subscription-manager and candlepin
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    rhsmEnvironmentId?: string;
    /**
     * The list of snapshots in use by the template
     * @type {Array<ApiSnapshotResponse>}
     * @memberof ApiTemplateResponse
     */
    readonly snapshots?: Array<ApiSnapshotResponse>;
    /**
     * List of snapshots used by this template which are going to be deleted soon
     * @type {Array<ApiSnapshotResponse>}
     * @memberof ApiTemplateResponse
     */
    readonly toBeDeletedSnapshots?: Array<ApiSnapshotResponse>;
    /**
     * Datetime template was last updated
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    updatedAt?: string;
    /**
     * Use latest snapshot for all repositories in the template
     * @type {boolean}
     * @memberof ApiTemplateResponse
     */
    useLatest?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    readonly uuid?: string;
    /**
     * Version of the template
     * @type {string}
     * @memberof ApiTemplateResponse
     */
    version?: string;
}

/**
 * Check if a given object implements the ApiTemplateResponse interface.
 */
export function instanceOfApiTemplateResponse(value: object): value is ApiTemplateResponse {
    return true;
}

export function ApiTemplateResponseFromJSON(json: any): ApiTemplateResponse {
    return ApiTemplateResponseFromJSONTyped(json, false);
}

export function ApiTemplateResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiTemplateResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'arch': json['arch'] == null ? undefined : json['arch'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'date': json['date'] == null ? undefined : json['date'],
        'description': json['description'] == null ? undefined : json['description'],
        'lastUpdateSnapshotError': json['last_update_snapshot_error'] == null ? undefined : json['last_update_snapshot_error'],
        'lastUpdateTask': json['last_update_task'] == null ? undefined : ApiTaskInfoResponseFromJSON(json['last_update_task']),
        'lastUpdateTaskUuid': json['last_update_task_uuid'] == null ? undefined : json['last_update_task_uuid'],
        'lastUpdatedBy': json['last_updated_by'] == null ? undefined : json['last_updated_by'],
        'name': json['name'] == null ? undefined : json['name'],
        'orgId': json['org_id'] == null ? undefined : json['org_id'],
        'repositoryUuids': json['repository_uuids'] == null ? undefined : json['repository_uuids'],
        'rhsmEnvironmentCreated': json['rhsm_environment_created'] == null ? undefined : json['rhsm_environment_created'],
        'rhsmEnvironmentId': json['rhsm_environment_id'] == null ? undefined : json['rhsm_environment_id'],
        'snapshots': json['snapshots'] == null ? undefined : ((json['snapshots'] as Array<any>).map(ApiSnapshotResponseFromJSON)),
        'toBeDeletedSnapshots': json['to_be_deleted_snapshots'] == null ? undefined : ((json['to_be_deleted_snapshots'] as Array<any>).map(ApiSnapshotResponseFromJSON)),
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
        'useLatest': json['use_latest'] == null ? undefined : json['use_latest'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function ApiTemplateResponseToJSON(json: any): ApiTemplateResponse {
    return ApiTemplateResponseToJSONTyped(json, false);
}

export function ApiTemplateResponseToJSONTyped(value?: Omit<ApiTemplateResponse, 'rhsm_environment_created'|'snapshots'|'to_be_deleted_snapshots'|'uuid'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'arch': value['arch'],
        'created_at': value['createdAt'],
        'created_by': value['createdBy'],
        'date': value['date'],
        'description': value['description'],
        'last_update_snapshot_error': value['lastUpdateSnapshotError'],
        'last_update_task': ApiTaskInfoResponseToJSON(value['lastUpdateTask']),
        'last_update_task_uuid': value['lastUpdateTaskUuid'],
        'last_updated_by': value['lastUpdatedBy'],
        'name': value['name'],
        'org_id': value['orgId'],
        'repository_uuids': value['repositoryUuids'],
        'rhsm_environment_id': value['rhsmEnvironmentId'],
        'updated_at': value['updatedAt'],
        'use_latest': value['useLatest'],
        'version': value['version'],
    };
}

