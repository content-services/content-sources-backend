/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiSnapshotResponse
 */
export interface ApiSnapshotResponse {
    /**
     * Count of each content type
     * @type {{ [key: string]: number; }}
     * @memberof ApiSnapshotResponse
     */
    addedCounts?: { [key: string]: number; };
    /**
     * Count of each content type
     * @type {{ [key: string]: number; }}
     * @memberof ApiSnapshotResponse
     */
    contentCounts?: { [key: string]: number; };
    /**
     * Datetime the snapshot was created
     * @type {string}
     * @memberof ApiSnapshotResponse
     */
    createdAt?: string;
    /**
     * Count of each content type
     * @type {{ [key: string]: number; }}
     * @memberof ApiSnapshotResponse
     */
    removedCounts?: { [key: string]: number; };
    /**
     * Name of repository the snapshot belongs to
     * @type {string}
     * @memberof ApiSnapshotResponse
     */
    repositoryName?: string;
    /**
     * Path to repository snapshot contents
     * @type {string}
     * @memberof ApiSnapshotResponse
     */
    repositoryPath?: string;
    /**
     * UUID of the repository the snapshot belongs to
     * @type {string}
     * @memberof ApiSnapshotResponse
     */
    repositoryUuid?: string;
    /**
     * URL to the snapshot's content
     * @type {string}
     * @memberof ApiSnapshotResponse
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiSnapshotResponse
     */
    uuid?: string;
}

/**
 * Check if a given object implements the ApiSnapshotResponse interface.
 */
export function instanceOfApiSnapshotResponse(value: object): value is ApiSnapshotResponse {
    return true;
}

export function ApiSnapshotResponseFromJSON(json: any): ApiSnapshotResponse {
    return ApiSnapshotResponseFromJSONTyped(json, false);
}

export function ApiSnapshotResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiSnapshotResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'addedCounts': json['added_counts'] == null ? undefined : json['added_counts'],
        'contentCounts': json['content_counts'] == null ? undefined : json['content_counts'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'removedCounts': json['removed_counts'] == null ? undefined : json['removed_counts'],
        'repositoryName': json['repository_name'] == null ? undefined : json['repository_name'],
        'repositoryPath': json['repository_path'] == null ? undefined : json['repository_path'],
        'repositoryUuid': json['repository_uuid'] == null ? undefined : json['repository_uuid'],
        'url': json['url'] == null ? undefined : json['url'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
    };
}

export function ApiSnapshotResponseToJSON(json: any): ApiSnapshotResponse {
    return ApiSnapshotResponseToJSONTyped(json, false);
}

export function ApiSnapshotResponseToJSONTyped(value?: ApiSnapshotResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'added_counts': value['addedCounts'],
        'content_counts': value['contentCounts'],
        'created_at': value['createdAt'],
        'removed_counts': value['removedCounts'],
        'repository_name': value['repositoryName'],
        'repository_path': value['repositoryPath'],
        'repository_uuid': value['repositoryUuid'],
        'url': value['url'],
        'uuid': value['uuid'],
    };
}

