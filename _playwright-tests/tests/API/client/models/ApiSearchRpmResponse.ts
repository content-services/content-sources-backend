/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApiPackageSourcesResponse } from './ApiPackageSourcesResponse';
import {
    ApiPackageSourcesResponseFromJSON,
    ApiPackageSourcesResponseFromJSONTyped,
    ApiPackageSourcesResponseToJSON,
    ApiPackageSourcesResponseToJSONTyped,
} from './ApiPackageSourcesResponse';

/**
 * 
 * @export
 * @interface ApiSearchRpmResponse
 */
export interface ApiSearchRpmResponse {
    /**
     * Package name found
     * @type {string}
     * @memberof ApiSearchRpmResponse
     */
    packageName?: string;
    /**
     * List of the module streams for the package
     * @type {Array<ApiPackageSourcesResponse>}
     * @memberof ApiSearchRpmResponse
     */
    packageSources?: Array<ApiPackageSourcesResponse>;
    /**
     * Summary of the package found
     * @type {string}
     * @memberof ApiSearchRpmResponse
     */
    summary?: string;
}

/**
 * Check if a given object implements the ApiSearchRpmResponse interface.
 */
export function instanceOfApiSearchRpmResponse(value: object): value is ApiSearchRpmResponse {
    return true;
}

export function ApiSearchRpmResponseFromJSON(json: any): ApiSearchRpmResponse {
    return ApiSearchRpmResponseFromJSONTyped(json, false);
}

export function ApiSearchRpmResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiSearchRpmResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'packageName': json['package_name'] == null ? undefined : json['package_name'],
        'packageSources': json['package_sources'] == null ? undefined : ((json['package_sources'] as Array<any>).map(ApiPackageSourcesResponseFromJSON)),
        'summary': json['summary'] == null ? undefined : json['summary'],
    };
}

export function ApiSearchRpmResponseToJSON(json: any): ApiSearchRpmResponse {
    return ApiSearchRpmResponseToJSONTyped(json, false);
}

export function ApiSearchRpmResponseToJSONTyped(value?: ApiSearchRpmResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'package_name': value['packageName'],
        'package_sources': value['packageSources'] == null ? undefined : ((value['packageSources'] as Array<any>).map(ApiPackageSourcesResponseToJSON)),
        'summary': value['summary'],
    };
}

