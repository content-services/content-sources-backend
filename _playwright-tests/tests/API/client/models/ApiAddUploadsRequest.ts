/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApiUpload } from './ApiUpload';
import {
    ApiUploadFromJSON,
    ApiUploadFromJSONTyped,
    ApiUploadToJSON,
    ApiUploadToJSONTyped,
} from './ApiUpload';
import type { ApiArtifact } from './ApiArtifact';
import {
    ApiArtifactFromJSON,
    ApiArtifactFromJSONTyped,
    ApiArtifactToJSON,
    ApiArtifactToJSONTyped,
} from './ApiArtifact';

/**
 * 
 * @export
 * @interface ApiAddUploadsRequest
 */
export interface ApiAddUploadsRequest {
    /**
     * List of created artifacts
     * @type {Array<ApiArtifact>}
     * @memberof ApiAddUploadsRequest
     */
    artifacts?: Array<ApiArtifact>;
    /**
     * List of unfinished uploads
     * @type {Array<ApiUpload>}
     * @memberof ApiAddUploadsRequest
     */
    uploads?: Array<ApiUpload>;
}

/**
 * Check if a given object implements the ApiAddUploadsRequest interface.
 */
export function instanceOfApiAddUploadsRequest(value: object): value is ApiAddUploadsRequest {
    return true;
}

export function ApiAddUploadsRequestFromJSON(json: any): ApiAddUploadsRequest {
    return ApiAddUploadsRequestFromJSONTyped(json, false);
}

export function ApiAddUploadsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiAddUploadsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'artifacts': json['artifacts'] == null ? undefined : ((json['artifacts'] as Array<any>).map(ApiArtifactFromJSON)),
        'uploads': json['uploads'] == null ? undefined : ((json['uploads'] as Array<any>).map(ApiUploadFromJSON)),
    };
}

export function ApiAddUploadsRequestToJSON(json: any): ApiAddUploadsRequest {
    return ApiAddUploadsRequestToJSONTyped(json, false);
}

export function ApiAddUploadsRequestToJSONTyped(value?: ApiAddUploadsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'artifacts': value['artifacts'] == null ? undefined : ((value['artifacts'] as Array<any>).map(ApiArtifactToJSON)),
        'uploads': value['uploads'] == null ? undefined : ((value['uploads'] as Array<any>).map(ApiUploadToJSON)),
    };
}

