/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiRepositoryPackageGroup
 */
export interface ApiRepositoryPackageGroup {
    /**
     * The package group description
     * @type {string}
     * @memberof ApiRepositoryPackageGroup
     */
    description?: string;
    /**
     * The package group ID
     * @type {string}
     * @memberof ApiRepositoryPackageGroup
     */
    id?: string;
    /**
     * The package group name
     * @type {string}
     * @memberof ApiRepositoryPackageGroup
     */
    name?: string;
    /**
     * The list of packages in the package group
     * @type {Array<string>}
     * @memberof ApiRepositoryPackageGroup
     */
    packagelist?: Array<string>;
    /**
     * Identifier of the package group
     * @type {string}
     * @memberof ApiRepositoryPackageGroup
     */
    uuid?: string;
}

/**
 * Check if a given object implements the ApiRepositoryPackageGroup interface.
 */
export function instanceOfApiRepositoryPackageGroup(value: object): value is ApiRepositoryPackageGroup {
    return true;
}

export function ApiRepositoryPackageGroupFromJSON(json: any): ApiRepositoryPackageGroup {
    return ApiRepositoryPackageGroupFromJSONTyped(json, false);
}

export function ApiRepositoryPackageGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiRepositoryPackageGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'packagelist': json['packagelist'] == null ? undefined : json['packagelist'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
    };
}

export function ApiRepositoryPackageGroupToJSON(json: any): ApiRepositoryPackageGroup {
    return ApiRepositoryPackageGroupToJSONTyped(json, false);
}

export function ApiRepositoryPackageGroupToJSONTyped(value?: ApiRepositoryPackageGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'id': value['id'],
        'name': value['name'],
        'packagelist': value['packagelist'],
        'uuid': value['uuid'],
    };
}

