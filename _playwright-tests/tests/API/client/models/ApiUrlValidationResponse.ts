/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiUrlValidationResponse
 */
export interface ApiUrlValidationResponse {
    /**
     * Error message if the attribute is not valid
     * @type {string}
     * @memberof ApiUrlValidationResponse
     */
    error?: string;
    /**
     * If the metadata cannot be fetched successfully, the http code that is returned if the http request was completed
     * @type {number}
     * @memberof ApiUrlValidationResponse
     */
    httpCode?: number;
    /**
     * True if the metadata can be fetched successfully
     * @type {boolean}
     * @memberof ApiUrlValidationResponse
     */
    metadataPresent?: boolean;
    /**
     * True if a repomd.xml.sig file was found in the repository
     * @type {boolean}
     * @memberof ApiUrlValidationResponse
     */
    metadataSignaturePresent?: boolean;
    /**
     * Skipped if the URL is not passed in for validation
     * @type {boolean}
     * @memberof ApiUrlValidationResponse
     */
    skipped?: boolean;
    /**
     * Valid if not skipped and the provided attribute is valid
     * @type {boolean}
     * @memberof ApiUrlValidationResponse
     */
    valid?: boolean;
}

/**
 * Check if a given object implements the ApiUrlValidationResponse interface.
 */
export function instanceOfApiUrlValidationResponse(value: object): value is ApiUrlValidationResponse {
    return true;
}

export function ApiUrlValidationResponseFromJSON(json: any): ApiUrlValidationResponse {
    return ApiUrlValidationResponseFromJSONTyped(json, false);
}

export function ApiUrlValidationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiUrlValidationResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
        'httpCode': json['http_code'] == null ? undefined : json['http_code'],
        'metadataPresent': json['metadata_present'] == null ? undefined : json['metadata_present'],
        'metadataSignaturePresent': json['metadata_signature_present'] == null ? undefined : json['metadata_signature_present'],
        'skipped': json['skipped'] == null ? undefined : json['skipped'],
        'valid': json['valid'] == null ? undefined : json['valid'],
    };
}

export function ApiUrlValidationResponseToJSON(json: any): ApiUrlValidationResponse {
    return ApiUrlValidationResponseToJSONTyped(json, false);
}

export function ApiUrlValidationResponseToJSONTyped(value?: ApiUrlValidationResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
        'http_code': value['httpCode'],
        'metadata_present': value['metadataPresent'],
        'metadata_signature_present': value['metadataSignaturePresent'],
        'skipped': value['skipped'],
        'valid': value['valid'],
    };
}

