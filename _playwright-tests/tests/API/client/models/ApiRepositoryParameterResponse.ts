/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConfigDistributionVersion } from './ConfigDistributionVersion';
import {
    ConfigDistributionVersionFromJSON,
    ConfigDistributionVersionFromJSONTyped,
    ConfigDistributionVersionToJSON,
    ConfigDistributionVersionToJSONTyped,
} from './ConfigDistributionVersion';
import type { ConfigDistributionArch } from './ConfigDistributionArch';
import {
    ConfigDistributionArchFromJSON,
    ConfigDistributionArchFromJSONTyped,
    ConfigDistributionArchToJSON,
    ConfigDistributionArchToJSONTyped,
} from './ConfigDistributionArch';

/**
 * 
 * @export
 * @interface ApiRepositoryParameterResponse
 */
export interface ApiRepositoryParameterResponse {
    /**
     * Architectures available for repository creation
     * @type {Array<ConfigDistributionArch>}
     * @memberof ApiRepositoryParameterResponse
     */
    distributionArches?: Array<ConfigDistributionArch>;
    /**
     * Versions available for repository creation
     * @type {Array<ConfigDistributionVersion>}
     * @memberof ApiRepositoryParameterResponse
     */
    distributionVersions?: Array<ConfigDistributionVersion>;
}

/**
 * Check if a given object implements the ApiRepositoryParameterResponse interface.
 */
export function instanceOfApiRepositoryParameterResponse(value: object): value is ApiRepositoryParameterResponse {
    return true;
}

export function ApiRepositoryParameterResponseFromJSON(json: any): ApiRepositoryParameterResponse {
    return ApiRepositoryParameterResponseFromJSONTyped(json, false);
}

export function ApiRepositoryParameterResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiRepositoryParameterResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'distributionArches': json['distribution_arches'] == null ? undefined : ((json['distribution_arches'] as Array<any>).map(ConfigDistributionArchFromJSON)),
        'distributionVersions': json['distribution_versions'] == null ? undefined : ((json['distribution_versions'] as Array<any>).map(ConfigDistributionVersionFromJSON)),
    };
}

export function ApiRepositoryParameterResponseToJSON(json: any): ApiRepositoryParameterResponse {
    return ApiRepositoryParameterResponseToJSONTyped(json, false);
}

export function ApiRepositoryParameterResponseToJSONTyped(value?: ApiRepositoryParameterResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'distribution_arches': value['distributionArches'] == null ? undefined : ((value['distributionArches'] as Array<any>).map(ConfigDistributionArchToJSON)),
        'distribution_versions': value['distributionVersions'] == null ? undefined : ((value['distributionVersions'] as Array<any>).map(ConfigDistributionVersionToJSON)),
    };
}

