/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiTemplateRequest
 */
export interface ApiTemplateRequest {
    /**
     * Architecture of the template
     * @type {string}
     * @memberof ApiTemplateRequest
     */
    arch: string;
    /**
     * Latest date to include snapshots for
     * @type {string}
     * @memberof ApiTemplateRequest
     */
    date?: string;
    /**
     * Description of the template
     * @type {string}
     * @memberof ApiTemplateRequest
     */
    description?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof ApiTemplateRequest
     */
    name: string;
    /**
     * Repositories to add to the template
     * @type {Array<string>}
     * @memberof ApiTemplateRequest
     */
    repositoryUuids: Array<string>;
    /**
     * Use latest snapshot for all repositories in the template
     * @type {boolean}
     * @memberof ApiTemplateRequest
     */
    useLatest?: boolean;
    /**
     * Version of the template
     * @type {string}
     * @memberof ApiTemplateRequest
     */
    version: string;
}

/**
 * Check if a given object implements the ApiTemplateRequest interface.
 */
export function instanceOfApiTemplateRequest(value: object): value is ApiTemplateRequest {
    if (!('arch' in value) || value['arch'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('repositoryUuids' in value) || value['repositoryUuids'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    return true;
}

export function ApiTemplateRequestFromJSON(json: any): ApiTemplateRequest {
    return ApiTemplateRequestFromJSONTyped(json, false);
}

export function ApiTemplateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiTemplateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'arch': json['arch'],
        'date': json['date'] == null ? undefined : json['date'],
        'description': json['description'] == null ? undefined : json['description'],
        'name': json['name'],
        'repositoryUuids': json['repository_uuids'],
        'useLatest': json['use_latest'] == null ? undefined : json['use_latest'],
        'version': json['version'],
    };
}

export function ApiTemplateRequestToJSON(json: any): ApiTemplateRequest {
    return ApiTemplateRequestToJSONTyped(json, false);
}

export function ApiTemplateRequestToJSONTyped(value?: ApiTemplateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'arch': value['arch'],
        'date': value['date'],
        'description': value['description'],
        'name': value['name'],
        'repository_uuids': value['repositoryUuids'],
        'use_latest': value['useLatest'],
        'version': value['version'],
    };
}

