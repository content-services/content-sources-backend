/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiPublicRepositoryResponse
 */
export interface ApiPublicRepositoryResponse {
    /**
     * Error of last attempted introspection
     * @type {string}
     * @memberof ApiPublicRepositoryResponse
     */
    lastIntrospectionError?: string;
    /**
     * Status of last introspection
     * @type {string}
     * @memberof ApiPublicRepositoryResponse
     */
    lastIntrospectionStatus?: string;
    /**
     * Timestamp of last attempted introspection
     * @type {string}
     * @memberof ApiPublicRepositoryResponse
     */
    lastIntrospectionTime?: string;
    /**
     * Timestamp of last successful introspection
     * @type {string}
     * @memberof ApiPublicRepositoryResponse
     */
    lastSuccessIntrospectionTime?: string;
    /**
     * Timestamp of last introspection that had updates
     * @type {string}
     * @memberof ApiPublicRepositoryResponse
     */
    lastUpdateIntrospectionTime?: string;
    /**
     * Number of packages last read in the repository
     * @type {number}
     * @memberof ApiPublicRepositoryResponse
     */
    packageCount?: number;
    /**
     * Combined introspection and snapshot status of the repository
     * @type {string}
     * @memberof ApiPublicRepositoryResponse
     */
    status?: string;
    /**
     * URL of the remote yum repository
     * @type {string}
     * @memberof ApiPublicRepositoryResponse
     */
    url?: string;
}

/**
 * Check if a given object implements the ApiPublicRepositoryResponse interface.
 */
export function instanceOfApiPublicRepositoryResponse(value: object): value is ApiPublicRepositoryResponse {
    return true;
}

export function ApiPublicRepositoryResponseFromJSON(json: any): ApiPublicRepositoryResponse {
    return ApiPublicRepositoryResponseFromJSONTyped(json, false);
}

export function ApiPublicRepositoryResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiPublicRepositoryResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'lastIntrospectionError': json['last_introspection_error'] == null ? undefined : json['last_introspection_error'],
        'lastIntrospectionStatus': json['last_introspection_status'] == null ? undefined : json['last_introspection_status'],
        'lastIntrospectionTime': json['last_introspection_time'] == null ? undefined : json['last_introspection_time'],
        'lastSuccessIntrospectionTime': json['last_success_introspection_time'] == null ? undefined : json['last_success_introspection_time'],
        'lastUpdateIntrospectionTime': json['last_update_introspection_time'] == null ? undefined : json['last_update_introspection_time'],
        'packageCount': json['package_count'] == null ? undefined : json['package_count'],
        'status': json['status'] == null ? undefined : json['status'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function ApiPublicRepositoryResponseToJSON(json: any): ApiPublicRepositoryResponse {
    return ApiPublicRepositoryResponseToJSONTyped(json, false);
}

export function ApiPublicRepositoryResponseToJSONTyped(value?: ApiPublicRepositoryResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'last_introspection_error': value['lastIntrospectionError'],
        'last_introspection_status': value['lastIntrospectionStatus'],
        'last_introspection_time': value['lastIntrospectionTime'],
        'last_success_introspection_time': value['lastSuccessIntrospectionTime'],
        'last_update_introspection_time': value['lastUpdateIntrospectionTime'],
        'package_count': value['packageCount'],
        'status': value['status'],
        'url': value['url'],
    };
}

