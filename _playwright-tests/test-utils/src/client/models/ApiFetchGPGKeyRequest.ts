/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiFetchGPGKeyRequest
 */
export interface ApiFetchGPGKeyRequest {
    /**
     * The url from which to download the GPG Key.
     * @type {string}
     * @memberof ApiFetchGPGKeyRequest
     */
    url: string;
}

/**
 * Check if a given object implements the ApiFetchGPGKeyRequest interface.
 */
export function instanceOfApiFetchGPGKeyRequest(value: object): value is ApiFetchGPGKeyRequest {
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function ApiFetchGPGKeyRequestFromJSON(json: any): ApiFetchGPGKeyRequest {
    return ApiFetchGPGKeyRequestFromJSONTyped(json, false);
}

export function ApiFetchGPGKeyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiFetchGPGKeyRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
    };
}

export function ApiFetchGPGKeyRequestToJSON(json: any): ApiFetchGPGKeyRequest {
    return ApiFetchGPGKeyRequestToJSONTyped(json, false);
}

export function ApiFetchGPGKeyRequestToJSONTyped(value?: ApiFetchGPGKeyRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'url': value['url'],
    };
}

