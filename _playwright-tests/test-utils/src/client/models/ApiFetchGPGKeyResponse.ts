/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiFetchGPGKeyResponse
 */
export interface ApiFetchGPGKeyResponse {
    /**
     * The downloaded GPG Keys from the provided url.
     * @type {string}
     * @memberof ApiFetchGPGKeyResponse
     */
    gpgKey?: string;
}

/**
 * Check if a given object implements the ApiFetchGPGKeyResponse interface.
 */
export function instanceOfApiFetchGPGKeyResponse(value: object): value is ApiFetchGPGKeyResponse {
    return true;
}

export function ApiFetchGPGKeyResponseFromJSON(json: any): ApiFetchGPGKeyResponse {
    return ApiFetchGPGKeyResponseFromJSONTyped(json, false);
}

export function ApiFetchGPGKeyResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiFetchGPGKeyResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gpgKey': json['gpg_key'] == null ? undefined : json['gpg_key'],
    };
}

export function ApiFetchGPGKeyResponseToJSON(json: any): ApiFetchGPGKeyResponse {
    return ApiFetchGPGKeyResponseToJSONTyped(json, false);
}

export function ApiFetchGPGKeyResponseToJSONTyped(value?: ApiFetchGPGKeyResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'gpg_key': value['gpgKey'],
    };
}

