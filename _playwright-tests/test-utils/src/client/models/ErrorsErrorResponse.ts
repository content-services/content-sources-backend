/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ErrorsHandlerError } from './ErrorsHandlerError';
import {
    ErrorsHandlerErrorFromJSON,
    ErrorsHandlerErrorFromJSONTyped,
    ErrorsHandlerErrorToJSON,
    ErrorsHandlerErrorToJSONTyped,
} from './ErrorsHandlerError';

/**
 * 
 * @export
 * @interface ErrorsErrorResponse
 */
export interface ErrorsErrorResponse {
    /**
     * 
     * @type {Array<ErrorsHandlerError>}
     * @memberof ErrorsErrorResponse
     */
    errors?: Array<ErrorsHandlerError>;
}

/**
 * Check if a given object implements the ErrorsErrorResponse interface.
 */
export function instanceOfErrorsErrorResponse(value: object): value is ErrorsErrorResponse {
    return true;
}

export function ErrorsErrorResponseFromJSON(json: any): ErrorsErrorResponse {
    return ErrorsErrorResponseFromJSONTyped(json, false);
}

export function ErrorsErrorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorsErrorResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(ErrorsHandlerErrorFromJSON)),
    };
}

export function ErrorsErrorResponseToJSON(json: any): ErrorsErrorResponse {
    return ErrorsErrorResponseToJSONTyped(json, false);
}

export function ErrorsErrorResponseToJSONTyped(value?: ErrorsErrorResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'errors': value['errors'] == null ? undefined : ((value['errors'] as Array<any>).map(ErrorsHandlerErrorToJSON)),
    };
}

