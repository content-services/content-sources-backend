/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiUploadResponse
 */
export interface ApiUploadResponse {
    /**
     * Artifact href if one exists (on create only)
     * @type {string}
     * @memberof ApiUploadResponse
     */
    artifactHref?: string;
    /**
     * Timestamp when upload is committed
     * @type {string}
     * @memberof ApiUploadResponse
     */
    completed?: string;
    /**
     * A list of already completed checksums
     * @type {Array<string>}
     * @memberof ApiUploadResponse
     */
    completedChecksums?: Array<string>;
    /**
     * Timestamp of creation
     * @type {string}
     * @memberof ApiUploadResponse
     */
    created?: string;
    /**
     * Timestamp of last update
     * @type {string}
     * @memberof ApiUploadResponse
     */
    lastUpdated?: string;
    /**
     * Size of the upload in bytes
     * @type {number}
     * @memberof ApiUploadResponse
     */
    size?: number;
    /**
     * Upload UUID
     * @type {string}
     * @memberof ApiUploadResponse
     */
    uploadUuid?: string;
}

/**
 * Check if a given object implements the ApiUploadResponse interface.
 */
export function instanceOfApiUploadResponse(value: object): value is ApiUploadResponse {
    return true;
}

export function ApiUploadResponseFromJSON(json: any): ApiUploadResponse {
    return ApiUploadResponseFromJSONTyped(json, false);
}

export function ApiUploadResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiUploadResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'artifactHref': json['artifact_href'] == null ? undefined : json['artifact_href'],
        'completed': json['completed'] == null ? undefined : json['completed'],
        'completedChecksums': json['completed_checksums'] == null ? undefined : json['completed_checksums'],
        'created': json['created'] == null ? undefined : json['created'],
        'lastUpdated': json['last_updated'] == null ? undefined : json['last_updated'],
        'size': json['size'] == null ? undefined : json['size'],
        'uploadUuid': json['upload_uuid'] == null ? undefined : json['upload_uuid'],
    };
}

export function ApiUploadResponseToJSON(json: any): ApiUploadResponse {
    return ApiUploadResponseToJSONTyped(json, false);
}

export function ApiUploadResponseToJSONTyped(value?: ApiUploadResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'artifact_href': value['artifactHref'],
        'completed': value['completed'],
        'completed_checksums': value['completedChecksums'],
        'created': value['created'],
        'last_updated': value['lastUpdated'],
        'size': value['size'],
        'upload_uuid': value['uploadUuid'],
    };
}

