/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiSnapshotErrata
 */
export interface ApiSnapshotErrata {
    /**
     * List of CVEs
     * @type {Array<string>}
     * @memberof ApiSnapshotErrata
     */
    cves?: Array<string>;
    /**
     * Description of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    description?: string;
    /**
     * ID of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    errataId?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    id?: string;
    /**
     * IssuedDate of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    issuedDate?: string;
    /**
     * Whether a reboot is suggested
     * @type {boolean}
     * @memberof ApiSnapshotErrata
     */
    rebootSuggested?: boolean;
    /**
     * Severity of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    severity?: string;
    /**
     * Summary of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    summary?: string;
    /**
     * Title of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    title?: string;
    /**
     * Type of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    type?: string;
    /**
     * UpdateDate of the errata
     * @type {string}
     * @memberof ApiSnapshotErrata
     */
    updatedDate?: string;
}

/**
 * Check if a given object implements the ApiSnapshotErrata interface.
 */
export function instanceOfApiSnapshotErrata(value: object): value is ApiSnapshotErrata {
    return true;
}

export function ApiSnapshotErrataFromJSON(json: any): ApiSnapshotErrata {
    return ApiSnapshotErrataFromJSONTyped(json, false);
}

export function ApiSnapshotErrataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiSnapshotErrata {
    if (json == null) {
        return json;
    }
    return {
        
        'cves': json['cves'] == null ? undefined : json['cves'],
        'description': json['description'] == null ? undefined : json['description'],
        'errataId': json['errata_id'] == null ? undefined : json['errata_id'],
        'id': json['id'] == null ? undefined : json['id'],
        'issuedDate': json['issued_date'] == null ? undefined : json['issued_date'],
        'rebootSuggested': json['reboot_suggested'] == null ? undefined : json['reboot_suggested'],
        'severity': json['severity'] == null ? undefined : json['severity'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : json['type'],
        'updatedDate': json['updated_date'] == null ? undefined : json['updated_date'],
    };
}

export function ApiSnapshotErrataToJSON(json: any): ApiSnapshotErrata {
    return ApiSnapshotErrataToJSONTyped(json, false);
}

export function ApiSnapshotErrataToJSONTyped(value?: ApiSnapshotErrata | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cves': value['cves'],
        'description': value['description'],
        'errata_id': value['errataId'],
        'id': value['id'],
        'issued_date': value['issuedDate'],
        'reboot_suggested': value['rebootSuggested'],
        'severity': value['severity'],
        'summary': value['summary'],
        'title': value['title'],
        'type': value['type'],
        'updated_date': value['updatedDate'],
    };
}

