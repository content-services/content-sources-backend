/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApiStream } from './ApiStream';
import {
    ApiStreamFromJSON,
    ApiStreamFromJSONTyped,
    ApiStreamToJSON,
    ApiStreamToJSONTyped,
} from './ApiStream';

/**
 * 
 * @export
 * @interface ApiSearchModuleStreams
 */
export interface ApiSearchModuleStreams {
    /**
     * Module name
     * @type {string}
     * @memberof ApiSearchModuleStreams
     */
    moduleName?: string;
    /**
     * A list of stream related information for the module
     * @type {Array<ApiStream>}
     * @memberof ApiSearchModuleStreams
     */
    streams?: Array<ApiStream>;
}

/**
 * Check if a given object implements the ApiSearchModuleStreams interface.
 */
export function instanceOfApiSearchModuleStreams(value: object): value is ApiSearchModuleStreams {
    return true;
}

export function ApiSearchModuleStreamsFromJSON(json: any): ApiSearchModuleStreams {
    return ApiSearchModuleStreamsFromJSONTyped(json, false);
}

export function ApiSearchModuleStreamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiSearchModuleStreams {
    if (json == null) {
        return json;
    }
    return {
        
        'moduleName': json['module_name'] == null ? undefined : json['module_name'],
        'streams': json['streams'] == null ? undefined : ((json['streams'] as Array<any>).map(ApiStreamFromJSON)),
    };
}

export function ApiSearchModuleStreamsToJSON(json: any): ApiSearchModuleStreams {
    return ApiSearchModuleStreamsToJSONTyped(json, false);
}

export function ApiSearchModuleStreamsToJSONTyped(value?: ApiSearchModuleStreams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'module_name': value['moduleName'],
        'streams': value['streams'] == null ? undefined : ((value['streams'] as Array<any>).map(ApiStreamToJSON)),
    };
}

