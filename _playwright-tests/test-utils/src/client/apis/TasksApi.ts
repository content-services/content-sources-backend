/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiTaskInfoCollectionResponse,
  ApiTaskInfoResponse,
  ErrorsErrorResponse,
} from '../models/index';
import {
    ApiTaskInfoCollectionResponseFromJSON,
    ApiTaskInfoCollectionResponseToJSON,
    ApiTaskInfoResponseFromJSON,
    ApiTaskInfoResponseToJSON,
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
} from '../models/index';

export interface GetTaskRequest {
    uuid: string;
}

export interface ListTasksRequest {
    offset?: number;
    limit?: number;
    status?: string;
    type?: string;
    repositoryUuid?: string;
    templateUuid?: string;
    excludeRedHatOrg?: boolean;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Get information about a specific task.
     * Get Task
     */
    async getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTaskInfoResponse>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/tasks/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTaskInfoResponseFromJSON(jsonValue));
    }

    /**
     * Get information about a specific task.
     * Get Task
     */
    async getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTaskInfoResponse> {
        const response = await this.getTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of tasks.
     * List Tasks
     */
    async listTasksRaw(requestParameters: ListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTaskInfoCollectionResponse>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['repositoryUuid'] != null) {
            queryParameters['repository_uuid'] = requestParameters['repositoryUuid'];
        }

        if (requestParameters['templateUuid'] != null) {
            queryParameters['template_uuid'] = requestParameters['templateUuid'];
        }

        if (requestParameters['excludeRedHatOrg'] != null) {
            queryParameters['exclude_red_hat_org'] = requestParameters['excludeRedHatOrg'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/tasks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTaskInfoCollectionResponseFromJSON(jsonValue));
    }

    /**
     * Get the list of tasks.
     * List Tasks
     */
    async listTasks(requestParameters: ListTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTaskInfoCollectionResponse> {
        const response = await this.listTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
