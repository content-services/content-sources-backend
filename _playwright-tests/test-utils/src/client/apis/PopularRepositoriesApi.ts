/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiPopularRepositoriesCollectionResponse,
  ErrorsErrorResponse,
} from '../models/index';
import {
    ApiPopularRepositoriesCollectionResponseFromJSON,
    ApiPopularRepositoriesCollectionResponseToJSON,
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
} from '../models/index';

export interface ListPopularRepositoriesRequest {
    offset?: number;
    limit?: number;
    search?: string;
}

/**
 * 
 */
export class PopularRepositoriesApi extends runtime.BaseAPI {

    /**
     * This operation enables retrieving a paginated list of repository suggestions that are commonly used.
     * List Popular Repositories
     */
    async listPopularRepositoriesRaw(requestParameters: ListPopularRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiPopularRepositoriesCollectionResponse>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/popular_repositories/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiPopularRepositoriesCollectionResponseFromJSON(jsonValue));
    }

    /**
     * This operation enables retrieving a paginated list of repository suggestions that are commonly used.
     * List Popular Repositories
     */
    async listPopularRepositories(requestParameters: ListPopularRepositoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiPopularRepositoriesCollectionResponse> {
        const response = await this.listPopularRepositoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
