/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiSearchModuleStreams,
  ApiSearchModuleStreamsRequest,
  ApiSearchSnapshotModuleStreamsRequest,
  ErrorsErrorResponse,
} from '../models/index';
import {
    ApiSearchModuleStreamsFromJSON,
    ApiSearchModuleStreamsToJSON,
    ApiSearchModuleStreamsRequestFromJSON,
    ApiSearchModuleStreamsRequestToJSON,
    ApiSearchSnapshotModuleStreamsRequestFromJSON,
    ApiSearchSnapshotModuleStreamsRequestToJSON,
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
} from '../models/index';

export interface SearchRepositoryModuleStreamsRequest {
    apiSearchModuleStreamsRequest: ApiSearchModuleStreamsRequest;
}

export interface SearchSnapshotModuleStreamsRequest {
    apiSearchSnapshotModuleStreamsRequest: ApiSearchSnapshotModuleStreamsRequest;
}

/**
 * 
 */
export class ModuleStreamsApi extends runtime.BaseAPI {

    /**
     * List modules and their streams for repositories
     * List modules and their streams for repositories
     */
    async searchRepositoryModuleStreamsRaw(requestParameters: SearchRepositoryModuleStreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiSearchModuleStreams>>> {
        if (requestParameters['apiSearchModuleStreamsRequest'] == null) {
            throw new runtime.RequiredError(
                'apiSearchModuleStreamsRequest',
                'Required parameter "apiSearchModuleStreamsRequest" was null or undefined when calling searchRepositoryModuleStreams().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/module_streams/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiSearchModuleStreamsRequestToJSON(requestParameters['apiSearchModuleStreamsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiSearchModuleStreamsFromJSON));
    }

    /**
     * List modules and their streams for repositories
     * List modules and their streams for repositories
     */
    async searchRepositoryModuleStreams(requestParameters: SearchRepositoryModuleStreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiSearchModuleStreams>> {
        const response = await this.searchRepositoryModuleStreamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List modules and their streams for snapshots
     * List modules and their streams for snapshots
     */
    async searchSnapshotModuleStreamsRaw(requestParameters: SearchSnapshotModuleStreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiSearchModuleStreams>>> {
        if (requestParameters['apiSearchSnapshotModuleStreamsRequest'] == null) {
            throw new runtime.RequiredError(
                'apiSearchSnapshotModuleStreamsRequest',
                'Required parameter "apiSearchSnapshotModuleStreamsRequest" was null or undefined when calling searchSnapshotModuleStreams().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/snapshots/module_streams/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiSearchSnapshotModuleStreamsRequestToJSON(requestParameters['apiSearchSnapshotModuleStreamsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiSearchModuleStreamsFromJSON));
    }

    /**
     * List modules and their streams for snapshots
     * List modules and their streams for snapshots
     */
    async searchSnapshotModuleStreams(requestParameters: SearchSnapshotModuleStreamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiSearchModuleStreams>> {
        const response = await this.searchSnapshotModuleStreamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
