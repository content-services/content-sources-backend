/* tslint:disable */
/* eslint-disable */
/**
 * ContentSourcesBackend
 * The API for the repositories of the content sources that you can use to create and manage repositories between third-party applications and the [Red Hat Hybrid Cloud Console](https://console.redhat.com). With these repositories, you can build and deploy images using Image Builder for Cloud, on-Premise, and Edge. You can handle tasks, search for required RPMs, fetch a GPGKey from the URL, and list the features within applications. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiListSnapshotByDateRequest,
  ApiListSnapshotByDateResponse,
  ApiSnapshotCollectionResponse,
  ApiUUIDListRequest,
  ErrorsErrorResponse,
} from '../models/index';
import {
    ApiListSnapshotByDateRequestFromJSON,
    ApiListSnapshotByDateRequestToJSON,
    ApiListSnapshotByDateResponseFromJSON,
    ApiListSnapshotByDateResponseToJSON,
    ApiSnapshotCollectionResponseFromJSON,
    ApiSnapshotCollectionResponseToJSON,
    ApiUUIDListRequestFromJSON,
    ApiUUIDListRequestToJSON,
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
} from '../models/index';

export interface BulkDeleteSnapshotsRequest {
    repoUuid: string;
    apiUUIDListRequest: ApiUUIDListRequest;
}

export interface DeleteSnapshotRequest {
    repoUuid: string;
    snapshotUuid: string;
}

export interface ListSnapshotsByDateRequest {
    apiListSnapshotByDateRequest: ApiListSnapshotByDateRequest;
}

export interface ListSnapshotsForRepoRequest {
    uuid: string;
    sortBy?: string;
    offset?: number;
    limit?: number;
}

export interface ListSnapshotsForTemplateRequest {
    uuid: string;
    repositorySearch?: string;
    sortBy?: string;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class SnapshotsApi extends runtime.BaseAPI {

    /**
     * This enables deleting specified snapshots from a repository.
     * Bulk delete a snapshots
     */
    async bulkDeleteSnapshotsRaw(requestParameters: BulkDeleteSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['repoUuid'] == null) {
            throw new runtime.RequiredError(
                'repoUuid',
                'Required parameter "repoUuid" was null or undefined when calling bulkDeleteSnapshots().'
            );
        }

        if (requestParameters['apiUUIDListRequest'] == null) {
            throw new runtime.RequiredError(
                'apiUUIDListRequest',
                'Required parameter "apiUUIDListRequest" was null or undefined when calling bulkDeleteSnapshots().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/repositories/{repo_uuid}/snapshots/bulk_delete/`.replace(`{${"repo_uuid"}}`, encodeURIComponent(String(requestParameters['repoUuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiUUIDListRequestToJSON(requestParameters['apiUUIDListRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables deleting specified snapshots from a repository.
     * Bulk delete a snapshots
     */
    async bulkDeleteSnapshots(requestParameters: BulkDeleteSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteSnapshotsRaw(requestParameters, initOverrides);
    }

    /**
     * This enables deleting a specific snapshot.
     * Delete a snapshot
     */
    async deleteSnapshotRaw(requestParameters: DeleteSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['repoUuid'] == null) {
            throw new runtime.RequiredError(
                'repoUuid',
                'Required parameter "repoUuid" was null or undefined when calling deleteSnapshot().'
            );
        }

        if (requestParameters['snapshotUuid'] == null) {
            throw new runtime.RequiredError(
                'snapshotUuid',
                'Required parameter "snapshotUuid" was null or undefined when calling deleteSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repositories/{repo_uuid}/snapshots/{snapshot_uuid}`.replace(`{${"repo_uuid"}}`, encodeURIComponent(String(requestParameters['repoUuid']))).replace(`{${"snapshot_uuid"}}`, encodeURIComponent(String(requestParameters['snapshotUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables deleting a specific snapshot.
     * Delete a snapshot
     */
    async deleteSnapshot(requestParameters: DeleteSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSnapshotRaw(requestParameters, initOverrides);
    }

    /**
     * Get nearest snapshot by date for a list of repositories.
     * Get nearest snapshot by date for a list of repositories.
     */
    async listSnapshotsByDateRaw(requestParameters: ListSnapshotsByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiListSnapshotByDateResponse>> {
        if (requestParameters['apiListSnapshotByDateRequest'] == null) {
            throw new runtime.RequiredError(
                'apiListSnapshotByDateRequest',
                'Required parameter "apiListSnapshotByDateRequest" was null or undefined when calling listSnapshotsByDate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/snapshots/for_date/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiListSnapshotByDateRequestToJSON(requestParameters['apiListSnapshotByDateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiListSnapshotByDateResponseFromJSON(jsonValue));
    }

    /**
     * Get nearest snapshot by date for a list of repositories.
     * Get nearest snapshot by date for a list of repositories.
     */
    async listSnapshotsByDate(requestParameters: ListSnapshotsByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiListSnapshotByDateResponse> {
        const response = await this.listSnapshotsByDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List snapshots of a repository.
     * List snapshots of a repository
     */
    async listSnapshotsForRepoRaw(requestParameters: ListSnapshotsForRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiSnapshotCollectionResponse>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling listSnapshotsForRepo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repositories/{uuid}/snapshots/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiSnapshotCollectionResponseFromJSON(jsonValue));
    }

    /**
     * List snapshots of a repository.
     * List snapshots of a repository
     */
    async listSnapshotsForRepo(requestParameters: ListSnapshotsForRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiSnapshotCollectionResponse> {
        const response = await this.listSnapshotsForRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List snapshots for a template.
     * List snapshots for a template
     */
    async listSnapshotsForTemplateRaw(requestParameters: ListSnapshotsForTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiSnapshotCollectionResponse>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling listSnapshotsForTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['repositorySearch'] != null) {
            queryParameters['repository_search'] = requestParameters['repositorySearch'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/templates/{uuid}/snapshots/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiSnapshotCollectionResponseFromJSON(jsonValue));
    }

    /**
     * List snapshots for a template.
     * List snapshots for a template
     */
    async listSnapshotsForTemplate(requestParameters: ListSnapshotsForTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiSnapshotCollectionResponse> {
        const response = await this.listSnapshotsForTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
