// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cache

import (
	"context"

	"github.com/RedHatInsights/rbac-client-go"
	"github.com/content-services/content-sources-backend/pkg/api"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// GetAccessList provides a mock function for the type MockCache
func (_mock *MockCache) GetAccessList(ctx context.Context) (rbac.AccessList, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessList")
	}

	var r0 rbac.AccessList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (rbac.AccessList, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) rbac.AccessList); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbac.AccessList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessList'
type MockCache_GetAccessList_Call struct {
	*mock.Call
}

// GetAccessList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) GetAccessList(ctx interface{}) *MockCache_GetAccessList_Call {
	return &MockCache_GetAccessList_Call{Call: _e.mock.On("GetAccessList", ctx)}
}

func (_c *MockCache_GetAccessList_Call) Run(run func(ctx context.Context)) *MockCache_GetAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_GetAccessList_Call) Return(accessList rbac.AccessList, err error) *MockCache_GetAccessList_Call {
	_c.Call.Return(accessList, err)
	return _c
}

func (_c *MockCache_GetAccessList_Call) RunAndReturn(run func(ctx context.Context) (rbac.AccessList, error)) *MockCache_GetAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureStatus provides a mock function for the type MockCache
func (_mock *MockCache) GetFeatureStatus(ctx context.Context) (*api.FeatureStatus, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureStatus")
	}

	var r0 *api.FeatureStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*api.FeatureStatus, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *api.FeatureStatus); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.FeatureStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetFeatureStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureStatus'
type MockCache_GetFeatureStatus_Call struct {
	*mock.Call
}

// GetFeatureStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) GetFeatureStatus(ctx interface{}) *MockCache_GetFeatureStatus_Call {
	return &MockCache_GetFeatureStatus_Call{Call: _e.mock.On("GetFeatureStatus", ctx)}
}

func (_c *MockCache_GetFeatureStatus_Call) Run(run func(ctx context.Context)) *MockCache_GetFeatureStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_GetFeatureStatus_Call) Return(featureStatus *api.FeatureStatus, err error) *MockCache_GetFeatureStatus_Call {
	_c.Call.Return(featureStatus, err)
	return _c
}

func (_c *MockCache_GetFeatureStatus_Call) RunAndReturn(run func(ctx context.Context) (*api.FeatureStatus, error)) *MockCache_GetFeatureStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetPulpContentPath provides a mock function for the type MockCache
func (_mock *MockCache) GetPulpContentPath(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPulpContentPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetPulpContentPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPulpContentPath'
type MockCache_GetPulpContentPath_Call struct {
	*mock.Call
}

// GetPulpContentPath is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) GetPulpContentPath(ctx interface{}) *MockCache_GetPulpContentPath_Call {
	return &MockCache_GetPulpContentPath_Call{Call: _e.mock.On("GetPulpContentPath", ctx)}
}

func (_c *MockCache_GetPulpContentPath_Call) Run(run func(ctx context.Context)) *MockCache_GetPulpContentPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_GetPulpContentPath_Call) Return(s string, err error) *MockCache_GetPulpContentPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCache_GetPulpContentPath_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockCache_GetPulpContentPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoadmapAppstreams provides a mock function for the type MockCache
func (_mock *MockCache) GetRoadmapAppstreams(ctx context.Context) ([]byte, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRoadmapAppstreams")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetRoadmapAppstreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoadmapAppstreams'
type MockCache_GetRoadmapAppstreams_Call struct {
	*mock.Call
}

// GetRoadmapAppstreams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) GetRoadmapAppstreams(ctx interface{}) *MockCache_GetRoadmapAppstreams_Call {
	return &MockCache_GetRoadmapAppstreams_Call{Call: _e.mock.On("GetRoadmapAppstreams", ctx)}
}

func (_c *MockCache_GetRoadmapAppstreams_Call) Run(run func(ctx context.Context)) *MockCache_GetRoadmapAppstreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_GetRoadmapAppstreams_Call) Return(bytes []byte, err error) *MockCache_GetRoadmapAppstreams_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCache_GetRoadmapAppstreams_Call) RunAndReturn(run func(ctx context.Context) ([]byte, error)) *MockCache_GetRoadmapAppstreams_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoadmapRhelLifecycle provides a mock function for the type MockCache
func (_mock *MockCache) GetRoadmapRhelLifecycle(ctx context.Context) ([]byte, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRoadmapRhelLifecycle")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetRoadmapRhelLifecycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoadmapRhelLifecycle'
type MockCache_GetRoadmapRhelLifecycle_Call struct {
	*mock.Call
}

// GetRoadmapRhelLifecycle is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) GetRoadmapRhelLifecycle(ctx interface{}) *MockCache_GetRoadmapRhelLifecycle_Call {
	return &MockCache_GetRoadmapRhelLifecycle_Call{Call: _e.mock.On("GetRoadmapRhelLifecycle", ctx)}
}

func (_c *MockCache_GetRoadmapRhelLifecycle_Call) Run(run func(ctx context.Context)) *MockCache_GetRoadmapRhelLifecycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_GetRoadmapRhelLifecycle_Call) Return(bytes []byte, err error) *MockCache_GetRoadmapRhelLifecycle_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCache_GetRoadmapRhelLifecycle_Call) RunAndReturn(run func(ctx context.Context) ([]byte, error)) *MockCache_GetRoadmapRhelLifecycle_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscriptionCheck provides a mock function for the type MockCache
func (_mock *MockCache) GetSubscriptionCheck(ctx context.Context) (*api.SubscriptionCheckResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionCheck")
	}

	var r0 *api.SubscriptionCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*api.SubscriptionCheckResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *api.SubscriptionCheckResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SubscriptionCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetSubscriptionCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptionCheck'
type MockCache_GetSubscriptionCheck_Call struct {
	*mock.Call
}

// GetSubscriptionCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) GetSubscriptionCheck(ctx interface{}) *MockCache_GetSubscriptionCheck_Call {
	return &MockCache_GetSubscriptionCheck_Call{Call: _e.mock.On("GetSubscriptionCheck", ctx)}
}

func (_c *MockCache_GetSubscriptionCheck_Call) Run(run func(ctx context.Context)) *MockCache_GetSubscriptionCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_GetSubscriptionCheck_Call) Return(subscriptionCheckResponse *api.SubscriptionCheckResponse, err error) *MockCache_GetSubscriptionCheck_Call {
	_c.Call.Return(subscriptionCheckResponse, err)
	return _c
}

func (_c *MockCache_GetSubscriptionCheck_Call) RunAndReturn(run func(ctx context.Context) (*api.SubscriptionCheckResponse, error)) *MockCache_GetSubscriptionCheck_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessList provides a mock function for the type MockCache
func (_mock *MockCache) SetAccessList(ctx context.Context, accessList rbac.AccessList) error {
	ret := _mock.Called(ctx, accessList)

	if len(ret) == 0 {
		panic("no return value specified for SetAccessList")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, rbac.AccessList) error); ok {
		r0 = returnFunc(ctx, accessList)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SetAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessList'
type MockCache_SetAccessList_Call struct {
	*mock.Call
}

// SetAccessList is a helper method to define mock.On call
//   - ctx context.Context
//   - accessList rbac.AccessList
func (_e *MockCache_Expecter) SetAccessList(ctx interface{}, accessList interface{}) *MockCache_SetAccessList_Call {
	return &MockCache_SetAccessList_Call{Call: _e.mock.On("SetAccessList", ctx, accessList)}
}

func (_c *MockCache_SetAccessList_Call) Run(run func(ctx context.Context, accessList rbac.AccessList)) *MockCache_SetAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 rbac.AccessList
		if args[1] != nil {
			arg1 = args[1].(rbac.AccessList)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_SetAccessList_Call) Return(err error) *MockCache_SetAccessList_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SetAccessList_Call) RunAndReturn(run func(ctx context.Context, accessList rbac.AccessList) error) *MockCache_SetAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// SetFeatureStatus provides a mock function for the type MockCache
func (_mock *MockCache) SetFeatureStatus(ctx context.Context, response api.FeatureStatus) error {
	ret := _mock.Called(ctx, response)

	if len(ret) == 0 {
		panic("no return value specified for SetFeatureStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.FeatureStatus) error); ok {
		r0 = returnFunc(ctx, response)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SetFeatureStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeatureStatus'
type MockCache_SetFeatureStatus_Call struct {
	*mock.Call
}

// SetFeatureStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - response api.FeatureStatus
func (_e *MockCache_Expecter) SetFeatureStatus(ctx interface{}, response interface{}) *MockCache_SetFeatureStatus_Call {
	return &MockCache_SetFeatureStatus_Call{Call: _e.mock.On("SetFeatureStatus", ctx, response)}
}

func (_c *MockCache_SetFeatureStatus_Call) Run(run func(ctx context.Context, response api.FeatureStatus)) *MockCache_SetFeatureStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.FeatureStatus
		if args[1] != nil {
			arg1 = args[1].(api.FeatureStatus)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_SetFeatureStatus_Call) Return(err error) *MockCache_SetFeatureStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SetFeatureStatus_Call) RunAndReturn(run func(ctx context.Context, response api.FeatureStatus) error) *MockCache_SetFeatureStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetPulpContentPath provides a mock function for the type MockCache
func (_mock *MockCache) SetPulpContentPath(ctx context.Context, pulpContentPath string) error {
	ret := _mock.Called(ctx, pulpContentPath)

	if len(ret) == 0 {
		panic("no return value specified for SetPulpContentPath")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, pulpContentPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SetPulpContentPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPulpContentPath'
type MockCache_SetPulpContentPath_Call struct {
	*mock.Call
}

// SetPulpContentPath is a helper method to define mock.On call
//   - ctx context.Context
//   - pulpContentPath string
func (_e *MockCache_Expecter) SetPulpContentPath(ctx interface{}, pulpContentPath interface{}) *MockCache_SetPulpContentPath_Call {
	return &MockCache_SetPulpContentPath_Call{Call: _e.mock.On("SetPulpContentPath", ctx, pulpContentPath)}
}

func (_c *MockCache_SetPulpContentPath_Call) Run(run func(ctx context.Context, pulpContentPath string)) *MockCache_SetPulpContentPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_SetPulpContentPath_Call) Return(err error) *MockCache_SetPulpContentPath_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SetPulpContentPath_Call) RunAndReturn(run func(ctx context.Context, pulpContentPath string) error) *MockCache_SetPulpContentPath_Call {
	_c.Call.Return(run)
	return _c
}

// SetRoadmapAppstreams provides a mock function for the type MockCache
func (_mock *MockCache) SetRoadmapAppstreams(ctx context.Context, roadmapAppstreamsResponse []byte) {
	_mock.Called(ctx, roadmapAppstreamsResponse)
	return
}

// MockCache_SetRoadmapAppstreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoadmapAppstreams'
type MockCache_SetRoadmapAppstreams_Call struct {
	*mock.Call
}

// SetRoadmapAppstreams is a helper method to define mock.On call
//   - ctx context.Context
//   - roadmapAppstreamsResponse []byte
func (_e *MockCache_Expecter) SetRoadmapAppstreams(ctx interface{}, roadmapAppstreamsResponse interface{}) *MockCache_SetRoadmapAppstreams_Call {
	return &MockCache_SetRoadmapAppstreams_Call{Call: _e.mock.On("SetRoadmapAppstreams", ctx, roadmapAppstreamsResponse)}
}

func (_c *MockCache_SetRoadmapAppstreams_Call) Run(run func(ctx context.Context, roadmapAppstreamsResponse []byte)) *MockCache_SetRoadmapAppstreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_SetRoadmapAppstreams_Call) Return() *MockCache_SetRoadmapAppstreams_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_SetRoadmapAppstreams_Call) RunAndReturn(run func(ctx context.Context, roadmapAppstreamsResponse []byte)) *MockCache_SetRoadmapAppstreams_Call {
	_c.Run(run)
	return _c
}

// SetRoadmapRhelLifecycle provides a mock function for the type MockCache
func (_mock *MockCache) SetRoadmapRhelLifecycle(ctx context.Context, rhelLifecyleResponse []byte) {
	_mock.Called(ctx, rhelLifecyleResponse)
	return
}

// MockCache_SetRoadmapRhelLifecycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoadmapRhelLifecycle'
type MockCache_SetRoadmapRhelLifecycle_Call struct {
	*mock.Call
}

// SetRoadmapRhelLifecycle is a helper method to define mock.On call
//   - ctx context.Context
//   - rhelLifecyleResponse []byte
func (_e *MockCache_Expecter) SetRoadmapRhelLifecycle(ctx interface{}, rhelLifecyleResponse interface{}) *MockCache_SetRoadmapRhelLifecycle_Call {
	return &MockCache_SetRoadmapRhelLifecycle_Call{Call: _e.mock.On("SetRoadmapRhelLifecycle", ctx, rhelLifecyleResponse)}
}

func (_c *MockCache_SetRoadmapRhelLifecycle_Call) Run(run func(ctx context.Context, rhelLifecyleResponse []byte)) *MockCache_SetRoadmapRhelLifecycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_SetRoadmapRhelLifecycle_Call) Return() *MockCache_SetRoadmapRhelLifecycle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_SetRoadmapRhelLifecycle_Call) RunAndReturn(run func(ctx context.Context, rhelLifecyleResponse []byte)) *MockCache_SetRoadmapRhelLifecycle_Call {
	_c.Run(run)
	return _c
}

// SetSubscriptionCheck provides a mock function for the type MockCache
func (_mock *MockCache) SetSubscriptionCheck(ctx context.Context, response api.SubscriptionCheckResponse) error {
	ret := _mock.Called(ctx, response)

	if len(ret) == 0 {
		panic("no return value specified for SetSubscriptionCheck")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.SubscriptionCheckResponse) error); ok {
		r0 = returnFunc(ctx, response)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SetSubscriptionCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSubscriptionCheck'
type MockCache_SetSubscriptionCheck_Call struct {
	*mock.Call
}

// SetSubscriptionCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - response api.SubscriptionCheckResponse
func (_e *MockCache_Expecter) SetSubscriptionCheck(ctx interface{}, response interface{}) *MockCache_SetSubscriptionCheck_Call {
	return &MockCache_SetSubscriptionCheck_Call{Call: _e.mock.On("SetSubscriptionCheck", ctx, response)}
}

func (_c *MockCache_SetSubscriptionCheck_Call) Run(run func(ctx context.Context, response api.SubscriptionCheckResponse)) *MockCache_SetSubscriptionCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.SubscriptionCheckResponse
		if args[1] != nil {
			arg1 = args[1].(api.SubscriptionCheckResponse)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_SetSubscriptionCheck_Call) Return(err error) *MockCache_SetSubscriptionCheck_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SetSubscriptionCheck_Call) RunAndReturn(run func(ctx context.Context, response api.SubscriptionCheckResponse) error) *MockCache_SetSubscriptionCheck_Call {
	_c.Call.Return(run)
	return _c
}
