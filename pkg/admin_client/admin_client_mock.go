// Code generated by mockery. DO NOT EDIT.

package admin_client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAdminClient is an autogenerated mock type for the AdminClient type
type MockAdminClient struct {
	mock.Mock
}

// ListFeatures provides a mock function with given fields: ctx
func (_m *MockAdminClient) ListFeatures(ctx context.Context) (FeaturesResponse, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatures")
	}

	var r0 FeaturesResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (FeaturesResponse, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) FeaturesResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(FeaturesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockAdminClient creates a new instance of MockAdminClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdminClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdminClient {
	mock := &MockAdminClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
