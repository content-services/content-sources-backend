// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package feature_service_client

import (
	"context"

	"github.com/content-services/content-sources-backend/pkg/api"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFeatureServiceClient creates a new instance of MockFeatureServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureServiceClient {
	mock := &MockFeatureServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeatureServiceClient is an autogenerated mock type for the FeatureServiceClient type
type MockFeatureServiceClient struct {
	mock.Mock
}

type MockFeatureServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureServiceClient) EXPECT() *MockFeatureServiceClient_Expecter {
	return &MockFeatureServiceClient_Expecter{mock: &_m.Mock}
}

// GetEntitledFeatures provides a mock function for the type MockFeatureServiceClient
func (_mock *MockFeatureServiceClient) GetEntitledFeatures(ctx context.Context, orgID string) ([]string, error) {
	ret := _mock.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetEntitledFeatures")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, orgID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeatureServiceClient_GetEntitledFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntitledFeatures'
type MockFeatureServiceClient_GetEntitledFeatures_Call struct {
	*mock.Call
}

// GetEntitledFeatures is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *MockFeatureServiceClient_Expecter) GetEntitledFeatures(ctx interface{}, orgID interface{}) *MockFeatureServiceClient_GetEntitledFeatures_Call {
	return &MockFeatureServiceClient_GetEntitledFeatures_Call{Call: _e.mock.On("GetEntitledFeatures", ctx, orgID)}
}

func (_c *MockFeatureServiceClient_GetEntitledFeatures_Call) Run(run func(ctx context.Context, orgID string)) *MockFeatureServiceClient_GetEntitledFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureServiceClient_GetEntitledFeatures_Call) Return(features []string, err error) *MockFeatureServiceClient_GetEntitledFeatures_Call {
	_c.Call.Return(features, err)
	return _c
}

func (_c *MockFeatureServiceClient_GetEntitledFeatures_Call) RunAndReturn(run func(ctx context.Context, orgID string) ([]string, error)) *MockFeatureServiceClient_GetEntitledFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureStatusByOrgID provides a mock function for the type MockFeatureServiceClient
func (_mock *MockFeatureServiceClient) GetFeatureStatusByOrgID(ctx context.Context, orgID string) (api.FeatureStatus, int, error) {
	ret := _mock.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureStatusByOrgID")
	}

	var r0 api.FeatureStatus
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (api.FeatureStatus, int, error)); ok {
		return returnFunc(ctx, orgID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) api.FeatureStatus); ok {
		r0 = returnFunc(ctx, orgID)
	} else {
		r0 = ret.Get(0).(api.FeatureStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = returnFunc(ctx, orgID)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, orgID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeatureServiceClient_GetFeatureStatusByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureStatusByOrgID'
type MockFeatureServiceClient_GetFeatureStatusByOrgID_Call struct {
	*mock.Call
}

// GetFeatureStatusByOrgID is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *MockFeatureServiceClient_Expecter) GetFeatureStatusByOrgID(ctx interface{}, orgID interface{}) *MockFeatureServiceClient_GetFeatureStatusByOrgID_Call {
	return &MockFeatureServiceClient_GetFeatureStatusByOrgID_Call{Call: _e.mock.On("GetFeatureStatusByOrgID", ctx, orgID)}
}

func (_c *MockFeatureServiceClient_GetFeatureStatusByOrgID_Call) Run(run func(ctx context.Context, orgID string)) *MockFeatureServiceClient_GetFeatureStatusByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFeatureServiceClient_GetFeatureStatusByOrgID_Call) Return(featureStatus api.FeatureStatus, statusCode int, err error) *MockFeatureServiceClient_GetFeatureStatusByOrgID_Call {
	_c.Call.Return(featureStatus, statusCode, err)
	return _c
}

func (_c *MockFeatureServiceClient_GetFeatureStatusByOrgID_Call) RunAndReturn(run func(ctx context.Context, orgID string) (api.FeatureStatus, int, error)) *MockFeatureServiceClient_GetFeatureStatusByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeatures provides a mock function for the type MockFeatureServiceClient
func (_mock *MockFeatureServiceClient) ListFeatures(ctx context.Context) (FeaturesResponse, int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatures")
	}

	var r0 FeaturesResponse
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (FeaturesResponse, int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) FeaturesResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(FeaturesResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFeatureServiceClient_ListFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatures'
type MockFeatureServiceClient_ListFeatures_Call struct {
	*mock.Call
}

// ListFeatures is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeatureServiceClient_Expecter) ListFeatures(ctx interface{}) *MockFeatureServiceClient_ListFeatures_Call {
	return &MockFeatureServiceClient_ListFeatures_Call{Call: _e.mock.On("ListFeatures", ctx)}
}

func (_c *MockFeatureServiceClient_ListFeatures_Call) Run(run func(ctx context.Context)) *MockFeatureServiceClient_ListFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeatureServiceClient_ListFeatures_Call) Return(features FeaturesResponse, statusCode int, err error) *MockFeatureServiceClient_ListFeatures_Call {
	_c.Call.Return(features, statusCode, err)
	return _c
}

func (_c *MockFeatureServiceClient_ListFeatures_Call) RunAndReturn(run func(ctx context.Context) (FeaturesResponse, int, error)) *MockFeatureServiceClient_ListFeatures_Call {
	_c.Call.Return(run)
	return _c
}
