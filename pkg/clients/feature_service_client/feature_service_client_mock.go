// Code generated by mockery. DO NOT EDIT.

package feature_service_client

import (
	context "context"

	api "github.com/content-services/content-sources-backend/pkg/api"

	mock "github.com/stretchr/testify/mock"
)

// MockFeatureServiceClient is an autogenerated mock type for the FeatureServiceClient type
type MockFeatureServiceClient struct {
	mock.Mock
}

// GetEntitledFeatures provides a mock function with given fields: ctx, orgID
func (_m *MockFeatureServiceClient) GetEntitledFeatures(ctx context.Context, orgID string) ([]string, error) {
	ret := _m.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetEntitledFeatures")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeatureStatusByOrgID provides a mock function with given fields: ctx, orgID
func (_m *MockFeatureServiceClient) GetFeatureStatusByOrgID(ctx context.Context, orgID string) (api.FeatureStatus, int, error) {
	ret := _m.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureStatusByOrgID")
	}

	var r0 api.FeatureStatus
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (api.FeatureStatus, int, error)); ok {
		return rf(ctx, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) api.FeatureStatus); ok {
		r0 = rf(ctx, orgID)
	} else {
		r0 = ret.Get(0).(api.FeatureStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, orgID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListFeatures provides a mock function with given fields: ctx
func (_m *MockFeatureServiceClient) ListFeatures(ctx context.Context) (FeaturesResponse, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatures")
	}

	var r0 FeaturesResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (FeaturesResponse, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) FeaturesResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(FeaturesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockFeatureServiceClient creates a new instance of MockFeatureServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureServiceClient {
	mock := &MockFeatureServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
