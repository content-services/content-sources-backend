// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package roadmap_client

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRoadmapClient creates a new instance of MockRoadmapClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoadmapClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoadmapClient {
	mock := &MockRoadmapClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoadmapClient is an autogenerated mock type for the RoadmapClient type
type MockRoadmapClient struct {
	mock.Mock
}

type MockRoadmapClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoadmapClient) EXPECT() *MockRoadmapClient_Expecter {
	return &MockRoadmapClient_Expecter{mock: &_m.Mock}
}

// GetAppstreams provides a mock function for the type MockRoadmapClient
func (_mock *MockRoadmapClient) GetAppstreams(ctx context.Context) (AppstreamsResponse, int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAppstreams")
	}

	var r0 AppstreamsResponse
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (AppstreamsResponse, int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) AppstreamsResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(AppstreamsResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRoadmapClient_GetAppstreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppstreams'
type MockRoadmapClient_GetAppstreams_Call struct {
	*mock.Call
}

// GetAppstreams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRoadmapClient_Expecter) GetAppstreams(ctx interface{}) *MockRoadmapClient_GetAppstreams_Call {
	return &MockRoadmapClient_GetAppstreams_Call{Call: _e.mock.On("GetAppstreams", ctx)}
}

func (_c *MockRoadmapClient_GetAppstreams_Call) Run(run func(ctx context.Context)) *MockRoadmapClient_GetAppstreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoadmapClient_GetAppstreams_Call) Return(appstreamsResponse AppstreamsResponse, n int, err error) *MockRoadmapClient_GetAppstreams_Call {
	_c.Call.Return(appstreamsResponse, n, err)
	return _c
}

func (_c *MockRoadmapClient_GetAppstreams_Call) RunAndReturn(run func(ctx context.Context) (AppstreamsResponse, int, error)) *MockRoadmapClient_GetAppstreams_Call {
	_c.Call.Return(run)
	return _c
}

// GetRhelLifecycle provides a mock function for the type MockRoadmapClient
func (_mock *MockRoadmapClient) GetRhelLifecycle(ctx context.Context) (LifecycleResponse, int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRhelLifecycle")
	}

	var r0 LifecycleResponse
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (LifecycleResponse, int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) LifecycleResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(LifecycleResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRoadmapClient_GetRhelLifecycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRhelLifecycle'
type MockRoadmapClient_GetRhelLifecycle_Call struct {
	*mock.Call
}

// GetRhelLifecycle is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRoadmapClient_Expecter) GetRhelLifecycle(ctx interface{}) *MockRoadmapClient_GetRhelLifecycle_Call {
	return &MockRoadmapClient_GetRhelLifecycle_Call{Call: _e.mock.On("GetRhelLifecycle", ctx)}
}

func (_c *MockRoadmapClient_GetRhelLifecycle_Call) Run(run func(ctx context.Context)) *MockRoadmapClient_GetRhelLifecycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoadmapClient_GetRhelLifecycle_Call) Return(lifecycleResponse LifecycleResponse, n int, err error) *MockRoadmapClient_GetRhelLifecycle_Call {
	_c.Call.Return(lifecycleResponse, n, err)
	return _c
}

func (_c *MockRoadmapClient_GetRhelLifecycle_Call) RunAndReturn(run func(ctx context.Context) (LifecycleResponse, int, error)) *MockRoadmapClient_GetRhelLifecycle_Call {
	_c.Call.Return(run)
	return _c
}

// GetRhelLifecycleForLatestMajorVersions provides a mock function for the type MockRoadmapClient
func (_mock *MockRoadmapClient) GetRhelLifecycleForLatestMajorVersions(ctx context.Context) (map[int]LifecycleEntity, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRhelLifecycleForLatestMajorVersions")
	}

	var r0 map[int]LifecycleEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[int]LifecycleEntity, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[int]LifecycleEntity); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]LifecycleEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRhelLifecycleForLatestMajorVersions'
type MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call struct {
	*mock.Call
}

// GetRhelLifecycleForLatestMajorVersions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRoadmapClient_Expecter) GetRhelLifecycleForLatestMajorVersions(ctx interface{}) *MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call {
	return &MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call{Call: _e.mock.On("GetRhelLifecycleForLatestMajorVersions", ctx)}
}

func (_c *MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call) Run(run func(ctx context.Context)) *MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call) Return(intToLifecycleEntity map[int]LifecycleEntity, err error) *MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call {
	_c.Call.Return(intToLifecycleEntity, err)
	return _c
}

func (_c *MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call) RunAndReturn(run func(ctx context.Context) (map[int]LifecycleEntity, error)) *MockRoadmapClient_GetRhelLifecycleForLatestMajorVersions_Call {
	_c.Call.Return(run)
	return _c
}
