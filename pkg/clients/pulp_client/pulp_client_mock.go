// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pulp_client

import (
	"context"
	"os"

	"github.com/content-services/zest/release/v2025"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPulpGlobalClient creates a new instance of MockPulpGlobalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPulpGlobalClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPulpGlobalClient {
	mock := &MockPulpGlobalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPulpGlobalClient is an autogenerated mock type for the PulpGlobalClient type
type MockPulpGlobalClient struct {
	mock.Mock
}

type MockPulpGlobalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPulpGlobalClient) EXPECT() *MockPulpGlobalClient_Expecter {
	return &MockPulpGlobalClient_Expecter{mock: &_m.Mock}
}

// CancelTask provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) CancelTask(ctx context.Context, taskHref string) (zest.TaskResponse, error) {
	ret := _mock.Called(ctx, taskHref)

	if len(ret) == 0 {
		panic("no return value specified for CancelTask")
	}

	var r0 zest.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (zest.TaskResponse, error)); ok {
		return returnFunc(ctx, taskHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) zest.TaskResponse); ok {
		r0 = returnFunc(ctx, taskHref)
	} else {
		r0 = ret.Get(0).(zest.TaskResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpGlobalClient_CancelTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTask'
type MockPulpGlobalClient_CancelTask_Call struct {
	*mock.Call
}

// CancelTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskHref string
func (_e *MockPulpGlobalClient_Expecter) CancelTask(ctx interface{}, taskHref interface{}) *MockPulpGlobalClient_CancelTask_Call {
	return &MockPulpGlobalClient_CancelTask_Call{Call: _e.mock.On("CancelTask", ctx, taskHref)}
}

func (_c *MockPulpGlobalClient_CancelTask_Call) Run(run func(ctx context.Context, taskHref string)) *MockPulpGlobalClient_CancelTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_CancelTask_Call) Return(taskResponse zest.TaskResponse, err error) *MockPulpGlobalClient_CancelTask_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockPulpGlobalClient_CancelTask_Call) RunAndReturn(run func(ctx context.Context, taskHref string) (zest.TaskResponse, error)) *MockPulpGlobalClient_CancelTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetContentPath provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) GetContentPath(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetContentPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpGlobalClient_GetContentPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContentPath'
type MockPulpGlobalClient_GetContentPath_Call struct {
	*mock.Call
}

// GetContentPath is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPulpGlobalClient_Expecter) GetContentPath(ctx interface{}) *MockPulpGlobalClient_GetContentPath_Call {
	return &MockPulpGlobalClient_GetContentPath_Call{Call: _e.mock.On("GetContentPath", ctx)}
}

func (_c *MockPulpGlobalClient_GetContentPath_Call) Run(run func(ctx context.Context)) *MockPulpGlobalClient_GetContentPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_GetContentPath_Call) Return(s string, err error) *MockPulpGlobalClient_GetContentPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpGlobalClient_GetContentPath_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockPulpGlobalClient_GetContentPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) GetTask(ctx context.Context, taskHref string) (zest.TaskResponse, error) {
	ret := _mock.Called(ctx, taskHref)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 zest.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (zest.TaskResponse, error)); ok {
		return returnFunc(ctx, taskHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) zest.TaskResponse); ok {
		r0 = returnFunc(ctx, taskHref)
	} else {
		r0 = ret.Get(0).(zest.TaskResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpGlobalClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockPulpGlobalClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskHref string
func (_e *MockPulpGlobalClient_Expecter) GetTask(ctx interface{}, taskHref interface{}) *MockPulpGlobalClient_GetTask_Call {
	return &MockPulpGlobalClient_GetTask_Call{Call: _e.mock.On("GetTask", ctx, taskHref)}
}

func (_c *MockPulpGlobalClient_GetTask_Call) Run(run func(ctx context.Context, taskHref string)) *MockPulpGlobalClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_GetTask_Call) Return(taskResponse zest.TaskResponse, err error) *MockPulpGlobalClient_GetTask_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockPulpGlobalClient_GetTask_Call) RunAndReturn(run func(ctx context.Context, taskHref string) (zest.TaskResponse, error)) *MockPulpGlobalClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// Livez provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) Livez(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Livez")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPulpGlobalClient_Livez_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Livez'
type MockPulpGlobalClient_Livez_Call struct {
	*mock.Call
}

// Livez is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPulpGlobalClient_Expecter) Livez(ctx interface{}) *MockPulpGlobalClient_Livez_Call {
	return &MockPulpGlobalClient_Livez_Call{Call: _e.mock.On("Livez", ctx)}
}

func (_c *MockPulpGlobalClient_Livez_Call) Run(run func(ctx context.Context)) *MockPulpGlobalClient_Livez_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_Livez_Call) Return(err error) *MockPulpGlobalClient_Livez_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPulpGlobalClient_Livez_Call) RunAndReturn(run func(ctx context.Context) error) *MockPulpGlobalClient_Livez_Call {
	_c.Call.Return(run)
	return _c
}

// LookupDomain provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) LookupDomain(ctx context.Context, name string) (string, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for LookupDomain")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpGlobalClient_LookupDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupDomain'
type MockPulpGlobalClient_LookupDomain_Call struct {
	*mock.Call
}

// LookupDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpGlobalClient_Expecter) LookupDomain(ctx interface{}, name interface{}) *MockPulpGlobalClient_LookupDomain_Call {
	return &MockPulpGlobalClient_LookupDomain_Call{Call: _e.mock.On("LookupDomain", ctx, name)}
}

func (_c *MockPulpGlobalClient_LookupDomain_Call) Run(run func(ctx context.Context, name string)) *MockPulpGlobalClient_LookupDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_LookupDomain_Call) Return(s string, err error) *MockPulpGlobalClient_LookupDomain_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpGlobalClient_LookupDomain_Call) RunAndReturn(run func(ctx context.Context, name string) (string, error)) *MockPulpGlobalClient_LookupDomain_Call {
	_c.Call.Return(run)
	return _c
}

// LookupOrCreateDomain provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) LookupOrCreateDomain(ctx context.Context, name string) (string, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for LookupOrCreateDomain")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpGlobalClient_LookupOrCreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupOrCreateDomain'
type MockPulpGlobalClient_LookupOrCreateDomain_Call struct {
	*mock.Call
}

// LookupOrCreateDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpGlobalClient_Expecter) LookupOrCreateDomain(ctx interface{}, name interface{}) *MockPulpGlobalClient_LookupOrCreateDomain_Call {
	return &MockPulpGlobalClient_LookupOrCreateDomain_Call{Call: _e.mock.On("LookupOrCreateDomain", ctx, name)}
}

func (_c *MockPulpGlobalClient_LookupOrCreateDomain_Call) Run(run func(ctx context.Context, name string)) *MockPulpGlobalClient_LookupOrCreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_LookupOrCreateDomain_Call) Return(s string, err error) *MockPulpGlobalClient_LookupOrCreateDomain_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpGlobalClient_LookupOrCreateDomain_Call) RunAndReturn(run func(ctx context.Context, name string) (string, error)) *MockPulpGlobalClient_LookupOrCreateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// PollTask provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) PollTask(ctx context.Context, taskHref string) (*zest.TaskResponse, error) {
	ret := _mock.Called(ctx, taskHref)

	if len(ret) == 0 {
		panic("no return value specified for PollTask")
	}

	var r0 *zest.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.TaskResponse, error)); ok {
		return returnFunc(ctx, taskHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.TaskResponse); ok {
		r0 = returnFunc(ctx, taskHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.TaskResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpGlobalClient_PollTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollTask'
type MockPulpGlobalClient_PollTask_Call struct {
	*mock.Call
}

// PollTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskHref string
func (_e *MockPulpGlobalClient_Expecter) PollTask(ctx interface{}, taskHref interface{}) *MockPulpGlobalClient_PollTask_Call {
	return &MockPulpGlobalClient_PollTask_Call{Call: _e.mock.On("PollTask", ctx, taskHref)}
}

func (_c *MockPulpGlobalClient_PollTask_Call) Run(run func(ctx context.Context, taskHref string)) *MockPulpGlobalClient_PollTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_PollTask_Call) Return(taskResponse *zest.TaskResponse, err error) *MockPulpGlobalClient_PollTask_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockPulpGlobalClient_PollTask_Call) RunAndReturn(run func(ctx context.Context, taskHref string) (*zest.TaskResponse, error)) *MockPulpGlobalClient_PollTask_Call {
	_c.Call.Return(run)
	return _c
}

// SetDomainLabel provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) SetDomainLabel(ctx context.Context, pulpHref string, key string, value string) error {
	ret := _mock.Called(ctx, pulpHref, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetDomainLabel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, pulpHref, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPulpGlobalClient_SetDomainLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDomainLabel'
type MockPulpGlobalClient_SetDomainLabel_Call struct {
	*mock.Call
}

// SetDomainLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - pulpHref string
//   - key string
//   - value string
func (_e *MockPulpGlobalClient_Expecter) SetDomainLabel(ctx interface{}, pulpHref interface{}, key interface{}, value interface{}) *MockPulpGlobalClient_SetDomainLabel_Call {
	return &MockPulpGlobalClient_SetDomainLabel_Call{Call: _e.mock.On("SetDomainLabel", ctx, pulpHref, key, value)}
}

func (_c *MockPulpGlobalClient_SetDomainLabel_Call) Run(run func(ctx context.Context, pulpHref string, key string, value string)) *MockPulpGlobalClient_SetDomainLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_SetDomainLabel_Call) Return(err error) *MockPulpGlobalClient_SetDomainLabel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPulpGlobalClient_SetDomainLabel_Call) RunAndReturn(run func(ctx context.Context, pulpHref string, key string, value string) error) *MockPulpGlobalClient_SetDomainLabel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDomainIfNeeded provides a mock function for the type MockPulpGlobalClient
func (_mock *MockPulpGlobalClient) UpdateDomainIfNeeded(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainIfNeeded")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPulpGlobalClient_UpdateDomainIfNeeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDomainIfNeeded'
type MockPulpGlobalClient_UpdateDomainIfNeeded_Call struct {
	*mock.Call
}

// UpdateDomainIfNeeded is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpGlobalClient_Expecter) UpdateDomainIfNeeded(ctx interface{}, name interface{}) *MockPulpGlobalClient_UpdateDomainIfNeeded_Call {
	return &MockPulpGlobalClient_UpdateDomainIfNeeded_Call{Call: _e.mock.On("UpdateDomainIfNeeded", ctx, name)}
}

func (_c *MockPulpGlobalClient_UpdateDomainIfNeeded_Call) Run(run func(ctx context.Context, name string)) *MockPulpGlobalClient_UpdateDomainIfNeeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpGlobalClient_UpdateDomainIfNeeded_Call) Return(err error) *MockPulpGlobalClient_UpdateDomainIfNeeded_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPulpGlobalClient_UpdateDomainIfNeeded_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockPulpGlobalClient_UpdateDomainIfNeeded_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPulpClient creates a new instance of MockPulpClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPulpClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPulpClient {
	mock := &MockPulpClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPulpClient is an autogenerated mock type for the PulpClient type
type MockPulpClient struct {
	mock.Mock
}

type MockPulpClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPulpClient) EXPECT() *MockPulpClient_Expecter {
	return &MockPulpClient_Expecter{mock: &_m.Mock}
}

// CancelTask provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CancelTask(ctx context.Context, taskHref string) (zest.TaskResponse, error) {
	ret := _mock.Called(ctx, taskHref)

	if len(ret) == 0 {
		panic("no return value specified for CancelTask")
	}

	var r0 zest.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (zest.TaskResponse, error)); ok {
		return returnFunc(ctx, taskHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) zest.TaskResponse); ok {
		r0 = returnFunc(ctx, taskHref)
	} else {
		r0 = ret.Get(0).(zest.TaskResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CancelTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTask'
type MockPulpClient_CancelTask_Call struct {
	*mock.Call
}

// CancelTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskHref string
func (_e *MockPulpClient_Expecter) CancelTask(ctx interface{}, taskHref interface{}) *MockPulpClient_CancelTask_Call {
	return &MockPulpClient_CancelTask_Call{Call: _e.mock.On("CancelTask", ctx, taskHref)}
}

func (_c *MockPulpClient_CancelTask_Call) Run(run func(ctx context.Context, taskHref string)) *MockPulpClient_CancelTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_CancelTask_Call) Return(taskResponse zest.TaskResponse, err error) *MockPulpClient_CancelTask_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockPulpClient_CancelTask_Call) RunAndReturn(run func(ctx context.Context, taskHref string) (zest.TaskResponse, error)) *MockPulpClient_CancelTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateFeatureGuard provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateOrUpdateFeatureGuard(ctx context.Context, featureName string) (string, error) {
	ret := _mock.Called(ctx, featureName)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateFeatureGuard")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, featureName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, featureName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, featureName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreateOrUpdateFeatureGuard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateFeatureGuard'
type MockPulpClient_CreateOrUpdateFeatureGuard_Call struct {
	*mock.Call
}

// CreateOrUpdateFeatureGuard is a helper method to define mock.On call
//   - ctx context.Context
//   - featureName string
func (_e *MockPulpClient_Expecter) CreateOrUpdateFeatureGuard(ctx interface{}, featureName interface{}) *MockPulpClient_CreateOrUpdateFeatureGuard_Call {
	return &MockPulpClient_CreateOrUpdateFeatureGuard_Call{Call: _e.mock.On("CreateOrUpdateFeatureGuard", ctx, featureName)}
}

func (_c *MockPulpClient_CreateOrUpdateFeatureGuard_Call) Run(run func(ctx context.Context, featureName string)) *MockPulpClient_CreateOrUpdateFeatureGuard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateOrUpdateFeatureGuard_Call) Return(s string, err error) *MockPulpClient_CreateOrUpdateFeatureGuard_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_CreateOrUpdateFeatureGuard_Call) RunAndReturn(run func(ctx context.Context, featureName string) (string, error)) *MockPulpClient_CreateOrUpdateFeatureGuard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateGuardsForOrg provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateOrUpdateGuardsForOrg(ctx context.Context, orgId string) (string, error) {
	ret := _mock.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateGuardsForOrg")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, orgId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, orgId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orgId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreateOrUpdateGuardsForOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateGuardsForOrg'
type MockPulpClient_CreateOrUpdateGuardsForOrg_Call struct {
	*mock.Call
}

// CreateOrUpdateGuardsForOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *MockPulpClient_Expecter) CreateOrUpdateGuardsForOrg(ctx interface{}, orgId interface{}) *MockPulpClient_CreateOrUpdateGuardsForOrg_Call {
	return &MockPulpClient_CreateOrUpdateGuardsForOrg_Call{Call: _e.mock.On("CreateOrUpdateGuardsForOrg", ctx, orgId)}
}

func (_c *MockPulpClient_CreateOrUpdateGuardsForOrg_Call) Run(run func(ctx context.Context, orgId string)) *MockPulpClient_CreateOrUpdateGuardsForOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateOrUpdateGuardsForOrg_Call) Return(s string, err error) *MockPulpClient_CreateOrUpdateGuardsForOrg_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_CreateOrUpdateGuardsForOrg_Call) RunAndReturn(run func(ctx context.Context, orgId string) (string, error)) *MockPulpClient_CreateOrUpdateGuardsForOrg_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateGuardsForRhelRepo provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateOrUpdateGuardsForRhelRepo(ctx context.Context, featureName string) (string, error) {
	ret := _mock.Called(ctx, featureName)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateGuardsForRhelRepo")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, featureName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, featureName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, featureName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateGuardsForRhelRepo'
type MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call struct {
	*mock.Call
}

// CreateOrUpdateGuardsForRhelRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - featureName string
func (_e *MockPulpClient_Expecter) CreateOrUpdateGuardsForRhelRepo(ctx interface{}, featureName interface{}) *MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call {
	return &MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call{Call: _e.mock.On("CreateOrUpdateGuardsForRhelRepo", ctx, featureName)}
}

func (_c *MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call) Run(run func(ctx context.Context, featureName string)) *MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call) Return(s string, err error) *MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call) RunAndReturn(run func(ctx context.Context, featureName string) (string, error)) *MockPulpClient_CreateOrUpdateGuardsForRhelRepo_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePackage provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreatePackage(ctx context.Context, artifactHref *string, uploadHref *string) (string, error) {
	ret := _mock.Called(ctx, artifactHref, uploadHref)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackage")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *string) (string, error)); ok {
		return returnFunc(ctx, artifactHref, uploadHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *string) string); ok {
		r0 = returnFunc(ctx, artifactHref, uploadHref)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string, *string) error); ok {
		r1 = returnFunc(ctx, artifactHref, uploadHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreatePackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePackage'
type MockPulpClient_CreatePackage_Call struct {
	*mock.Call
}

// CreatePackage is a helper method to define mock.On call
//   - ctx context.Context
//   - artifactHref *string
//   - uploadHref *string
func (_e *MockPulpClient_Expecter) CreatePackage(ctx interface{}, artifactHref interface{}, uploadHref interface{}) *MockPulpClient_CreatePackage_Call {
	return &MockPulpClient_CreatePackage_Call{Call: _e.mock.On("CreatePackage", ctx, artifactHref, uploadHref)}
}

func (_c *MockPulpClient_CreatePackage_Call) Run(run func(ctx context.Context, artifactHref *string, uploadHref *string)) *MockPulpClient_CreatePackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreatePackage_Call) Return(s string, err error) *MockPulpClient_CreatePackage_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_CreatePackage_Call) RunAndReturn(run func(ctx context.Context, artifactHref *string, uploadHref *string) (string, error)) *MockPulpClient_CreatePackage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRpmDistribution provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateRpmDistribution(ctx context.Context, publicationHref string, name string, basePath string, contentGuardHref *string) (*string, error) {
	ret := _mock.Called(ctx, publicationHref, name, basePath, contentGuardHref)

	if len(ret) == 0 {
		panic("no return value specified for CreateRpmDistribution")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, *string) (*string, error)); ok {
		return returnFunc(ctx, publicationHref, name, basePath, contentGuardHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, *string) *string); ok {
		r0 = returnFunc(ctx, publicationHref, name, basePath, contentGuardHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, *string) error); ok {
		r1 = returnFunc(ctx, publicationHref, name, basePath, contentGuardHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreateRpmDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRpmDistribution'
type MockPulpClient_CreateRpmDistribution_Call struct {
	*mock.Call
}

// CreateRpmDistribution is a helper method to define mock.On call
//   - ctx context.Context
//   - publicationHref string
//   - name string
//   - basePath string
//   - contentGuardHref *string
func (_e *MockPulpClient_Expecter) CreateRpmDistribution(ctx interface{}, publicationHref interface{}, name interface{}, basePath interface{}, contentGuardHref interface{}) *MockPulpClient_CreateRpmDistribution_Call {
	return &MockPulpClient_CreateRpmDistribution_Call{Call: _e.mock.On("CreateRpmDistribution", ctx, publicationHref, name, basePath, contentGuardHref)}
}

func (_c *MockPulpClient_CreateRpmDistribution_Call) Run(run func(ctx context.Context, publicationHref string, name string, basePath string, contentGuardHref *string)) *MockPulpClient_CreateRpmDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateRpmDistribution_Call) Return(s *string, err error) *MockPulpClient_CreateRpmDistribution_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_CreateRpmDistribution_Call) RunAndReturn(run func(ctx context.Context, publicationHref string, name string, basePath string, contentGuardHref *string) (*string, error)) *MockPulpClient_CreateRpmDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRpmPublication provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateRpmPublication(ctx context.Context, versionHref string) (*string, error) {
	ret := _mock.Called(ctx, versionHref)

	if len(ret) == 0 {
		panic("no return value specified for CreateRpmPublication")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return returnFunc(ctx, versionHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = returnFunc(ctx, versionHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, versionHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreateRpmPublication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRpmPublication'
type MockPulpClient_CreateRpmPublication_Call struct {
	*mock.Call
}

// CreateRpmPublication is a helper method to define mock.On call
//   - ctx context.Context
//   - versionHref string
func (_e *MockPulpClient_Expecter) CreateRpmPublication(ctx interface{}, versionHref interface{}) *MockPulpClient_CreateRpmPublication_Call {
	return &MockPulpClient_CreateRpmPublication_Call{Call: _e.mock.On("CreateRpmPublication", ctx, versionHref)}
}

func (_c *MockPulpClient_CreateRpmPublication_Call) Run(run func(ctx context.Context, versionHref string)) *MockPulpClient_CreateRpmPublication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateRpmPublication_Call) Return(s *string, err error) *MockPulpClient_CreateRpmPublication_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_CreateRpmPublication_Call) RunAndReturn(run func(ctx context.Context, versionHref string) (*string, error)) *MockPulpClient_CreateRpmPublication_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRpmRemote provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateRpmRemote(ctx context.Context, name string, url string, clientCert *string, clientKey *string, caCert *string) (*zest.RpmRpmRemoteResponse, error) {
	ret := _mock.Called(ctx, name, url, clientCert, clientKey, caCert)

	if len(ret) == 0 {
		panic("no return value specified for CreateRpmRemote")
	}

	var r0 *zest.RpmRpmRemoteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *string, *string, *string) (*zest.RpmRpmRemoteResponse, error)); ok {
		return returnFunc(ctx, name, url, clientCert, clientKey, caCert)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *string, *string, *string) *zest.RpmRpmRemoteResponse); ok {
		r0 = returnFunc(ctx, name, url, clientCert, clientKey, caCert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RpmRpmRemoteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *string, *string, *string) error); ok {
		r1 = returnFunc(ctx, name, url, clientCert, clientKey, caCert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreateRpmRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRpmRemote'
type MockPulpClient_CreateRpmRemote_Call struct {
	*mock.Call
}

// CreateRpmRemote is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - url string
//   - clientCert *string
//   - clientKey *string
//   - caCert *string
func (_e *MockPulpClient_Expecter) CreateRpmRemote(ctx interface{}, name interface{}, url interface{}, clientCert interface{}, clientKey interface{}, caCert interface{}) *MockPulpClient_CreateRpmRemote_Call {
	return &MockPulpClient_CreateRpmRemote_Call{Call: _e.mock.On("CreateRpmRemote", ctx, name, url, clientCert, clientKey, caCert)}
}

func (_c *MockPulpClient_CreateRpmRemote_Call) Run(run func(ctx context.Context, name string, url string, clientCert *string, clientKey *string, caCert *string)) *MockPulpClient_CreateRpmRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateRpmRemote_Call) Return(rpmRpmRemoteResponse *zest.RpmRpmRemoteResponse, err error) *MockPulpClient_CreateRpmRemote_Call {
	_c.Call.Return(rpmRpmRemoteResponse, err)
	return _c
}

func (_c *MockPulpClient_CreateRpmRemote_Call) RunAndReturn(run func(ctx context.Context, name string, url string, clientCert *string, clientKey *string, caCert *string) (*zest.RpmRpmRemoteResponse, error)) *MockPulpClient_CreateRpmRemote_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRpmRepository provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateRpmRepository(ctx context.Context, uuid string, rpmRemotePulpRef *string) (*zest.RpmRpmRepositoryResponse, error) {
	ret := _mock.Called(ctx, uuid, rpmRemotePulpRef)

	if len(ret) == 0 {
		panic("no return value specified for CreateRpmRepository")
	}

	var r0 *zest.RpmRpmRepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) (*zest.RpmRpmRepositoryResponse, error)); ok {
		return returnFunc(ctx, uuid, rpmRemotePulpRef)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) *zest.RpmRpmRepositoryResponse); ok {
		r0 = returnFunc(ctx, uuid, rpmRemotePulpRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RpmRpmRepositoryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string) error); ok {
		r1 = returnFunc(ctx, uuid, rpmRemotePulpRef)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_CreateRpmRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRpmRepository'
type MockPulpClient_CreateRpmRepository_Call struct {
	*mock.Call
}

// CreateRpmRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - rpmRemotePulpRef *string
func (_e *MockPulpClient_Expecter) CreateRpmRepository(ctx interface{}, uuid interface{}, rpmRemotePulpRef interface{}) *MockPulpClient_CreateRpmRepository_Call {
	return &MockPulpClient_CreateRpmRepository_Call{Call: _e.mock.On("CreateRpmRepository", ctx, uuid, rpmRemotePulpRef)}
}

func (_c *MockPulpClient_CreateRpmRepository_Call) Run(run func(ctx context.Context, uuid string, rpmRemotePulpRef *string)) *MockPulpClient_CreateRpmRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateRpmRepository_Call) Return(rpmRpmRepositoryResponse *zest.RpmRpmRepositoryResponse, err error) *MockPulpClient_CreateRpmRepository_Call {
	_c.Call.Return(rpmRpmRepositoryResponse, err)
	return _c
}

func (_c *MockPulpClient_CreateRpmRepository_Call) RunAndReturn(run func(ctx context.Context, uuid string, rpmRemotePulpRef *string) (*zest.RpmRpmRepositoryResponse, error)) *MockPulpClient_CreateRpmRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUpload provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) CreateUpload(ctx context.Context, size int64) (*zest.UploadResponse, int, error) {
	ret := _mock.Called(ctx, size)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpload")
	}

	var r0 *zest.UploadResponse
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*zest.UploadResponse, int, error)); ok {
		return returnFunc(ctx, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *zest.UploadResponse); ok {
		r0 = returnFunc(ctx, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.UploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) int); ok {
		r1 = returnFunc(ctx, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = returnFunc(ctx, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPulpClient_CreateUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUpload'
type MockPulpClient_CreateUpload_Call struct {
	*mock.Call
}

// CreateUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - size int64
func (_e *MockPulpClient_Expecter) CreateUpload(ctx interface{}, size interface{}) *MockPulpClient_CreateUpload_Call {
	return &MockPulpClient_CreateUpload_Call{Call: _e.mock.On("CreateUpload", ctx, size)}
}

func (_c *MockPulpClient_CreateUpload_Call) Run(run func(ctx context.Context, size int64)) *MockPulpClient_CreateUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_CreateUpload_Call) Return(uploadResponse *zest.UploadResponse, n int, err error) *MockPulpClient_CreateUpload_Call {
	_c.Call.Return(uploadResponse, n, err)
	return _c
}

func (_c *MockPulpClient_CreateUpload_Call) RunAndReturn(run func(ctx context.Context, size int64) (*zest.UploadResponse, int, error)) *MockPulpClient_CreateUpload_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRpmDistribution provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) DeleteRpmDistribution(ctx context.Context, rpmDistributionHref string) (*string, error) {
	ret := _mock.Called(ctx, rpmDistributionHref)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRpmDistribution")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return returnFunc(ctx, rpmDistributionHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = returnFunc(ctx, rpmDistributionHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, rpmDistributionHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_DeleteRpmDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRpmDistribution'
type MockPulpClient_DeleteRpmDistribution_Call struct {
	*mock.Call
}

// DeleteRpmDistribution is a helper method to define mock.On call
//   - ctx context.Context
//   - rpmDistributionHref string
func (_e *MockPulpClient_Expecter) DeleteRpmDistribution(ctx interface{}, rpmDistributionHref interface{}) *MockPulpClient_DeleteRpmDistribution_Call {
	return &MockPulpClient_DeleteRpmDistribution_Call{Call: _e.mock.On("DeleteRpmDistribution", ctx, rpmDistributionHref)}
}

func (_c *MockPulpClient_DeleteRpmDistribution_Call) Run(run func(ctx context.Context, rpmDistributionHref string)) *MockPulpClient_DeleteRpmDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_DeleteRpmDistribution_Call) Return(s *string, err error) *MockPulpClient_DeleteRpmDistribution_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_DeleteRpmDistribution_Call) RunAndReturn(run func(ctx context.Context, rpmDistributionHref string) (*string, error)) *MockPulpClient_DeleteRpmDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRpmRemote provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) DeleteRpmRemote(ctx context.Context, pulpHref string) (string, error) {
	ret := _mock.Called(ctx, pulpHref)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRpmRemote")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, pulpHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, pulpHref)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, pulpHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_DeleteRpmRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRpmRemote'
type MockPulpClient_DeleteRpmRemote_Call struct {
	*mock.Call
}

// DeleteRpmRemote is a helper method to define mock.On call
//   - ctx context.Context
//   - pulpHref string
func (_e *MockPulpClient_Expecter) DeleteRpmRemote(ctx interface{}, pulpHref interface{}) *MockPulpClient_DeleteRpmRemote_Call {
	return &MockPulpClient_DeleteRpmRemote_Call{Call: _e.mock.On("DeleteRpmRemote", ctx, pulpHref)}
}

func (_c *MockPulpClient_DeleteRpmRemote_Call) Run(run func(ctx context.Context, pulpHref string)) *MockPulpClient_DeleteRpmRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_DeleteRpmRemote_Call) Return(s string, err error) *MockPulpClient_DeleteRpmRemote_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_DeleteRpmRemote_Call) RunAndReturn(run func(ctx context.Context, pulpHref string) (string, error)) *MockPulpClient_DeleteRpmRemote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRpmRepository provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) DeleteRpmRepository(ctx context.Context, rpmRepositoryHref string) (string, error) {
	ret := _mock.Called(ctx, rpmRepositoryHref)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRpmRepository")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, rpmRepositoryHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, rpmRepositoryHref)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, rpmRepositoryHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_DeleteRpmRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRpmRepository'
type MockPulpClient_DeleteRpmRepository_Call struct {
	*mock.Call
}

// DeleteRpmRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - rpmRepositoryHref string
func (_e *MockPulpClient_Expecter) DeleteRpmRepository(ctx interface{}, rpmRepositoryHref interface{}) *MockPulpClient_DeleteRpmRepository_Call {
	return &MockPulpClient_DeleteRpmRepository_Call{Call: _e.mock.On("DeleteRpmRepository", ctx, rpmRepositoryHref)}
}

func (_c *MockPulpClient_DeleteRpmRepository_Call) Run(run func(ctx context.Context, rpmRepositoryHref string)) *MockPulpClient_DeleteRpmRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_DeleteRpmRepository_Call) Return(s string, err error) *MockPulpClient_DeleteRpmRepository_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_DeleteRpmRepository_Call) RunAndReturn(run func(ctx context.Context, rpmRepositoryHref string) (string, error)) *MockPulpClient_DeleteRpmRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRpmRepositoryVersion provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) DeleteRpmRepositoryVersion(ctx context.Context, href string) (*string, error) {
	ret := _mock.Called(ctx, href)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRpmRepositoryVersion")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return returnFunc(ctx, href)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = returnFunc(ctx, href)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, href)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_DeleteRpmRepositoryVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRpmRepositoryVersion'
type MockPulpClient_DeleteRpmRepositoryVersion_Call struct {
	*mock.Call
}

// DeleteRpmRepositoryVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - href string
func (_e *MockPulpClient_Expecter) DeleteRpmRepositoryVersion(ctx interface{}, href interface{}) *MockPulpClient_DeleteRpmRepositoryVersion_Call {
	return &MockPulpClient_DeleteRpmRepositoryVersion_Call{Call: _e.mock.On("DeleteRpmRepositoryVersion", ctx, href)}
}

func (_c *MockPulpClient_DeleteRpmRepositoryVersion_Call) Run(run func(ctx context.Context, href string)) *MockPulpClient_DeleteRpmRepositoryVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_DeleteRpmRepositoryVersion_Call) Return(s *string, err error) *MockPulpClient_DeleteRpmRepositoryVersion_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_DeleteRpmRepositoryVersion_Call) RunAndReturn(run func(ctx context.Context, href string) (*string, error)) *MockPulpClient_DeleteRpmRepositoryVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUpload provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) DeleteUpload(ctx context.Context, uploadHref string) (int, error) {
	ret := _mock.Called(ctx, uploadHref)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUpload")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return returnFunc(ctx, uploadHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = returnFunc(ctx, uploadHref)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uploadHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_DeleteUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpload'
type MockPulpClient_DeleteUpload_Call struct {
	*mock.Call
}

// DeleteUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - uploadHref string
func (_e *MockPulpClient_Expecter) DeleteUpload(ctx interface{}, uploadHref interface{}) *MockPulpClient_DeleteUpload_Call {
	return &MockPulpClient_DeleteUpload_Call{Call: _e.mock.On("DeleteUpload", ctx, uploadHref)}
}

func (_c *MockPulpClient_DeleteUpload_Call) Run(run func(ctx context.Context, uploadHref string)) *MockPulpClient_DeleteUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_DeleteUpload_Call) Return(n int, err error) *MockPulpClient_DeleteUpload_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPulpClient_DeleteUpload_Call) RunAndReturn(run func(ctx context.Context, uploadHref string) (int, error)) *MockPulpClient_DeleteUpload_Call {
	_c.Call.Return(run)
	return _c
}

// FindDistributionByPath provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) FindDistributionByPath(ctx context.Context, path string) (*zest.RpmRpmDistributionResponse, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for FindDistributionByPath")
	}

	var r0 *zest.RpmRpmDistributionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.RpmRpmDistributionResponse, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.RpmRpmDistributionResponse); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RpmRpmDistributionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_FindDistributionByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDistributionByPath'
type MockPulpClient_FindDistributionByPath_Call struct {
	*mock.Call
}

// FindDistributionByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockPulpClient_Expecter) FindDistributionByPath(ctx interface{}, path interface{}) *MockPulpClient_FindDistributionByPath_Call {
	return &MockPulpClient_FindDistributionByPath_Call{Call: _e.mock.On("FindDistributionByPath", ctx, path)}
}

func (_c *MockPulpClient_FindDistributionByPath_Call) Run(run func(ctx context.Context, path string)) *MockPulpClient_FindDistributionByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_FindDistributionByPath_Call) Return(rpmRpmDistributionResponse *zest.RpmRpmDistributionResponse, err error) *MockPulpClient_FindDistributionByPath_Call {
	_c.Call.Return(rpmRpmDistributionResponse, err)
	return _c
}

func (_c *MockPulpClient_FindDistributionByPath_Call) RunAndReturn(run func(ctx context.Context, path string) (*zest.RpmRpmDistributionResponse, error)) *MockPulpClient_FindDistributionByPath_Call {
	_c.Call.Return(run)
	return _c
}

// FindRpmPublicationByVersion provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) FindRpmPublicationByVersion(ctx context.Context, versionHref string) (*zest.RpmRpmPublicationResponse, error) {
	ret := _mock.Called(ctx, versionHref)

	if len(ret) == 0 {
		panic("no return value specified for FindRpmPublicationByVersion")
	}

	var r0 *zest.RpmRpmPublicationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.RpmRpmPublicationResponse, error)); ok {
		return returnFunc(ctx, versionHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.RpmRpmPublicationResponse); ok {
		r0 = returnFunc(ctx, versionHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RpmRpmPublicationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, versionHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_FindRpmPublicationByVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRpmPublicationByVersion'
type MockPulpClient_FindRpmPublicationByVersion_Call struct {
	*mock.Call
}

// FindRpmPublicationByVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - versionHref string
func (_e *MockPulpClient_Expecter) FindRpmPublicationByVersion(ctx interface{}, versionHref interface{}) *MockPulpClient_FindRpmPublicationByVersion_Call {
	return &MockPulpClient_FindRpmPublicationByVersion_Call{Call: _e.mock.On("FindRpmPublicationByVersion", ctx, versionHref)}
}

func (_c *MockPulpClient_FindRpmPublicationByVersion_Call) Run(run func(ctx context.Context, versionHref string)) *MockPulpClient_FindRpmPublicationByVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_FindRpmPublicationByVersion_Call) Return(rpmRpmPublicationResponse *zest.RpmRpmPublicationResponse, err error) *MockPulpClient_FindRpmPublicationByVersion_Call {
	_c.Call.Return(rpmRpmPublicationResponse, err)
	return _c
}

func (_c *MockPulpClient_FindRpmPublicationByVersion_Call) RunAndReturn(run func(ctx context.Context, versionHref string) (*zest.RpmRpmPublicationResponse, error)) *MockPulpClient_FindRpmPublicationByVersion_Call {
	_c.Call.Return(run)
	return _c
}

// FinishUpload provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) FinishUpload(ctx context.Context, uploadHref string, sha256 string) (*zest.AsyncOperationResponse, int, error) {
	ret := _mock.Called(ctx, uploadHref, sha256)

	if len(ret) == 0 {
		panic("no return value specified for FinishUpload")
	}

	var r0 *zest.AsyncOperationResponse
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*zest.AsyncOperationResponse, int, error)); ok {
		return returnFunc(ctx, uploadHref, sha256)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *zest.AsyncOperationResponse); ok {
		r0 = returnFunc(ctx, uploadHref, sha256)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.AsyncOperationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = returnFunc(ctx, uploadHref, sha256)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(ctx, uploadHref, sha256)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPulpClient_FinishUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishUpload'
type MockPulpClient_FinishUpload_Call struct {
	*mock.Call
}

// FinishUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - uploadHref string
//   - sha256 string
func (_e *MockPulpClient_Expecter) FinishUpload(ctx interface{}, uploadHref interface{}, sha256 interface{}) *MockPulpClient_FinishUpload_Call {
	return &MockPulpClient_FinishUpload_Call{Call: _e.mock.On("FinishUpload", ctx, uploadHref, sha256)}
}

func (_c *MockPulpClient_FinishUpload_Call) Run(run func(ctx context.Context, uploadHref string, sha256 string)) *MockPulpClient_FinishUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPulpClient_FinishUpload_Call) Return(asyncOperationResponse *zest.AsyncOperationResponse, n int, err error) *MockPulpClient_FinishUpload_Call {
	_c.Call.Return(asyncOperationResponse, n, err)
	return _c
}

func (_c *MockPulpClient_FinishUpload_Call) RunAndReturn(run func(ctx context.Context, uploadHref string, sha256 string) (*zest.AsyncOperationResponse, int, error)) *MockPulpClient_FinishUpload_Call {
	_c.Call.Return(run)
	return _c
}

// GetContentPath provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) GetContentPath(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetContentPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_GetContentPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContentPath'
type MockPulpClient_GetContentPath_Call struct {
	*mock.Call
}

// GetContentPath is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPulpClient_Expecter) GetContentPath(ctx interface{}) *MockPulpClient_GetContentPath_Call {
	return &MockPulpClient_GetContentPath_Call{Call: _e.mock.On("GetContentPath", ctx)}
}

func (_c *MockPulpClient_GetContentPath_Call) Run(run func(ctx context.Context)) *MockPulpClient_GetContentPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpClient_GetContentPath_Call) Return(s string, err error) *MockPulpClient_GetContentPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_GetContentPath_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockPulpClient_GetContentPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetRpmRemoteByName provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) GetRpmRemoteByName(ctx context.Context, name string) (*zest.RpmRpmRemoteResponse, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRpmRemoteByName")
	}

	var r0 *zest.RpmRpmRemoteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.RpmRpmRemoteResponse, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.RpmRpmRemoteResponse); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RpmRpmRemoteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_GetRpmRemoteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRpmRemoteByName'
type MockPulpClient_GetRpmRemoteByName_Call struct {
	*mock.Call
}

// GetRpmRemoteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpClient_Expecter) GetRpmRemoteByName(ctx interface{}, name interface{}) *MockPulpClient_GetRpmRemoteByName_Call {
	return &MockPulpClient_GetRpmRemoteByName_Call{Call: _e.mock.On("GetRpmRemoteByName", ctx, name)}
}

func (_c *MockPulpClient_GetRpmRemoteByName_Call) Run(run func(ctx context.Context, name string)) *MockPulpClient_GetRpmRemoteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_GetRpmRemoteByName_Call) Return(rpmRpmRemoteResponse *zest.RpmRpmRemoteResponse, err error) *MockPulpClient_GetRpmRemoteByName_Call {
	_c.Call.Return(rpmRpmRemoteResponse, err)
	return _c
}

func (_c *MockPulpClient_GetRpmRemoteByName_Call) RunAndReturn(run func(ctx context.Context, name string) (*zest.RpmRpmRemoteResponse, error)) *MockPulpClient_GetRpmRemoteByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRpmRemoteList provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) GetRpmRemoteList(ctx context.Context) ([]zest.RpmRpmRemoteResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRpmRemoteList")
	}

	var r0 []zest.RpmRpmRemoteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]zest.RpmRpmRemoteResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []zest.RpmRpmRemoteResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zest.RpmRpmRemoteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_GetRpmRemoteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRpmRemoteList'
type MockPulpClient_GetRpmRemoteList_Call struct {
	*mock.Call
}

// GetRpmRemoteList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPulpClient_Expecter) GetRpmRemoteList(ctx interface{}) *MockPulpClient_GetRpmRemoteList_Call {
	return &MockPulpClient_GetRpmRemoteList_Call{Call: _e.mock.On("GetRpmRemoteList", ctx)}
}

func (_c *MockPulpClient_GetRpmRemoteList_Call) Run(run func(ctx context.Context)) *MockPulpClient_GetRpmRemoteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpClient_GetRpmRemoteList_Call) Return(rpmRpmRemoteResponses []zest.RpmRpmRemoteResponse, err error) *MockPulpClient_GetRpmRemoteList_Call {
	_c.Call.Return(rpmRpmRemoteResponses, err)
	return _c
}

func (_c *MockPulpClient_GetRpmRemoteList_Call) RunAndReturn(run func(ctx context.Context) ([]zest.RpmRpmRemoteResponse, error)) *MockPulpClient_GetRpmRemoteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetRpmRepositoryByName provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) GetRpmRepositoryByName(ctx context.Context, name string) (*zest.RpmRpmRepositoryResponse, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRpmRepositoryByName")
	}

	var r0 *zest.RpmRpmRepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.RpmRpmRepositoryResponse, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.RpmRpmRepositoryResponse); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RpmRpmRepositoryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_GetRpmRepositoryByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRpmRepositoryByName'
type MockPulpClient_GetRpmRepositoryByName_Call struct {
	*mock.Call
}

// GetRpmRepositoryByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpClient_Expecter) GetRpmRepositoryByName(ctx interface{}, name interface{}) *MockPulpClient_GetRpmRepositoryByName_Call {
	return &MockPulpClient_GetRpmRepositoryByName_Call{Call: _e.mock.On("GetRpmRepositoryByName", ctx, name)}
}

func (_c *MockPulpClient_GetRpmRepositoryByName_Call) Run(run func(ctx context.Context, name string)) *MockPulpClient_GetRpmRepositoryByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_GetRpmRepositoryByName_Call) Return(rpmRpmRepositoryResponse *zest.RpmRpmRepositoryResponse, err error) *MockPulpClient_GetRpmRepositoryByName_Call {
	_c.Call.Return(rpmRpmRepositoryResponse, err)
	return _c
}

func (_c *MockPulpClient_GetRpmRepositoryByName_Call) RunAndReturn(run func(ctx context.Context, name string) (*zest.RpmRpmRepositoryResponse, error)) *MockPulpClient_GetRpmRepositoryByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRpmRepositoryByRemote provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) GetRpmRepositoryByRemote(ctx context.Context, pulpHref string) (*zest.RpmRpmRepositoryResponse, error) {
	ret := _mock.Called(ctx, pulpHref)

	if len(ret) == 0 {
		panic("no return value specified for GetRpmRepositoryByRemote")
	}

	var r0 *zest.RpmRpmRepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.RpmRpmRepositoryResponse, error)); ok {
		return returnFunc(ctx, pulpHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.RpmRpmRepositoryResponse); ok {
		r0 = returnFunc(ctx, pulpHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RpmRpmRepositoryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, pulpHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_GetRpmRepositoryByRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRpmRepositoryByRemote'
type MockPulpClient_GetRpmRepositoryByRemote_Call struct {
	*mock.Call
}

// GetRpmRepositoryByRemote is a helper method to define mock.On call
//   - ctx context.Context
//   - pulpHref string
func (_e *MockPulpClient_Expecter) GetRpmRepositoryByRemote(ctx interface{}, pulpHref interface{}) *MockPulpClient_GetRpmRepositoryByRemote_Call {
	return &MockPulpClient_GetRpmRepositoryByRemote_Call{Call: _e.mock.On("GetRpmRepositoryByRemote", ctx, pulpHref)}
}

func (_c *MockPulpClient_GetRpmRepositoryByRemote_Call) Run(run func(ctx context.Context, pulpHref string)) *MockPulpClient_GetRpmRepositoryByRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_GetRpmRepositoryByRemote_Call) Return(rpmRpmRepositoryResponse *zest.RpmRpmRepositoryResponse, err error) *MockPulpClient_GetRpmRepositoryByRemote_Call {
	_c.Call.Return(rpmRpmRepositoryResponse, err)
	return _c
}

func (_c *MockPulpClient_GetRpmRepositoryByRemote_Call) RunAndReturn(run func(ctx context.Context, pulpHref string) (*zest.RpmRpmRepositoryResponse, error)) *MockPulpClient_GetRpmRepositoryByRemote_Call {
	_c.Call.Return(run)
	return _c
}

// GetRpmRepositoryVersion provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) GetRpmRepositoryVersion(ctx context.Context, href string) (*zest.RepositoryVersionResponse, error) {
	ret := _mock.Called(ctx, href)

	if len(ret) == 0 {
		panic("no return value specified for GetRpmRepositoryVersion")
	}

	var r0 *zest.RepositoryVersionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.RepositoryVersionResponse, error)); ok {
		return returnFunc(ctx, href)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.RepositoryVersionResponse); ok {
		r0 = returnFunc(ctx, href)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.RepositoryVersionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, href)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_GetRpmRepositoryVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRpmRepositoryVersion'
type MockPulpClient_GetRpmRepositoryVersion_Call struct {
	*mock.Call
}

// GetRpmRepositoryVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - href string
func (_e *MockPulpClient_Expecter) GetRpmRepositoryVersion(ctx interface{}, href interface{}) *MockPulpClient_GetRpmRepositoryVersion_Call {
	return &MockPulpClient_GetRpmRepositoryVersion_Call{Call: _e.mock.On("GetRpmRepositoryVersion", ctx, href)}
}

func (_c *MockPulpClient_GetRpmRepositoryVersion_Call) Run(run func(ctx context.Context, href string)) *MockPulpClient_GetRpmRepositoryVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_GetRpmRepositoryVersion_Call) Return(repositoryVersionResponse *zest.RepositoryVersionResponse, err error) *MockPulpClient_GetRpmRepositoryVersion_Call {
	_c.Call.Return(repositoryVersionResponse, err)
	return _c
}

func (_c *MockPulpClient_GetRpmRepositoryVersion_Call) RunAndReturn(run func(ctx context.Context, href string) (*zest.RepositoryVersionResponse, error)) *MockPulpClient_GetRpmRepositoryVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) GetTask(ctx context.Context, taskHref string) (zest.TaskResponse, error) {
	ret := _mock.Called(ctx, taskHref)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 zest.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (zest.TaskResponse, error)); ok {
		return returnFunc(ctx, taskHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) zest.TaskResponse); ok {
		r0 = returnFunc(ctx, taskHref)
	} else {
		r0 = ret.Get(0).(zest.TaskResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockPulpClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskHref string
func (_e *MockPulpClient_Expecter) GetTask(ctx interface{}, taskHref interface{}) *MockPulpClient_GetTask_Call {
	return &MockPulpClient_GetTask_Call{Call: _e.mock.On("GetTask", ctx, taskHref)}
}

func (_c *MockPulpClient_GetTask_Call) Run(run func(ctx context.Context, taskHref string)) *MockPulpClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_GetTask_Call) Return(taskResponse zest.TaskResponse, err error) *MockPulpClient_GetTask_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockPulpClient_GetTask_Call) RunAndReturn(run func(ctx context.Context, taskHref string) (zest.TaskResponse, error)) *MockPulpClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListDistributions provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) ListDistributions(ctx context.Context, pulpDomain string) (*[]zest.RpmRpmDistributionResponse, error) {
	ret := _mock.Called(ctx, pulpDomain)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributions")
	}

	var r0 *[]zest.RpmRpmDistributionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*[]zest.RpmRpmDistributionResponse, error)); ok {
		return returnFunc(ctx, pulpDomain)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *[]zest.RpmRpmDistributionResponse); ok {
		r0 = returnFunc(ctx, pulpDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]zest.RpmRpmDistributionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, pulpDomain)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_ListDistributions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDistributions'
type MockPulpClient_ListDistributions_Call struct {
	*mock.Call
}

// ListDistributions is a helper method to define mock.On call
//   - ctx context.Context
//   - pulpDomain string
func (_e *MockPulpClient_Expecter) ListDistributions(ctx interface{}, pulpDomain interface{}) *MockPulpClient_ListDistributions_Call {
	return &MockPulpClient_ListDistributions_Call{Call: _e.mock.On("ListDistributions", ctx, pulpDomain)}
}

func (_c *MockPulpClient_ListDistributions_Call) Run(run func(ctx context.Context, pulpDomain string)) *MockPulpClient_ListDistributions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_ListDistributions_Call) Return(rpmRpmDistributionResponses *[]zest.RpmRpmDistributionResponse, err error) *MockPulpClient_ListDistributions_Call {
	_c.Call.Return(rpmRpmDistributionResponses, err)
	return _c
}

func (_c *MockPulpClient_ListDistributions_Call) RunAndReturn(run func(ctx context.Context, pulpDomain string) (*[]zest.RpmRpmDistributionResponse, error)) *MockPulpClient_ListDistributions_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionAllPackages provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) ListVersionAllPackages(ctx context.Context, versionHref string) ([]zest.RpmPackageResponse, error) {
	ret := _mock.Called(ctx, versionHref)

	if len(ret) == 0 {
		panic("no return value specified for ListVersionAllPackages")
	}

	var r0 []zest.RpmPackageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]zest.RpmPackageResponse, error)); ok {
		return returnFunc(ctx, versionHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []zest.RpmPackageResponse); ok {
		r0 = returnFunc(ctx, versionHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zest.RpmPackageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, versionHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_ListVersionAllPackages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionAllPackages'
type MockPulpClient_ListVersionAllPackages_Call struct {
	*mock.Call
}

// ListVersionAllPackages is a helper method to define mock.On call
//   - ctx context.Context
//   - versionHref string
func (_e *MockPulpClient_Expecter) ListVersionAllPackages(ctx interface{}, versionHref interface{}) *MockPulpClient_ListVersionAllPackages_Call {
	return &MockPulpClient_ListVersionAllPackages_Call{Call: _e.mock.On("ListVersionAllPackages", ctx, versionHref)}
}

func (_c *MockPulpClient_ListVersionAllPackages_Call) Run(run func(ctx context.Context, versionHref string)) *MockPulpClient_ListVersionAllPackages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_ListVersionAllPackages_Call) Return(pkgs []zest.RpmPackageResponse, err error) *MockPulpClient_ListVersionAllPackages_Call {
	_c.Call.Return(pkgs, err)
	return _c
}

func (_c *MockPulpClient_ListVersionAllPackages_Call) RunAndReturn(run func(ctx context.Context, versionHref string) ([]zest.RpmPackageResponse, error)) *MockPulpClient_ListVersionAllPackages_Call {
	_c.Call.Return(run)
	return _c
}

// Livez provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) Livez(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Livez")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPulpClient_Livez_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Livez'
type MockPulpClient_Livez_Call struct {
	*mock.Call
}

// Livez is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPulpClient_Expecter) Livez(ctx interface{}) *MockPulpClient_Livez_Call {
	return &MockPulpClient_Livez_Call{Call: _e.mock.On("Livez", ctx)}
}

func (_c *MockPulpClient_Livez_Call) Run(run func(ctx context.Context)) *MockPulpClient_Livez_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpClient_Livez_Call) Return(err error) *MockPulpClient_Livez_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPulpClient_Livez_Call) RunAndReturn(run func(ctx context.Context) error) *MockPulpClient_Livez_Call {
	_c.Call.Return(run)
	return _c
}

// LookupArtifact provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) LookupArtifact(ctx context.Context, sha256sum string) (*string, error) {
	ret := _mock.Called(ctx, sha256sum)

	if len(ret) == 0 {
		panic("no return value specified for LookupArtifact")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return returnFunc(ctx, sha256sum)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = returnFunc(ctx, sha256sum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sha256sum)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_LookupArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupArtifact'
type MockPulpClient_LookupArtifact_Call struct {
	*mock.Call
}

// LookupArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - sha256sum string
func (_e *MockPulpClient_Expecter) LookupArtifact(ctx interface{}, sha256sum interface{}) *MockPulpClient_LookupArtifact_Call {
	return &MockPulpClient_LookupArtifact_Call{Call: _e.mock.On("LookupArtifact", ctx, sha256sum)}
}

func (_c *MockPulpClient_LookupArtifact_Call) Run(run func(ctx context.Context, sha256sum string)) *MockPulpClient_LookupArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_LookupArtifact_Call) Return(s *string, err error) *MockPulpClient_LookupArtifact_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_LookupArtifact_Call) RunAndReturn(run func(ctx context.Context, sha256sum string) (*string, error)) *MockPulpClient_LookupArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// LookupDomain provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) LookupDomain(ctx context.Context, name string) (string, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for LookupDomain")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_LookupDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupDomain'
type MockPulpClient_LookupDomain_Call struct {
	*mock.Call
}

// LookupDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpClient_Expecter) LookupDomain(ctx interface{}, name interface{}) *MockPulpClient_LookupDomain_Call {
	return &MockPulpClient_LookupDomain_Call{Call: _e.mock.On("LookupDomain", ctx, name)}
}

func (_c *MockPulpClient_LookupDomain_Call) Run(run func(ctx context.Context, name string)) *MockPulpClient_LookupDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_LookupDomain_Call) Return(s string, err error) *MockPulpClient_LookupDomain_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_LookupDomain_Call) RunAndReturn(run func(ctx context.Context, name string) (string, error)) *MockPulpClient_LookupDomain_Call {
	_c.Call.Return(run)
	return _c
}

// LookupOrCreateDomain provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) LookupOrCreateDomain(ctx context.Context, name string) (string, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for LookupOrCreateDomain")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_LookupOrCreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupOrCreateDomain'
type MockPulpClient_LookupOrCreateDomain_Call struct {
	*mock.Call
}

// LookupOrCreateDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpClient_Expecter) LookupOrCreateDomain(ctx interface{}, name interface{}) *MockPulpClient_LookupOrCreateDomain_Call {
	return &MockPulpClient_LookupOrCreateDomain_Call{Call: _e.mock.On("LookupOrCreateDomain", ctx, name)}
}

func (_c *MockPulpClient_LookupOrCreateDomain_Call) Run(run func(ctx context.Context, name string)) *MockPulpClient_LookupOrCreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_LookupOrCreateDomain_Call) Return(s string, err error) *MockPulpClient_LookupOrCreateDomain_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_LookupOrCreateDomain_Call) RunAndReturn(run func(ctx context.Context, name string) (string, error)) *MockPulpClient_LookupOrCreateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// LookupPackage provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) LookupPackage(ctx context.Context, sha256sum string) (*string, error) {
	ret := _mock.Called(ctx, sha256sum)

	if len(ret) == 0 {
		panic("no return value specified for LookupPackage")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return returnFunc(ctx, sha256sum)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = returnFunc(ctx, sha256sum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sha256sum)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_LookupPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupPackage'
type MockPulpClient_LookupPackage_Call struct {
	*mock.Call
}

// LookupPackage is a helper method to define mock.On call
//   - ctx context.Context
//   - sha256sum string
func (_e *MockPulpClient_Expecter) LookupPackage(ctx interface{}, sha256sum interface{}) *MockPulpClient_LookupPackage_Call {
	return &MockPulpClient_LookupPackage_Call{Call: _e.mock.On("LookupPackage", ctx, sha256sum)}
}

func (_c *MockPulpClient_LookupPackage_Call) Run(run func(ctx context.Context, sha256sum string)) *MockPulpClient_LookupPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_LookupPackage_Call) Return(s *string, err error) *MockPulpClient_LookupPackage_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_LookupPackage_Call) RunAndReturn(run func(ctx context.Context, sha256sum string) (*string, error)) *MockPulpClient_LookupPackage_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyRpmRepositoryContent provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) ModifyRpmRepositoryContent(ctx context.Context, repoHref string, contentHrefsToAdd []string, contentHrefsToRemove []string) (string, error) {
	ret := _mock.Called(ctx, repoHref, contentHrefsToAdd, contentHrefsToRemove)

	if len(ret) == 0 {
		panic("no return value specified for ModifyRpmRepositoryContent")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string) (string, error)); ok {
		return returnFunc(ctx, repoHref, contentHrefsToAdd, contentHrefsToRemove)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string) string); ok {
		r0 = returnFunc(ctx, repoHref, contentHrefsToAdd, contentHrefsToRemove)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string, []string) error); ok {
		r1 = returnFunc(ctx, repoHref, contentHrefsToAdd, contentHrefsToRemove)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_ModifyRpmRepositoryContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyRpmRepositoryContent'
type MockPulpClient_ModifyRpmRepositoryContent_Call struct {
	*mock.Call
}

// ModifyRpmRepositoryContent is a helper method to define mock.On call
//   - ctx context.Context
//   - repoHref string
//   - contentHrefsToAdd []string
//   - contentHrefsToRemove []string
func (_e *MockPulpClient_Expecter) ModifyRpmRepositoryContent(ctx interface{}, repoHref interface{}, contentHrefsToAdd interface{}, contentHrefsToRemove interface{}) *MockPulpClient_ModifyRpmRepositoryContent_Call {
	return &MockPulpClient_ModifyRpmRepositoryContent_Call{Call: _e.mock.On("ModifyRpmRepositoryContent", ctx, repoHref, contentHrefsToAdd, contentHrefsToRemove)}
}

func (_c *MockPulpClient_ModifyRpmRepositoryContent_Call) Run(run func(ctx context.Context, repoHref string, contentHrefsToAdd []string, contentHrefsToRemove []string)) *MockPulpClient_ModifyRpmRepositoryContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPulpClient_ModifyRpmRepositoryContent_Call) Return(s string, err error) *MockPulpClient_ModifyRpmRepositoryContent_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_ModifyRpmRepositoryContent_Call) RunAndReturn(run func(ctx context.Context, repoHref string, contentHrefsToAdd []string, contentHrefsToRemove []string) (string, error)) *MockPulpClient_ModifyRpmRepositoryContent_Call {
	_c.Call.Return(run)
	return _c
}

// OrphanCleanup provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) OrphanCleanup(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OrphanCleanup")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_OrphanCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrphanCleanup'
type MockPulpClient_OrphanCleanup_Call struct {
	*mock.Call
}

// OrphanCleanup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPulpClient_Expecter) OrphanCleanup(ctx interface{}) *MockPulpClient_OrphanCleanup_Call {
	return &MockPulpClient_OrphanCleanup_Call{Call: _e.mock.On("OrphanCleanup", ctx)}
}

func (_c *MockPulpClient_OrphanCleanup_Call) Run(run func(ctx context.Context)) *MockPulpClient_OrphanCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpClient_OrphanCleanup_Call) Return(s string, err error) *MockPulpClient_OrphanCleanup_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_OrphanCleanup_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockPulpClient_OrphanCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// PollTask provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) PollTask(ctx context.Context, taskHref string) (*zest.TaskResponse, error) {
	ret := _mock.Called(ctx, taskHref)

	if len(ret) == 0 {
		panic("no return value specified for PollTask")
	}

	var r0 *zest.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*zest.TaskResponse, error)); ok {
		return returnFunc(ctx, taskHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *zest.TaskResponse); ok {
		r0 = returnFunc(ctx, taskHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.TaskResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_PollTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollTask'
type MockPulpClient_PollTask_Call struct {
	*mock.Call
}

// PollTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskHref string
func (_e *MockPulpClient_Expecter) PollTask(ctx interface{}, taskHref interface{}) *MockPulpClient_PollTask_Call {
	return &MockPulpClient_PollTask_Call{Call: _e.mock.On("PollTask", ctx, taskHref)}
}

func (_c *MockPulpClient_PollTask_Call) Run(run func(ctx context.Context, taskHref string)) *MockPulpClient_PollTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_PollTask_Call) Return(taskResponse *zest.TaskResponse, err error) *MockPulpClient_PollTask_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockPulpClient_PollTask_Call) RunAndReturn(run func(ctx context.Context, taskHref string) (*zest.TaskResponse, error)) *MockPulpClient_PollTask_Call {
	_c.Call.Return(run)
	return _c
}

// RepairRpmRepositoryVersion provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) RepairRpmRepositoryVersion(ctx context.Context, href string) (string, error) {
	ret := _mock.Called(ctx, href)

	if len(ret) == 0 {
		panic("no return value specified for RepairRpmRepositoryVersion")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, href)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, href)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, href)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_RepairRpmRepositoryVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepairRpmRepositoryVersion'
type MockPulpClient_RepairRpmRepositoryVersion_Call struct {
	*mock.Call
}

// RepairRpmRepositoryVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - href string
func (_e *MockPulpClient_Expecter) RepairRpmRepositoryVersion(ctx interface{}, href interface{}) *MockPulpClient_RepairRpmRepositoryVersion_Call {
	return &MockPulpClient_RepairRpmRepositoryVersion_Call{Call: _e.mock.On("RepairRpmRepositoryVersion", ctx, href)}
}

func (_c *MockPulpClient_RepairRpmRepositoryVersion_Call) Run(run func(ctx context.Context, href string)) *MockPulpClient_RepairRpmRepositoryVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_RepairRpmRepositoryVersion_Call) Return(s string, err error) *MockPulpClient_RepairRpmRepositoryVersion_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_RepairRpmRepositoryVersion_Call) RunAndReturn(run func(ctx context.Context, href string) (string, error)) *MockPulpClient_RepairRpmRepositoryVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SetDomainLabel provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) SetDomainLabel(ctx context.Context, pulpHref string, key string, value string) error {
	ret := _mock.Called(ctx, pulpHref, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetDomainLabel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, pulpHref, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPulpClient_SetDomainLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDomainLabel'
type MockPulpClient_SetDomainLabel_Call struct {
	*mock.Call
}

// SetDomainLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - pulpHref string
//   - key string
//   - value string
func (_e *MockPulpClient_Expecter) SetDomainLabel(ctx interface{}, pulpHref interface{}, key interface{}, value interface{}) *MockPulpClient_SetDomainLabel_Call {
	return &MockPulpClient_SetDomainLabel_Call{Call: _e.mock.On("SetDomainLabel", ctx, pulpHref, key, value)}
}

func (_c *MockPulpClient_SetDomainLabel_Call) Run(run func(ctx context.Context, pulpHref string, key string, value string)) *MockPulpClient_SetDomainLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPulpClient_SetDomainLabel_Call) Return(err error) *MockPulpClient_SetDomainLabel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPulpClient_SetDomainLabel_Call) RunAndReturn(run func(ctx context.Context, pulpHref string, key string, value string) error) *MockPulpClient_SetDomainLabel_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) Status(ctx context.Context) (*zest.StatusResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *zest.StatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*zest.StatusResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *zest.StatusResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.StatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockPulpClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPulpClient_Expecter) Status(ctx interface{}) *MockPulpClient_Status_Call {
	return &MockPulpClient_Status_Call{Call: _e.mock.On("Status", ctx)}
}

func (_c *MockPulpClient_Status_Call) Run(run func(ctx context.Context)) *MockPulpClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpClient_Status_Call) Return(statusResponse *zest.StatusResponse, err error) *MockPulpClient_Status_Call {
	_c.Call.Return(statusResponse, err)
	return _c
}

func (_c *MockPulpClient_Status_Call) RunAndReturn(run func(ctx context.Context) (*zest.StatusResponse, error)) *MockPulpClient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// SyncRpmRepository provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) SyncRpmRepository(ctx context.Context, rpmRpmRepositoryHref string, remoteHref *string) (string, error) {
	ret := _mock.Called(ctx, rpmRpmRepositoryHref, remoteHref)

	if len(ret) == 0 {
		panic("no return value specified for SyncRpmRepository")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) (string, error)); ok {
		return returnFunc(ctx, rpmRpmRepositoryHref, remoteHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) string); ok {
		r0 = returnFunc(ctx, rpmRpmRepositoryHref, remoteHref)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string) error); ok {
		r1 = returnFunc(ctx, rpmRpmRepositoryHref, remoteHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_SyncRpmRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncRpmRepository'
type MockPulpClient_SyncRpmRepository_Call struct {
	*mock.Call
}

// SyncRpmRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - rpmRpmRepositoryHref string
//   - remoteHref *string
func (_e *MockPulpClient_Expecter) SyncRpmRepository(ctx interface{}, rpmRpmRepositoryHref interface{}, remoteHref interface{}) *MockPulpClient_SyncRpmRepository_Call {
	return &MockPulpClient_SyncRpmRepository_Call{Call: _e.mock.On("SyncRpmRepository", ctx, rpmRpmRepositoryHref, remoteHref)}
}

func (_c *MockPulpClient_SyncRpmRepository_Call) Run(run func(ctx context.Context, rpmRpmRepositoryHref string, remoteHref *string)) *MockPulpClient_SyncRpmRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPulpClient_SyncRpmRepository_Call) Return(s string, err error) *MockPulpClient_SyncRpmRepository_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_SyncRpmRepository_Call) RunAndReturn(run func(ctx context.Context, rpmRpmRepositoryHref string, remoteHref *string) (string, error)) *MockPulpClient_SyncRpmRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDomainIfNeeded provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) UpdateDomainIfNeeded(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainIfNeeded")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPulpClient_UpdateDomainIfNeeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDomainIfNeeded'
type MockPulpClient_UpdateDomainIfNeeded_Call struct {
	*mock.Call
}

// UpdateDomainIfNeeded is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPulpClient_Expecter) UpdateDomainIfNeeded(ctx interface{}, name interface{}) *MockPulpClient_UpdateDomainIfNeeded_Call {
	return &MockPulpClient_UpdateDomainIfNeeded_Call{Call: _e.mock.On("UpdateDomainIfNeeded", ctx, name)}
}

func (_c *MockPulpClient_UpdateDomainIfNeeded_Call) Run(run func(ctx context.Context, name string)) *MockPulpClient_UpdateDomainIfNeeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPulpClient_UpdateDomainIfNeeded_Call) Return(err error) *MockPulpClient_UpdateDomainIfNeeded_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPulpClient_UpdateDomainIfNeeded_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockPulpClient_UpdateDomainIfNeeded_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRpmDistribution provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) UpdateRpmDistribution(ctx context.Context, rpmDistributionHref string, rpmPublicationHref string, distributionName string, basePath string, contentGuardHref *string) (string, error) {
	ret := _mock.Called(ctx, rpmDistributionHref, rpmPublicationHref, distributionName, basePath, contentGuardHref)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRpmDistribution")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) (string, error)); ok {
		return returnFunc(ctx, rpmDistributionHref, rpmPublicationHref, distributionName, basePath, contentGuardHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) string); ok {
		r0 = returnFunc(ctx, rpmDistributionHref, rpmPublicationHref, distributionName, basePath, contentGuardHref)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string, *string) error); ok {
		r1 = returnFunc(ctx, rpmDistributionHref, rpmPublicationHref, distributionName, basePath, contentGuardHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_UpdateRpmDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRpmDistribution'
type MockPulpClient_UpdateRpmDistribution_Call struct {
	*mock.Call
}

// UpdateRpmDistribution is a helper method to define mock.On call
//   - ctx context.Context
//   - rpmDistributionHref string
//   - rpmPublicationHref string
//   - distributionName string
//   - basePath string
//   - contentGuardHref *string
func (_e *MockPulpClient_Expecter) UpdateRpmDistribution(ctx interface{}, rpmDistributionHref interface{}, rpmPublicationHref interface{}, distributionName interface{}, basePath interface{}, contentGuardHref interface{}) *MockPulpClient_UpdateRpmDistribution_Call {
	return &MockPulpClient_UpdateRpmDistribution_Call{Call: _e.mock.On("UpdateRpmDistribution", ctx, rpmDistributionHref, rpmPublicationHref, distributionName, basePath, contentGuardHref)}
}

func (_c *MockPulpClient_UpdateRpmDistribution_Call) Run(run func(ctx context.Context, rpmDistributionHref string, rpmPublicationHref string, distributionName string, basePath string, contentGuardHref *string)) *MockPulpClient_UpdateRpmDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockPulpClient_UpdateRpmDistribution_Call) Return(s string, err error) *MockPulpClient_UpdateRpmDistribution_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_UpdateRpmDistribution_Call) RunAndReturn(run func(ctx context.Context, rpmDistributionHref string, rpmPublicationHref string, distributionName string, basePath string, contentGuardHref *string) (string, error)) *MockPulpClient_UpdateRpmDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRpmRemote provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) UpdateRpmRemote(ctx context.Context, pulpHref string, url string, clientCert *string, clientKey *string, caCert *string) (string, error) {
	ret := _mock.Called(ctx, pulpHref, url, clientCert, clientKey, caCert)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRpmRemote")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *string, *string, *string) (string, error)); ok {
		return returnFunc(ctx, pulpHref, url, clientCert, clientKey, caCert)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *string, *string, *string) string); ok {
		r0 = returnFunc(ctx, pulpHref, url, clientCert, clientKey, caCert)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *string, *string, *string) error); ok {
		r1 = returnFunc(ctx, pulpHref, url, clientCert, clientKey, caCert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPulpClient_UpdateRpmRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRpmRemote'
type MockPulpClient_UpdateRpmRemote_Call struct {
	*mock.Call
}

// UpdateRpmRemote is a helper method to define mock.On call
//   - ctx context.Context
//   - pulpHref string
//   - url string
//   - clientCert *string
//   - clientKey *string
//   - caCert *string
func (_e *MockPulpClient_Expecter) UpdateRpmRemote(ctx interface{}, pulpHref interface{}, url interface{}, clientCert interface{}, clientKey interface{}, caCert interface{}) *MockPulpClient_UpdateRpmRemote_Call {
	return &MockPulpClient_UpdateRpmRemote_Call{Call: _e.mock.On("UpdateRpmRemote", ctx, pulpHref, url, clientCert, clientKey, caCert)}
}

func (_c *MockPulpClient_UpdateRpmRemote_Call) Run(run func(ctx context.Context, pulpHref string, url string, clientCert *string, clientKey *string, caCert *string)) *MockPulpClient_UpdateRpmRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockPulpClient_UpdateRpmRemote_Call) Return(s string, err error) *MockPulpClient_UpdateRpmRemote_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPulpClient_UpdateRpmRemote_Call) RunAndReturn(run func(ctx context.Context, pulpHref string, url string, clientCert *string, clientKey *string, caCert *string) (string, error)) *MockPulpClient_UpdateRpmRemote_Call {
	_c.Call.Return(run)
	return _c
}

// UploadChunk provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) UploadChunk(ctx context.Context, uploadHref string, contentRange string, file *os.File, sha256 string) (*zest.UploadResponse, int, error) {
	ret := _mock.Called(ctx, uploadHref, contentRange, file, sha256)

	if len(ret) == 0 {
		panic("no return value specified for UploadChunk")
	}

	var r0 *zest.UploadResponse
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *os.File, string) (*zest.UploadResponse, int, error)); ok {
		return returnFunc(ctx, uploadHref, contentRange, file, sha256)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *os.File, string) *zest.UploadResponse); ok {
		r0 = returnFunc(ctx, uploadHref, contentRange, file, sha256)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zest.UploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *os.File, string) int); ok {
		r1 = returnFunc(ctx, uploadHref, contentRange, file, sha256)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, *os.File, string) error); ok {
		r2 = returnFunc(ctx, uploadHref, contentRange, file, sha256)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPulpClient_UploadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadChunk'
type MockPulpClient_UploadChunk_Call struct {
	*mock.Call
}

// UploadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - uploadHref string
//   - contentRange string
//   - file *os.File
//   - sha256 string
func (_e *MockPulpClient_Expecter) UploadChunk(ctx interface{}, uploadHref interface{}, contentRange interface{}, file interface{}, sha256 interface{}) *MockPulpClient_UploadChunk_Call {
	return &MockPulpClient_UploadChunk_Call{Call: _e.mock.On("UploadChunk", ctx, uploadHref, contentRange, file, sha256)}
}

func (_c *MockPulpClient_UploadChunk_Call) Run(run func(ctx context.Context, uploadHref string, contentRange string, file *os.File, sha256 string)) *MockPulpClient_UploadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *os.File
		if args[3] != nil {
			arg3 = args[3].(*os.File)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPulpClient_UploadChunk_Call) Return(uploadResponse *zest.UploadResponse, n int, err error) *MockPulpClient_UploadChunk_Call {
	_c.Call.Return(uploadResponse, n, err)
	return _c
}

func (_c *MockPulpClient_UploadChunk_Call) RunAndReturn(run func(ctx context.Context, uploadHref string, contentRange string, file *os.File, sha256 string) (*zest.UploadResponse, int, error)) *MockPulpClient_UploadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// WithDomain provides a mock function for the type MockPulpClient
func (_mock *MockPulpClient) WithDomain(domainName string) PulpClient {
	ret := _mock.Called(domainName)

	if len(ret) == 0 {
		panic("no return value specified for WithDomain")
	}

	var r0 PulpClient
	if returnFunc, ok := ret.Get(0).(func(string) PulpClient); ok {
		r0 = returnFunc(domainName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PulpClient)
		}
	}
	return r0
}

// MockPulpClient_WithDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDomain'
type MockPulpClient_WithDomain_Call struct {
	*mock.Call
}

// WithDomain is a helper method to define mock.On call
//   - domainName string
func (_e *MockPulpClient_Expecter) WithDomain(domainName interface{}) *MockPulpClient_WithDomain_Call {
	return &MockPulpClient_WithDomain_Call{Call: _e.mock.On("WithDomain", domainName)}
}

func (_c *MockPulpClient_WithDomain_Call) Run(run func(domainName string)) *MockPulpClient_WithDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPulpClient_WithDomain_Call) Return(pulpClient PulpClient) *MockPulpClient_WithDomain_Call {
	_c.Call.Return(pulpClient)
	return _c
}

func (_c *MockPulpClient_WithDomain_Call) RunAndReturn(run func(domainName string) PulpClient) *MockPulpClient_WithDomain_Call {
	_c.Call.Return(run)
	return _c
}
