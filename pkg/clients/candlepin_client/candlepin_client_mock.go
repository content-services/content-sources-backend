// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package candlepin_client

import (
	"context"

	"github.com/content-services/caliri/release/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCandlepinClient creates a new instance of MockCandlepinClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCandlepinClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCandlepinClient {
	mock := &MockCandlepinClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCandlepinClient is an autogenerated mock type for the CandlepinClient type
type MockCandlepinClient struct {
	mock.Mock
}

type MockCandlepinClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCandlepinClient) EXPECT() *MockCandlepinClient_Expecter {
	return &MockCandlepinClient_Expecter{mock: &_m.Mock}
}

// AddContentBatchToProduct provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) AddContentBatchToProduct(ctx context.Context, orgID string, contentIDs []string) error {
	ret := _mock.Called(ctx, orgID, contentIDs)

	if len(ret) == 0 {
		panic("no return value specified for AddContentBatchToProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, orgID, contentIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_AddContentBatchToProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddContentBatchToProduct'
type MockCandlepinClient_AddContentBatchToProduct_Call struct {
	*mock.Call
}

// AddContentBatchToProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - contentIDs []string
func (_e *MockCandlepinClient_Expecter) AddContentBatchToProduct(ctx interface{}, orgID interface{}, contentIDs interface{}) *MockCandlepinClient_AddContentBatchToProduct_Call {
	return &MockCandlepinClient_AddContentBatchToProduct_Call{Call: _e.mock.On("AddContentBatchToProduct", ctx, orgID, contentIDs)}
}

func (_c *MockCandlepinClient_AddContentBatchToProduct_Call) Run(run func(ctx context.Context, orgID string, contentIDs []string)) *MockCandlepinClient_AddContentBatchToProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_AddContentBatchToProduct_Call) Return(err error) *MockCandlepinClient_AddContentBatchToProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_AddContentBatchToProduct_Call) RunAndReturn(run func(ctx context.Context, orgID string, contentIDs []string) error) *MockCandlepinClient_AddContentBatchToProduct_Call {
	_c.Call.Return(run)
	return _c
}

// AssociateEnvironment provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) AssociateEnvironment(ctx context.Context, orgID string, templateName string, consumerUuid string) error {
	ret := _mock.Called(ctx, orgID, templateName, consumerUuid)

	if len(ret) == 0 {
		panic("no return value specified for AssociateEnvironment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, templateName, consumerUuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_AssociateEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociateEnvironment'
type MockCandlepinClient_AssociateEnvironment_Call struct {
	*mock.Call
}

// AssociateEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - templateName string
//   - consumerUuid string
func (_e *MockCandlepinClient_Expecter) AssociateEnvironment(ctx interface{}, orgID interface{}, templateName interface{}, consumerUuid interface{}) *MockCandlepinClient_AssociateEnvironment_Call {
	return &MockCandlepinClient_AssociateEnvironment_Call{Call: _e.mock.On("AssociateEnvironment", ctx, orgID, templateName, consumerUuid)}
}

func (_c *MockCandlepinClient_AssociateEnvironment_Call) Run(run func(ctx context.Context, orgID string, templateName string, consumerUuid string)) *MockCandlepinClient_AssociateEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_AssociateEnvironment_Call) Return(err error) *MockCandlepinClient_AssociateEnvironment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_AssociateEnvironment_Call) RunAndReturn(run func(ctx context.Context, orgID string, templateName string, consumerUuid string) error) *MockCandlepinClient_AssociateEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConsumer provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) CreateConsumer(ctx context.Context, orgID string, name string) (*caliri.ConsumerDTO, error) {
	ret := _mock.Called(ctx, orgID, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateConsumer")
	}

	var r0 *caliri.ConsumerDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*caliri.ConsumerDTO, error)); ok {
		return returnFunc(ctx, orgID, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *caliri.ConsumerDTO); ok {
		r0 = returnFunc(ctx, orgID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.ConsumerDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, orgID, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_CreateConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConsumer'
type MockCandlepinClient_CreateConsumer_Call struct {
	*mock.Call
}

// CreateConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - name string
func (_e *MockCandlepinClient_Expecter) CreateConsumer(ctx interface{}, orgID interface{}, name interface{}) *MockCandlepinClient_CreateConsumer_Call {
	return &MockCandlepinClient_CreateConsumer_Call{Call: _e.mock.On("CreateConsumer", ctx, orgID, name)}
}

func (_c *MockCandlepinClient_CreateConsumer_Call) Run(run func(ctx context.Context, orgID string, name string)) *MockCandlepinClient_CreateConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_CreateConsumer_Call) Return(consumerDTO *caliri.ConsumerDTO, err error) *MockCandlepinClient_CreateConsumer_Call {
	_c.Call.Return(consumerDTO, err)
	return _c
}

func (_c *MockCandlepinClient_CreateConsumer_Call) RunAndReturn(run func(ctx context.Context, orgID string, name string) (*caliri.ConsumerDTO, error)) *MockCandlepinClient_CreateConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateContent provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) CreateContent(ctx context.Context, orgID string, content caliri.ContentDTO) error {
	ret := _mock.Called(ctx, orgID, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, caliri.ContentDTO) error); ok {
		r0 = returnFunc(ctx, orgID, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_CreateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContent'
type MockCandlepinClient_CreateContent_Call struct {
	*mock.Call
}

// CreateContent is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - content caliri.ContentDTO
func (_e *MockCandlepinClient_Expecter) CreateContent(ctx interface{}, orgID interface{}, content interface{}) *MockCandlepinClient_CreateContent_Call {
	return &MockCandlepinClient_CreateContent_Call{Call: _e.mock.On("CreateContent", ctx, orgID, content)}
}

func (_c *MockCandlepinClient_CreateContent_Call) Run(run func(ctx context.Context, orgID string, content caliri.ContentDTO)) *MockCandlepinClient_CreateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 caliri.ContentDTO
		if args[2] != nil {
			arg2 = args[2].(caliri.ContentDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_CreateContent_Call) Return(err error) *MockCandlepinClient_CreateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_CreateContent_Call) RunAndReturn(run func(ctx context.Context, orgID string, content caliri.ContentDTO) error) *MockCandlepinClient_CreateContent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateContentBatch provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) CreateContentBatch(ctx context.Context, orgID string, content []caliri.ContentDTO) error {
	ret := _mock.Called(ctx, orgID, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContentBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []caliri.ContentDTO) error); ok {
		r0 = returnFunc(ctx, orgID, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_CreateContentBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContentBatch'
type MockCandlepinClient_CreateContentBatch_Call struct {
	*mock.Call
}

// CreateContentBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - content []caliri.ContentDTO
func (_e *MockCandlepinClient_Expecter) CreateContentBatch(ctx interface{}, orgID interface{}, content interface{}) *MockCandlepinClient_CreateContentBatch_Call {
	return &MockCandlepinClient_CreateContentBatch_Call{Call: _e.mock.On("CreateContentBatch", ctx, orgID, content)}
}

func (_c *MockCandlepinClient_CreateContentBatch_Call) Run(run func(ctx context.Context, orgID string, content []caliri.ContentDTO)) *MockCandlepinClient_CreateContentBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []caliri.ContentDTO
		if args[2] != nil {
			arg2 = args[2].([]caliri.ContentDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_CreateContentBatch_Call) Return(err error) *MockCandlepinClient_CreateContentBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_CreateContentBatch_Call) RunAndReturn(run func(ctx context.Context, orgID string, content []caliri.ContentDTO) error) *MockCandlepinClient_CreateContentBatch_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEnvironment provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) CreateEnvironment(ctx context.Context, orgID string, name string, id string, prefix string) (*caliri.EnvironmentDTO, error) {
	ret := _mock.Called(ctx, orgID, name, id, prefix)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironment")
	}

	var r0 *caliri.EnvironmentDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*caliri.EnvironmentDTO, error)); ok {
		return returnFunc(ctx, orgID, name, id, prefix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) *caliri.EnvironmentDTO); ok {
		r0 = returnFunc(ctx, orgID, name, id, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.EnvironmentDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = returnFunc(ctx, orgID, name, id, prefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_CreateEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEnvironment'
type MockCandlepinClient_CreateEnvironment_Call struct {
	*mock.Call
}

// CreateEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - name string
//   - id string
//   - prefix string
func (_e *MockCandlepinClient_Expecter) CreateEnvironment(ctx interface{}, orgID interface{}, name interface{}, id interface{}, prefix interface{}) *MockCandlepinClient_CreateEnvironment_Call {
	return &MockCandlepinClient_CreateEnvironment_Call{Call: _e.mock.On("CreateEnvironment", ctx, orgID, name, id, prefix)}
}

func (_c *MockCandlepinClient_CreateEnvironment_Call) Run(run func(ctx context.Context, orgID string, name string, id string, prefix string)) *MockCandlepinClient_CreateEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_CreateEnvironment_Call) Return(environmentDTO *caliri.EnvironmentDTO, err error) *MockCandlepinClient_CreateEnvironment_Call {
	_c.Call.Return(environmentDTO, err)
	return _c
}

func (_c *MockCandlepinClient_CreateEnvironment_Call) RunAndReturn(run func(ctx context.Context, orgID string, name string, id string, prefix string) (*caliri.EnvironmentDTO, error)) *MockCandlepinClient_CreateEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOwner provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) CreateOwner(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateOwner")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_CreateOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOwner'
type MockCandlepinClient_CreateOwner_Call struct {
	*mock.Call
}

// CreateOwner is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCandlepinClient_Expecter) CreateOwner(ctx interface{}) *MockCandlepinClient_CreateOwner_Call {
	return &MockCandlepinClient_CreateOwner_Call{Call: _e.mock.On("CreateOwner", ctx)}
}

func (_c *MockCandlepinClient_CreateOwner_Call) Run(run func(ctx context.Context)) *MockCandlepinClient_CreateOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_CreateOwner_Call) Return(err error) *MockCandlepinClient_CreateOwner_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_CreateOwner_Call) RunAndReturn(run func(ctx context.Context) error) *MockCandlepinClient_CreateOwner_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePool provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) CreatePool(ctx context.Context, orgID string) (string, error) {
	ret := _mock.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for CreatePool")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, orgID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, orgID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_CreatePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePool'
type MockCandlepinClient_CreatePool_Call struct {
	*mock.Call
}

// CreatePool is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *MockCandlepinClient_Expecter) CreatePool(ctx interface{}, orgID interface{}) *MockCandlepinClient_CreatePool_Call {
	return &MockCandlepinClient_CreatePool_Call{Call: _e.mock.On("CreatePool", ctx, orgID)}
}

func (_c *MockCandlepinClient_CreatePool_Call) Run(run func(ctx context.Context, orgID string)) *MockCandlepinClient_CreatePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_CreatePool_Call) Return(s string, err error) *MockCandlepinClient_CreatePool_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCandlepinClient_CreatePool_Call) RunAndReturn(run func(ctx context.Context, orgID string) (string, error)) *MockCandlepinClient_CreatePool_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) CreateProduct(ctx context.Context, orgID string) error {
	ret := _mock.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, orgID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockCandlepinClient_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *MockCandlepinClient_Expecter) CreateProduct(ctx interface{}, orgID interface{}) *MockCandlepinClient_CreateProduct_Call {
	return &MockCandlepinClient_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, orgID)}
}

func (_c *MockCandlepinClient_CreateProduct_Call) Run(run func(ctx context.Context, orgID string)) *MockCandlepinClient_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_CreateProduct_Call) Return(err error) *MockCandlepinClient_CreateProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, orgID string) error) *MockCandlepinClient_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConsumer provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) DeleteConsumer(ctx context.Context, consumerUUID string) error {
	ret := _mock.Called(ctx, consumerUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsumer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, consumerUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_DeleteConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConsumer'
type MockCandlepinClient_DeleteConsumer_Call struct {
	*mock.Call
}

// DeleteConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - consumerUUID string
func (_e *MockCandlepinClient_Expecter) DeleteConsumer(ctx interface{}, consumerUUID interface{}) *MockCandlepinClient_DeleteConsumer_Call {
	return &MockCandlepinClient_DeleteConsumer_Call{Call: _e.mock.On("DeleteConsumer", ctx, consumerUUID)}
}

func (_c *MockCandlepinClient_DeleteConsumer_Call) Run(run func(ctx context.Context, consumerUUID string)) *MockCandlepinClient_DeleteConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_DeleteConsumer_Call) Return(err error) *MockCandlepinClient_DeleteConsumer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_DeleteConsumer_Call) RunAndReturn(run func(ctx context.Context, consumerUUID string) error) *MockCandlepinClient_DeleteConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContent provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) DeleteContent(ctx context.Context, ownerKey string, repoConfigUUID string) error {
	ret := _mock.Called(ctx, ownerKey, repoConfigUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, ownerKey, repoConfigUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_DeleteContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContent'
type MockCandlepinClient_DeleteContent_Call struct {
	*mock.Call
}

// DeleteContent is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerKey string
//   - repoConfigUUID string
func (_e *MockCandlepinClient_Expecter) DeleteContent(ctx interface{}, ownerKey interface{}, repoConfigUUID interface{}) *MockCandlepinClient_DeleteContent_Call {
	return &MockCandlepinClient_DeleteContent_Call{Call: _e.mock.On("DeleteContent", ctx, ownerKey, repoConfigUUID)}
}

func (_c *MockCandlepinClient_DeleteContent_Call) Run(run func(ctx context.Context, ownerKey string, repoConfigUUID string)) *MockCandlepinClient_DeleteContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_DeleteContent_Call) Return(err error) *MockCandlepinClient_DeleteContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_DeleteContent_Call) RunAndReturn(run func(ctx context.Context, ownerKey string, repoConfigUUID string) error) *MockCandlepinClient_DeleteContent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEnvironment provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) DeleteEnvironment(ctx context.Context, templateUUID string) error {
	ret := _mock.Called(ctx, templateUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, templateUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_DeleteEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEnvironment'
type MockCandlepinClient_DeleteEnvironment_Call struct {
	*mock.Call
}

// DeleteEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
func (_e *MockCandlepinClient_Expecter) DeleteEnvironment(ctx interface{}, templateUUID interface{}) *MockCandlepinClient_DeleteEnvironment_Call {
	return &MockCandlepinClient_DeleteEnvironment_Call{Call: _e.mock.On("DeleteEnvironment", ctx, templateUUID)}
}

func (_c *MockCandlepinClient_DeleteEnvironment_Call) Run(run func(ctx context.Context, templateUUID string)) *MockCandlepinClient_DeleteEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_DeleteEnvironment_Call) Return(err error) *MockCandlepinClient_DeleteEnvironment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_DeleteEnvironment_Call) RunAndReturn(run func(ctx context.Context, templateUUID string) error) *MockCandlepinClient_DeleteEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// DemoteContentFromEnvironment provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) DemoteContentFromEnvironment(ctx context.Context, templateUUID string, customRepoConfigUUIDs []string) error {
	ret := _mock.Called(ctx, templateUUID, customRepoConfigUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for DemoteContentFromEnvironment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, templateUUID, customRepoConfigUUIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_DemoteContentFromEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemoteContentFromEnvironment'
type MockCandlepinClient_DemoteContentFromEnvironment_Call struct {
	*mock.Call
}

// DemoteContentFromEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - customRepoConfigUUIDs []string
func (_e *MockCandlepinClient_Expecter) DemoteContentFromEnvironment(ctx interface{}, templateUUID interface{}, customRepoConfigUUIDs interface{}) *MockCandlepinClient_DemoteContentFromEnvironment_Call {
	return &MockCandlepinClient_DemoteContentFromEnvironment_Call{Call: _e.mock.On("DemoteContentFromEnvironment", ctx, templateUUID, customRepoConfigUUIDs)}
}

func (_c *MockCandlepinClient_DemoteContentFromEnvironment_Call) Run(run func(ctx context.Context, templateUUID string, customRepoConfigUUIDs []string)) *MockCandlepinClient_DemoteContentFromEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_DemoteContentFromEnvironment_Call) Return(err error) *MockCandlepinClient_DemoteContentFromEnvironment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_DemoteContentFromEnvironment_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, customRepoConfigUUIDs []string) error) *MockCandlepinClient_DemoteContentFromEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// FetchConsumer provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchConsumer(ctx context.Context, consumerUUID string) (*caliri.ConsumerDTO, error) {
	ret := _mock.Called(ctx, consumerUUID)

	if len(ret) == 0 {
		panic("no return value specified for FetchConsumer")
	}

	var r0 *caliri.ConsumerDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*caliri.ConsumerDTO, error)); ok {
		return returnFunc(ctx, consumerUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *caliri.ConsumerDTO); ok {
		r0 = returnFunc(ctx, consumerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.ConsumerDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, consumerUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchConsumer'
type MockCandlepinClient_FetchConsumer_Call struct {
	*mock.Call
}

// FetchConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - consumerUUID string
func (_e *MockCandlepinClient_Expecter) FetchConsumer(ctx interface{}, consumerUUID interface{}) *MockCandlepinClient_FetchConsumer_Call {
	return &MockCandlepinClient_FetchConsumer_Call{Call: _e.mock.On("FetchConsumer", ctx, consumerUUID)}
}

func (_c *MockCandlepinClient_FetchConsumer_Call) Run(run func(ctx context.Context, consumerUUID string)) *MockCandlepinClient_FetchConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchConsumer_Call) Return(consumerDTO *caliri.ConsumerDTO, err error) *MockCandlepinClient_FetchConsumer_Call {
	_c.Call.Return(consumerDTO, err)
	return _c
}

func (_c *MockCandlepinClient_FetchConsumer_Call) RunAndReturn(run func(ctx context.Context, consumerUUID string) (*caliri.ConsumerDTO, error)) *MockCandlepinClient_FetchConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// FetchContent provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchContent(ctx context.Context, orgID string, repoConfigUUID string) (*caliri.ContentDTO, error) {
	ret := _mock.Called(ctx, orgID, repoConfigUUID)

	if len(ret) == 0 {
		panic("no return value specified for FetchContent")
	}

	var r0 *caliri.ContentDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*caliri.ContentDTO, error)); ok {
		return returnFunc(ctx, orgID, repoConfigUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *caliri.ContentDTO); ok {
		r0 = returnFunc(ctx, orgID, repoConfigUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.ContentDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, orgID, repoConfigUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchContent'
type MockCandlepinClient_FetchContent_Call struct {
	*mock.Call
}

// FetchContent is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - repoConfigUUID string
func (_e *MockCandlepinClient_Expecter) FetchContent(ctx interface{}, orgID interface{}, repoConfigUUID interface{}) *MockCandlepinClient_FetchContent_Call {
	return &MockCandlepinClient_FetchContent_Call{Call: _e.mock.On("FetchContent", ctx, orgID, repoConfigUUID)}
}

func (_c *MockCandlepinClient_FetchContent_Call) Run(run func(ctx context.Context, orgID string, repoConfigUUID string)) *MockCandlepinClient_FetchContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchContent_Call) Return(contentDTO *caliri.ContentDTO, err error) *MockCandlepinClient_FetchContent_Call {
	_c.Call.Return(contentDTO, err)
	return _c
}

func (_c *MockCandlepinClient_FetchContent_Call) RunAndReturn(run func(ctx context.Context, orgID string, repoConfigUUID string) (*caliri.ContentDTO, error)) *MockCandlepinClient_FetchContent_Call {
	_c.Call.Return(run)
	return _c
}

// FetchContentOverrides provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchContentOverrides(ctx context.Context, templateUUID string) ([]caliri.ContentOverrideDTO, error) {
	ret := _mock.Called(ctx, templateUUID)

	if len(ret) == 0 {
		panic("no return value specified for FetchContentOverrides")
	}

	var r0 []caliri.ContentOverrideDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]caliri.ContentOverrideDTO, error)); ok {
		return returnFunc(ctx, templateUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []caliri.ContentOverrideDTO); ok {
		r0 = returnFunc(ctx, templateUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]caliri.ContentOverrideDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, templateUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchContentOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchContentOverrides'
type MockCandlepinClient_FetchContentOverrides_Call struct {
	*mock.Call
}

// FetchContentOverrides is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
func (_e *MockCandlepinClient_Expecter) FetchContentOverrides(ctx interface{}, templateUUID interface{}) *MockCandlepinClient_FetchContentOverrides_Call {
	return &MockCandlepinClient_FetchContentOverrides_Call{Call: _e.mock.On("FetchContentOverrides", ctx, templateUUID)}
}

func (_c *MockCandlepinClient_FetchContentOverrides_Call) Run(run func(ctx context.Context, templateUUID string)) *MockCandlepinClient_FetchContentOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchContentOverrides_Call) Return(contentOverrideDTOs []caliri.ContentOverrideDTO, err error) *MockCandlepinClient_FetchContentOverrides_Call {
	_c.Call.Return(contentOverrideDTOs, err)
	return _c
}

func (_c *MockCandlepinClient_FetchContentOverrides_Call) RunAndReturn(run func(ctx context.Context, templateUUID string) ([]caliri.ContentOverrideDTO, error)) *MockCandlepinClient_FetchContentOverrides_Call {
	_c.Call.Return(run)
	return _c
}

// FetchContentOverridesForRepo provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchContentOverridesForRepo(ctx context.Context, templateUUID string, label string) ([]caliri.ContentOverrideDTO, error) {
	ret := _mock.Called(ctx, templateUUID, label)

	if len(ret) == 0 {
		panic("no return value specified for FetchContentOverridesForRepo")
	}

	var r0 []caliri.ContentOverrideDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]caliri.ContentOverrideDTO, error)); ok {
		return returnFunc(ctx, templateUUID, label)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []caliri.ContentOverrideDTO); ok {
		r0 = returnFunc(ctx, templateUUID, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]caliri.ContentOverrideDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, templateUUID, label)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchContentOverridesForRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchContentOverridesForRepo'
type MockCandlepinClient_FetchContentOverridesForRepo_Call struct {
	*mock.Call
}

// FetchContentOverridesForRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - label string
func (_e *MockCandlepinClient_Expecter) FetchContentOverridesForRepo(ctx interface{}, templateUUID interface{}, label interface{}) *MockCandlepinClient_FetchContentOverridesForRepo_Call {
	return &MockCandlepinClient_FetchContentOverridesForRepo_Call{Call: _e.mock.On("FetchContentOverridesForRepo", ctx, templateUUID, label)}
}

func (_c *MockCandlepinClient_FetchContentOverridesForRepo_Call) Run(run func(ctx context.Context, templateUUID string, label string)) *MockCandlepinClient_FetchContentOverridesForRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchContentOverridesForRepo_Call) Return(contentOverrideDTOs []caliri.ContentOverrideDTO, err error) *MockCandlepinClient_FetchContentOverridesForRepo_Call {
	_c.Call.Return(contentOverrideDTOs, err)
	return _c
}

func (_c *MockCandlepinClient_FetchContentOverridesForRepo_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, label string) ([]caliri.ContentOverrideDTO, error)) *MockCandlepinClient_FetchContentOverridesForRepo_Call {
	_c.Call.Return(run)
	return _c
}

// FetchContentsByLabel provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchContentsByLabel(ctx context.Context, orgID string, labels []string) ([]caliri.ContentDTO, error) {
	ret := _mock.Called(ctx, orgID, labels)

	if len(ret) == 0 {
		panic("no return value specified for FetchContentsByLabel")
	}

	var r0 []caliri.ContentDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) ([]caliri.ContentDTO, error)); ok {
		return returnFunc(ctx, orgID, labels)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) []caliri.ContentDTO); ok {
		r0 = returnFunc(ctx, orgID, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]caliri.ContentDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, orgID, labels)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchContentsByLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchContentsByLabel'
type MockCandlepinClient_FetchContentsByLabel_Call struct {
	*mock.Call
}

// FetchContentsByLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - labels []string
func (_e *MockCandlepinClient_Expecter) FetchContentsByLabel(ctx interface{}, orgID interface{}, labels interface{}) *MockCandlepinClient_FetchContentsByLabel_Call {
	return &MockCandlepinClient_FetchContentsByLabel_Call{Call: _e.mock.On("FetchContentsByLabel", ctx, orgID, labels)}
}

func (_c *MockCandlepinClient_FetchContentsByLabel_Call) Run(run func(ctx context.Context, orgID string, labels []string)) *MockCandlepinClient_FetchContentsByLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchContentsByLabel_Call) Return(contentDTOs []caliri.ContentDTO, err error) *MockCandlepinClient_FetchContentsByLabel_Call {
	_c.Call.Return(contentDTOs, err)
	return _c
}

func (_c *MockCandlepinClient_FetchContentsByLabel_Call) RunAndReturn(run func(ctx context.Context, orgID string, labels []string) ([]caliri.ContentDTO, error)) *MockCandlepinClient_FetchContentsByLabel_Call {
	_c.Call.Return(run)
	return _c
}

// FetchEnvironment provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchEnvironment(ctx context.Context, templateUUID string) (*caliri.EnvironmentDTO, error) {
	ret := _mock.Called(ctx, templateUUID)

	if len(ret) == 0 {
		panic("no return value specified for FetchEnvironment")
	}

	var r0 *caliri.EnvironmentDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*caliri.EnvironmentDTO, error)); ok {
		return returnFunc(ctx, templateUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *caliri.EnvironmentDTO); ok {
		r0 = returnFunc(ctx, templateUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.EnvironmentDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, templateUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchEnvironment'
type MockCandlepinClient_FetchEnvironment_Call struct {
	*mock.Call
}

// FetchEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
func (_e *MockCandlepinClient_Expecter) FetchEnvironment(ctx interface{}, templateUUID interface{}) *MockCandlepinClient_FetchEnvironment_Call {
	return &MockCandlepinClient_FetchEnvironment_Call{Call: _e.mock.On("FetchEnvironment", ctx, templateUUID)}
}

func (_c *MockCandlepinClient_FetchEnvironment_Call) Run(run func(ctx context.Context, templateUUID string)) *MockCandlepinClient_FetchEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchEnvironment_Call) Return(environmentDTO *caliri.EnvironmentDTO, err error) *MockCandlepinClient_FetchEnvironment_Call {
	_c.Call.Return(environmentDTO, err)
	return _c
}

func (_c *MockCandlepinClient_FetchEnvironment_Call) RunAndReturn(run func(ctx context.Context, templateUUID string) (*caliri.EnvironmentDTO, error)) *MockCandlepinClient_FetchEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// FetchPool provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchPool(ctx context.Context, orgID string) (*caliri.PoolDTO, error) {
	ret := _mock.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for FetchPool")
	}

	var r0 *caliri.PoolDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*caliri.PoolDTO, error)); ok {
		return returnFunc(ctx, orgID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *caliri.PoolDTO); ok {
		r0 = returnFunc(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.PoolDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchPool'
type MockCandlepinClient_FetchPool_Call struct {
	*mock.Call
}

// FetchPool is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *MockCandlepinClient_Expecter) FetchPool(ctx interface{}, orgID interface{}) *MockCandlepinClient_FetchPool_Call {
	return &MockCandlepinClient_FetchPool_Call{Call: _e.mock.On("FetchPool", ctx, orgID)}
}

func (_c *MockCandlepinClient_FetchPool_Call) Run(run func(ctx context.Context, orgID string)) *MockCandlepinClient_FetchPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchPool_Call) Return(poolDTO *caliri.PoolDTO, err error) *MockCandlepinClient_FetchPool_Call {
	_c.Call.Return(poolDTO, err)
	return _c
}

func (_c *MockCandlepinClient_FetchPool_Call) RunAndReturn(run func(ctx context.Context, orgID string) (*caliri.PoolDTO, error)) *MockCandlepinClient_FetchPool_Call {
	_c.Call.Return(run)
	return _c
}

// FetchProduct provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) FetchProduct(ctx context.Context, orgID string, productID string) (*caliri.ProductDTO, error) {
	ret := _mock.Called(ctx, orgID, productID)

	if len(ret) == 0 {
		panic("no return value specified for FetchProduct")
	}

	var r0 *caliri.ProductDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*caliri.ProductDTO, error)); ok {
		return returnFunc(ctx, orgID, productID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *caliri.ProductDTO); ok {
		r0 = returnFunc(ctx, orgID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.ProductDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, orgID, productID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_FetchProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchProduct'
type MockCandlepinClient_FetchProduct_Call struct {
	*mock.Call
}

// FetchProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - productID string
func (_e *MockCandlepinClient_Expecter) FetchProduct(ctx interface{}, orgID interface{}, productID interface{}) *MockCandlepinClient_FetchProduct_Call {
	return &MockCandlepinClient_FetchProduct_Call{Call: _e.mock.On("FetchProduct", ctx, orgID, productID)}
}

func (_c *MockCandlepinClient_FetchProduct_Call) Run(run func(ctx context.Context, orgID string, productID string)) *MockCandlepinClient_FetchProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_FetchProduct_Call) Return(productDTO *caliri.ProductDTO, err error) *MockCandlepinClient_FetchProduct_Call {
	_c.Call.Return(productDTO, err)
	return _c
}

func (_c *MockCandlepinClient_FetchProduct_Call) RunAndReturn(run func(ctx context.Context, orgID string, productID string) (*caliri.ProductDTO, error)) *MockCandlepinClient_FetchProduct_Call {
	_c.Call.Return(run)
	return _c
}

// ImportManifest provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) ImportManifest(ctx context.Context, filename string) error {
	ret := _mock.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for ImportManifest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, filename)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_ImportManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportManifest'
type MockCandlepinClient_ImportManifest_Call struct {
	*mock.Call
}

// ImportManifest is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
func (_e *MockCandlepinClient_Expecter) ImportManifest(ctx interface{}, filename interface{}) *MockCandlepinClient_ImportManifest_Call {
	return &MockCandlepinClient_ImportManifest_Call{Call: _e.mock.On("ImportManifest", ctx, filename)}
}

func (_c *MockCandlepinClient_ImportManifest_Call) Run(run func(ctx context.Context, filename string)) *MockCandlepinClient_ImportManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_ImportManifest_Call) Return(err error) *MockCandlepinClient_ImportManifest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_ImportManifest_Call) RunAndReturn(run func(ctx context.Context, filename string) error) *MockCandlepinClient_ImportManifest_Call {
	_c.Call.Return(run)
	return _c
}

// ListContents provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) ListContents(ctx context.Context, orgID string) ([]string, []string, error) {
	ret := _mock.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for ListContents")
	}

	var r0 []string
	var r1 []string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, []string, error)); ok {
		return returnFunc(ctx, orgID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) []string); ok {
		r1 = returnFunc(ctx, orgID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, orgID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCandlepinClient_ListContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContents'
type MockCandlepinClient_ListContents_Call struct {
	*mock.Call
}

// ListContents is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *MockCandlepinClient_Expecter) ListContents(ctx interface{}, orgID interface{}) *MockCandlepinClient_ListContents_Call {
	return &MockCandlepinClient_ListContents_Call{Call: _e.mock.On("ListContents", ctx, orgID)}
}

func (_c *MockCandlepinClient_ListContents_Call) Run(run func(ctx context.Context, orgID string)) *MockCandlepinClient_ListContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_ListContents_Call) Return(strings []string, strings1 []string, err error) *MockCandlepinClient_ListContents_Call {
	_c.Call.Return(strings, strings1, err)
	return _c
}

func (_c *MockCandlepinClient_ListContents_Call) RunAndReturn(run func(ctx context.Context, orgID string) ([]string, []string, error)) *MockCandlepinClient_ListContents_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) ListProducts(ctx context.Context, orgID string, productIDs []string) ([]caliri.ProductDTO, error) {
	ret := _mock.Called(ctx, orgID, productIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []caliri.ProductDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) ([]caliri.ProductDTO, error)); ok {
		return returnFunc(ctx, orgID, productIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) []caliri.ProductDTO); ok {
		r0 = returnFunc(ctx, orgID, productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]caliri.ProductDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, orgID, productIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockCandlepinClient_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - productIDs []string
func (_e *MockCandlepinClient_Expecter) ListProducts(ctx interface{}, orgID interface{}, productIDs interface{}) *MockCandlepinClient_ListProducts_Call {
	return &MockCandlepinClient_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx, orgID, productIDs)}
}

func (_c *MockCandlepinClient_ListProducts_Call) Run(run func(ctx context.Context, orgID string, productIDs []string)) *MockCandlepinClient_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_ListProducts_Call) Return(productDTOs []caliri.ProductDTO, err error) *MockCandlepinClient_ListProducts_Call {
	_c.Call.Return(productDTOs, err)
	return _c
}

func (_c *MockCandlepinClient_ListProducts_Call) RunAndReturn(run func(ctx context.Context, orgID string, productIDs []string) ([]caliri.ProductDTO, error)) *MockCandlepinClient_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteContentToEnvironment provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) PromoteContentToEnvironment(ctx context.Context, templateUUID string, repoConfigUUIDs []string) error {
	ret := _mock.Called(ctx, templateUUID, repoConfigUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for PromoteContentToEnvironment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, templateUUID, repoConfigUUIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_PromoteContentToEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteContentToEnvironment'
type MockCandlepinClient_PromoteContentToEnvironment_Call struct {
	*mock.Call
}

// PromoteContentToEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - repoConfigUUIDs []string
func (_e *MockCandlepinClient_Expecter) PromoteContentToEnvironment(ctx interface{}, templateUUID interface{}, repoConfigUUIDs interface{}) *MockCandlepinClient_PromoteContentToEnvironment_Call {
	return &MockCandlepinClient_PromoteContentToEnvironment_Call{Call: _e.mock.On("PromoteContentToEnvironment", ctx, templateUUID, repoConfigUUIDs)}
}

func (_c *MockCandlepinClient_PromoteContentToEnvironment_Call) Run(run func(ctx context.Context, templateUUID string, repoConfigUUIDs []string)) *MockCandlepinClient_PromoteContentToEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_PromoteContentToEnvironment_Call) Return(err error) *MockCandlepinClient_PromoteContentToEnvironment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_PromoteContentToEnvironment_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, repoConfigUUIDs []string) error) *MockCandlepinClient_PromoteContentToEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContentFromProduct provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) RemoveContentFromProduct(ctx context.Context, orgID string, repoConfigUUID string) error {
	ret := _mock.Called(ctx, orgID, repoConfigUUID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContentFromProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, repoConfigUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_RemoveContentFromProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContentFromProduct'
type MockCandlepinClient_RemoveContentFromProduct_Call struct {
	*mock.Call
}

// RemoveContentFromProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - repoConfigUUID string
func (_e *MockCandlepinClient_Expecter) RemoveContentFromProduct(ctx interface{}, orgID interface{}, repoConfigUUID interface{}) *MockCandlepinClient_RemoveContentFromProduct_Call {
	return &MockCandlepinClient_RemoveContentFromProduct_Call{Call: _e.mock.On("RemoveContentFromProduct", ctx, orgID, repoConfigUUID)}
}

func (_c *MockCandlepinClient_RemoveContentFromProduct_Call) Run(run func(ctx context.Context, orgID string, repoConfigUUID string)) *MockCandlepinClient_RemoveContentFromProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_RemoveContentFromProduct_Call) Return(err error) *MockCandlepinClient_RemoveContentFromProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_RemoveContentFromProduct_Call) RunAndReturn(run func(ctx context.Context, orgID string, repoConfigUUID string) error) *MockCandlepinClient_RemoveContentFromProduct_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContentOverrides provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) RemoveContentOverrides(ctx context.Context, templateUUID string, toRemove []caliri.ContentOverrideDTO) error {
	ret := _mock.Called(ctx, templateUUID, toRemove)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContentOverrides")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []caliri.ContentOverrideDTO) error); ok {
		r0 = returnFunc(ctx, templateUUID, toRemove)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_RemoveContentOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContentOverrides'
type MockCandlepinClient_RemoveContentOverrides_Call struct {
	*mock.Call
}

// RemoveContentOverrides is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - toRemove []caliri.ContentOverrideDTO
func (_e *MockCandlepinClient_Expecter) RemoveContentOverrides(ctx interface{}, templateUUID interface{}, toRemove interface{}) *MockCandlepinClient_RemoveContentOverrides_Call {
	return &MockCandlepinClient_RemoveContentOverrides_Call{Call: _e.mock.On("RemoveContentOverrides", ctx, templateUUID, toRemove)}
}

func (_c *MockCandlepinClient_RemoveContentOverrides_Call) Run(run func(ctx context.Context, templateUUID string, toRemove []caliri.ContentOverrideDTO)) *MockCandlepinClient_RemoveContentOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []caliri.ContentOverrideDTO
		if args[2] != nil {
			arg2 = args[2].([]caliri.ContentOverrideDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_RemoveContentOverrides_Call) Return(err error) *MockCandlepinClient_RemoveContentOverrides_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_RemoveContentOverrides_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, toRemove []caliri.ContentOverrideDTO) error) *MockCandlepinClient_RemoveContentOverrides_Call {
	_c.Call.Return(run)
	return _c
}

// RenameEnvironment provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) RenameEnvironment(ctx context.Context, templateUUID string, name string) (*caliri.EnvironmentDTO, error) {
	ret := _mock.Called(ctx, templateUUID, name)

	if len(ret) == 0 {
		panic("no return value specified for RenameEnvironment")
	}

	var r0 *caliri.EnvironmentDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*caliri.EnvironmentDTO, error)); ok {
		return returnFunc(ctx, templateUUID, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *caliri.EnvironmentDTO); ok {
		r0 = returnFunc(ctx, templateUUID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*caliri.EnvironmentDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, templateUUID, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCandlepinClient_RenameEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameEnvironment'
type MockCandlepinClient_RenameEnvironment_Call struct {
	*mock.Call
}

// RenameEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - name string
func (_e *MockCandlepinClient_Expecter) RenameEnvironment(ctx interface{}, templateUUID interface{}, name interface{}) *MockCandlepinClient_RenameEnvironment_Call {
	return &MockCandlepinClient_RenameEnvironment_Call{Call: _e.mock.On("RenameEnvironment", ctx, templateUUID, name)}
}

func (_c *MockCandlepinClient_RenameEnvironment_Call) Run(run func(ctx context.Context, templateUUID string, name string)) *MockCandlepinClient_RenameEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_RenameEnvironment_Call) Return(environmentDTO *caliri.EnvironmentDTO, err error) *MockCandlepinClient_RenameEnvironment_Call {
	_c.Call.Return(environmentDTO, err)
	return _c
}

func (_c *MockCandlepinClient_RenameEnvironment_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, name string) (*caliri.EnvironmentDTO, error)) *MockCandlepinClient_RenameEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContent provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) UpdateContent(ctx context.Context, orgID string, repoConfigUUID string, content caliri.ContentDTO) error {
	ret := _mock.Called(ctx, orgID, repoConfigUUID, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, caliri.ContentDTO) error); ok {
		r0 = returnFunc(ctx, orgID, repoConfigUUID, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_UpdateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContent'
type MockCandlepinClient_UpdateContent_Call struct {
	*mock.Call
}

// UpdateContent is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - repoConfigUUID string
//   - content caliri.ContentDTO
func (_e *MockCandlepinClient_Expecter) UpdateContent(ctx interface{}, orgID interface{}, repoConfigUUID interface{}, content interface{}) *MockCandlepinClient_UpdateContent_Call {
	return &MockCandlepinClient_UpdateContent_Call{Call: _e.mock.On("UpdateContent", ctx, orgID, repoConfigUUID, content)}
}

func (_c *MockCandlepinClient_UpdateContent_Call) Run(run func(ctx context.Context, orgID string, repoConfigUUID string, content caliri.ContentDTO)) *MockCandlepinClient_UpdateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 caliri.ContentDTO
		if args[3] != nil {
			arg3 = args[3].(caliri.ContentDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_UpdateContent_Call) Return(err error) *MockCandlepinClient_UpdateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_UpdateContent_Call) RunAndReturn(run func(ctx context.Context, orgID string, repoConfigUUID string, content caliri.ContentDTO) error) *MockCandlepinClient_UpdateContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContentOverrides provides a mock function for the type MockCandlepinClient
func (_mock *MockCandlepinClient) UpdateContentOverrides(ctx context.Context, templateUUID string, dtos []caliri.ContentOverrideDTO) error {
	ret := _mock.Called(ctx, templateUUID, dtos)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContentOverrides")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []caliri.ContentOverrideDTO) error); ok {
		r0 = returnFunc(ctx, templateUUID, dtos)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCandlepinClient_UpdateContentOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContentOverrides'
type MockCandlepinClient_UpdateContentOverrides_Call struct {
	*mock.Call
}

// UpdateContentOverrides is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - dtos []caliri.ContentOverrideDTO
func (_e *MockCandlepinClient_Expecter) UpdateContentOverrides(ctx interface{}, templateUUID interface{}, dtos interface{}) *MockCandlepinClient_UpdateContentOverrides_Call {
	return &MockCandlepinClient_UpdateContentOverrides_Call{Call: _e.mock.On("UpdateContentOverrides", ctx, templateUUID, dtos)}
}

func (_c *MockCandlepinClient_UpdateContentOverrides_Call) Run(run func(ctx context.Context, templateUUID string, dtos []caliri.ContentOverrideDTO)) *MockCandlepinClient_UpdateContentOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []caliri.ContentOverrideDTO
		if args[2] != nil {
			arg2 = args[2].([]caliri.ContentOverrideDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCandlepinClient_UpdateContentOverrides_Call) Return(err error) *MockCandlepinClient_UpdateContentOverrides_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCandlepinClient_UpdateContentOverrides_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, dtos []caliri.ContentOverrideDTO) error) *MockCandlepinClient_UpdateContentOverrides_Call {
	_c.Call.Return(run)
	return _c
}
