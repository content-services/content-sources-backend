// Code generated by mockery v2.30.1. DO NOT EDIT.

package dao

import mock "github.com/stretchr/testify/mock"

// MockMetricsDao is an autogenerated mock type for the MetricsDao type
type MockMetricsDao struct {
	mock.Mock
}

// OrganizationTotal provides a mock function with given fields:
func (_m *MockMetricsDao) OrganizationTotal() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// PublicRepositoriesFailedIntrospectionCount provides a mock function with given fields:
func (_m *MockMetricsDao) PublicRepositoriesFailedIntrospectionCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RepositoriesCount provides a mock function with given fields:
func (_m *MockMetricsDao) RepositoriesCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RepositoriesIntrospectionCount provides a mock function with given fields: hours, public
func (_m *MockMetricsDao) RepositoriesIntrospectionCount(hours int, public bool) IntrospectionCount {
	ret := _m.Called(hours, public)

	var r0 IntrospectionCount
	if rf, ok := ret.Get(0).(func(int, bool) IntrospectionCount); ok {
		r0 = rf(hours, public)
	} else {
		r0 = ret.Get(0).(IntrospectionCount)
	}

	return r0
}

// RepositoryConfigsCount provides a mock function with given fields:
func (_m *MockMetricsDao) RepositoryConfigsCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewMockMetricsDao creates a new instance of MockMetricsDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsDao {
	mock := &MockMetricsDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
