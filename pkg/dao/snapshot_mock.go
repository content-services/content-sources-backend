// Code generated by mockery v2.20.0. DO NOT EDIT.

package dao

import (
	api "github.com/content-services/content-sources-backend/pkg/api"
	mock "github.com/stretchr/testify/mock"

	models "github.com/content-services/content-sources-backend/pkg/models"
)

// MockSnapshotDao is an autogenerated mock type for the SnapshotDao type
type MockSnapshotDao struct {
	mock.Mock
}

// Create provides a mock function with given fields: snap
func (_m *MockSnapshotDao) Create(snap *models.Snapshot) error {
	ret := _m.Called(snap)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Snapshot) error); ok {
		r0 = rf(snap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: response
func (_m *MockSnapshotDao) List(response api.RepositoryResponse) ([]models.Snapshot, error) {
	ret := _m.Called(response)

	var r0 []models.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(api.RepositoryResponse) ([]models.Snapshot, error)); ok {
		return rf(response)
	}
	if rf, ok := ret.Get(0).(func(api.RepositoryResponse) []models.Snapshot); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(api.RepositoryResponse) error); ok {
		r1 = rf(response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockSnapshotDao interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSnapshotDao creates a new instance of MockSnapshotDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSnapshotDao(t mockConstructorTestingTNewMockSnapshotDao) *MockSnapshotDao {
	mock := &MockSnapshotDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
