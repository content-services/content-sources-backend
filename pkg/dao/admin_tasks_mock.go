// Code generated by mockery v2.20.0. DO NOT EDIT.

package dao

import (
	api "github.com/content-services/content-sources-backend/pkg/api"

	mock "github.com/stretchr/testify/mock"
)

// AdminTaskDao is an autogenerated mock type for the AdminTaskDao type
type MockAdminTaskDao struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: id
func (_m *MockAdminTaskDao) Fetch(id string) (api.AdminTaskInfoResponse, error) {
	ret := _m.Called(id)

	var r0 api.AdminTaskInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (api.AdminTaskInfoResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) api.AdminTaskInfoResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(api.AdminTaskInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: pageData, filterData
func (_m *MockAdminTaskDao) List(pageData api.PaginationData, filterData api.AdminTaskFilterData) (api.AdminTaskInfoCollectionResponse, int64, error) {
	ret := _m.Called(pageData, filterData)

	var r0 api.AdminTaskInfoCollectionResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(api.PaginationData, api.AdminTaskFilterData) (api.AdminTaskInfoCollectionResponse, int64, error)); ok {
		return rf(pageData, filterData)
	}
	if rf, ok := ret.Get(0).(func(api.PaginationData, api.AdminTaskFilterData) api.AdminTaskInfoCollectionResponse); ok {
		r0 = rf(pageData, filterData)
	} else {
		r0 = ret.Get(0).(api.AdminTaskInfoCollectionResponse)
	}

	if rf, ok := ret.Get(1).(func(api.PaginationData, api.AdminTaskFilterData) int64); ok {
		r1 = rf(pageData, filterData)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(api.PaginationData, api.AdminTaskFilterData) error); ok {
		r2 = rf(pageData, filterData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewAdminTaskDao interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminTaskDao creates a new instance of AdminTaskDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAdminTaskDao(t mockConstructorTestingTNewAdminTaskDao) *MockAdminTaskDao {
	mock := &MockAdminTaskDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
