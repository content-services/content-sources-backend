// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dao

import (
	"context"
	"encoding/json"

	"github.com/content-services/content-sources-backend/pkg/api"
	"github.com/content-services/content-sources-backend/pkg/models"
	"github.com/content-services/tang/pkg/tangy"
	"github.com/content-services/yummy/pkg/yum"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepositoryConfigDao creates a new instance of MockRepositoryConfigDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryConfigDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryConfigDao {
	mock := &MockRepositoryConfigDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepositoryConfigDao is an autogenerated mock type for the RepositoryConfigDao type
type MockRepositoryConfigDao struct {
	mock.Mock
}

type MockRepositoryConfigDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryConfigDao) EXPECT() *MockRepositoryConfigDao_Expecter {
	return &MockRepositoryConfigDao_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) BulkCreate(ctx context.Context, newRepositories []api.RepositoryRequest) ([]api.RepositoryResponse, []error) {
	ret := _mock.Called(ctx, newRepositories)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 []api.RepositoryResponse
	var r1 []error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []api.RepositoryRequest) ([]api.RepositoryResponse, []error)); ok {
		return returnFunc(ctx, newRepositories)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []api.RepositoryRequest) []api.RepositoryResponse); ok {
		r0 = returnFunc(ctx, newRepositories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.RepositoryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []api.RepositoryRequest) []error); ok {
		r1 = returnFunc(ctx, newRepositories)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}
	return r0, r1
}

// MockRepositoryConfigDao_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type MockRepositoryConfigDao_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - newRepositories []api.RepositoryRequest
func (_e *MockRepositoryConfigDao_Expecter) BulkCreate(ctx interface{}, newRepositories interface{}) *MockRepositoryConfigDao_BulkCreate_Call {
	return &MockRepositoryConfigDao_BulkCreate_Call{Call: _e.mock.On("BulkCreate", ctx, newRepositories)}
}

func (_c *MockRepositoryConfigDao_BulkCreate_Call) Run(run func(ctx context.Context, newRepositories []api.RepositoryRequest)) *MockRepositoryConfigDao_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []api.RepositoryRequest
		if args[1] != nil {
			arg1 = args[1].([]api.RepositoryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_BulkCreate_Call) Return(repositoryResponses []api.RepositoryResponse, errs []error) *MockRepositoryConfigDao_BulkCreate_Call {
	_c.Call.Return(repositoryResponses, errs)
	return _c
}

func (_c *MockRepositoryConfigDao_BulkCreate_Call) RunAndReturn(run func(ctx context.Context, newRepositories []api.RepositoryRequest) ([]api.RepositoryResponse, []error)) *MockRepositoryConfigDao_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDelete provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) BulkDelete(ctx context.Context, orgID string, uuids []string) []error {
	ret := _mock.Called(ctx, orgID, uuids)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 []error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) []error); ok {
		r0 = returnFunc(ctx, orgID, uuids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}
	return r0
}

// MockRepositoryConfigDao_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type MockRepositoryConfigDao_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuids []string
func (_e *MockRepositoryConfigDao_Expecter) BulkDelete(ctx interface{}, orgID interface{}, uuids interface{}) *MockRepositoryConfigDao_BulkDelete_Call {
	return &MockRepositoryConfigDao_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, orgID, uuids)}
}

func (_c *MockRepositoryConfigDao_BulkDelete_Call) Run(run func(ctx context.Context, orgID string, uuids []string)) *MockRepositoryConfigDao_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_BulkDelete_Call) Return(errs []error) *MockRepositoryConfigDao_BulkDelete_Call {
	_c.Call.Return(errs)
	return _c
}

func (_c *MockRepositoryConfigDao_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuids []string) []error) *MockRepositoryConfigDao_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkExport provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) BulkExport(ctx context.Context, orgID string, reposToExport api.RepositoryExportRequest) ([]api.RepositoryExportResponse, error) {
	ret := _mock.Called(ctx, orgID, reposToExport)

	if len(ret) == 0 {
		panic("no return value specified for BulkExport")
	}

	var r0 []api.RepositoryExportResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.RepositoryExportRequest) ([]api.RepositoryExportResponse, error)); ok {
		return returnFunc(ctx, orgID, reposToExport)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.RepositoryExportRequest) []api.RepositoryExportResponse); ok {
		r0 = returnFunc(ctx, orgID, reposToExport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.RepositoryExportResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.RepositoryExportRequest) error); ok {
		r1 = returnFunc(ctx, orgID, reposToExport)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_BulkExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkExport'
type MockRepositoryConfigDao_BulkExport_Call struct {
	*mock.Call
}

// BulkExport is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - reposToExport api.RepositoryExportRequest
func (_e *MockRepositoryConfigDao_Expecter) BulkExport(ctx interface{}, orgID interface{}, reposToExport interface{}) *MockRepositoryConfigDao_BulkExport_Call {
	return &MockRepositoryConfigDao_BulkExport_Call{Call: _e.mock.On("BulkExport", ctx, orgID, reposToExport)}
}

func (_c *MockRepositoryConfigDao_BulkExport_Call) Run(run func(ctx context.Context, orgID string, reposToExport api.RepositoryExportRequest)) *MockRepositoryConfigDao_BulkExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.RepositoryExportRequest
		if args[2] != nil {
			arg2 = args[2].(api.RepositoryExportRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_BulkExport_Call) Return(repositoryExportResponses []api.RepositoryExportResponse, err error) *MockRepositoryConfigDao_BulkExport_Call {
	_c.Call.Return(repositoryExportResponses, err)
	return _c
}

func (_c *MockRepositoryConfigDao_BulkExport_Call) RunAndReturn(run func(ctx context.Context, orgID string, reposToExport api.RepositoryExportRequest) ([]api.RepositoryExportResponse, error)) *MockRepositoryConfigDao_BulkExport_Call {
	_c.Call.Return(run)
	return _c
}

// BulkImport provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) BulkImport(ctx context.Context, reposToImport []api.RepositoryRequest) ([]api.RepositoryImportResponse, []error) {
	ret := _mock.Called(ctx, reposToImport)

	if len(ret) == 0 {
		panic("no return value specified for BulkImport")
	}

	var r0 []api.RepositoryImportResponse
	var r1 []error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []api.RepositoryRequest) ([]api.RepositoryImportResponse, []error)); ok {
		return returnFunc(ctx, reposToImport)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []api.RepositoryRequest) []api.RepositoryImportResponse); ok {
		r0 = returnFunc(ctx, reposToImport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.RepositoryImportResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []api.RepositoryRequest) []error); ok {
		r1 = returnFunc(ctx, reposToImport)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}
	return r0, r1
}

// MockRepositoryConfigDao_BulkImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkImport'
type MockRepositoryConfigDao_BulkImport_Call struct {
	*mock.Call
}

// BulkImport is a helper method to define mock.On call
//   - ctx context.Context
//   - reposToImport []api.RepositoryRequest
func (_e *MockRepositoryConfigDao_Expecter) BulkImport(ctx interface{}, reposToImport interface{}) *MockRepositoryConfigDao_BulkImport_Call {
	return &MockRepositoryConfigDao_BulkImport_Call{Call: _e.mock.On("BulkImport", ctx, reposToImport)}
}

func (_c *MockRepositoryConfigDao_BulkImport_Call) Run(run func(ctx context.Context, reposToImport []api.RepositoryRequest)) *MockRepositoryConfigDao_BulkImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []api.RepositoryRequest
		if args[1] != nil {
			arg1 = args[1].([]api.RepositoryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_BulkImport_Call) Return(repositoryImportResponses []api.RepositoryImportResponse, errs []error) *MockRepositoryConfigDao_BulkImport_Call {
	_c.Call.Return(repositoryImportResponses, errs)
	return _c
}

func (_c *MockRepositoryConfigDao_BulkImport_Call) RunAndReturn(run func(ctx context.Context, reposToImport []api.RepositoryRequest) ([]api.RepositoryImportResponse, []error)) *MockRepositoryConfigDao_BulkImport_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) Create(ctx context.Context, newRepo api.RepositoryRequest) (api.RepositoryResponse, error) {
	ret := _mock.Called(ctx, newRepo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 api.RepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.RepositoryRequest) (api.RepositoryResponse, error)); ok {
		return returnFunc(ctx, newRepo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.RepositoryRequest) api.RepositoryResponse); ok {
		r0 = returnFunc(ctx, newRepo)
	} else {
		r0 = ret.Get(0).(api.RepositoryResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, api.RepositoryRequest) error); ok {
		r1 = returnFunc(ctx, newRepo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepositoryConfigDao_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - newRepo api.RepositoryRequest
func (_e *MockRepositoryConfigDao_Expecter) Create(ctx interface{}, newRepo interface{}) *MockRepositoryConfigDao_Create_Call {
	return &MockRepositoryConfigDao_Create_Call{Call: _e.mock.On("Create", ctx, newRepo)}
}

func (_c *MockRepositoryConfigDao_Create_Call) Run(run func(ctx context.Context, newRepo api.RepositoryRequest)) *MockRepositoryConfigDao_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.RepositoryRequest
		if args[1] != nil {
			arg1 = args[1].(api.RepositoryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_Create_Call) Return(repositoryResponse api.RepositoryResponse, err error) *MockRepositoryConfigDao_Create_Call {
	_c.Call.Return(repositoryResponse, err)
	return _c
}

func (_c *MockRepositoryConfigDao_Create_Call) RunAndReturn(run func(ctx context.Context, newRepo api.RepositoryRequest) (api.RepositoryResponse, error)) *MockRepositoryConfigDao_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) Delete(ctx context.Context, orgID string, uuid string) error {
	ret := _mock.Called(ctx, orgID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryConfigDao_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepositoryConfigDao_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
func (_e *MockRepositoryConfigDao_Expecter) Delete(ctx interface{}, orgID interface{}, uuid interface{}) *MockRepositoryConfigDao_Delete_Call {
	return &MockRepositoryConfigDao_Delete_Call{Call: _e.mock.On("Delete", ctx, orgID, uuid)}
}

func (_c *MockRepositoryConfigDao_Delete_Call) Run(run func(ctx context.Context, orgID string, uuid string)) *MockRepositoryConfigDao_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_Delete_Call) Return(err error) *MockRepositoryConfigDao_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryConfigDao_Delete_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string) error) *MockRepositoryConfigDao_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) Fetch(ctx context.Context, orgID string, uuid string) (api.RepositoryResponse, error) {
	ret := _mock.Called(ctx, orgID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 api.RepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (api.RepositoryResponse, error)); ok {
		return returnFunc(ctx, orgID, uuid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) api.RepositoryResponse); ok {
		r0 = returnFunc(ctx, orgID, uuid)
	} else {
		r0 = ret.Get(0).(api.RepositoryResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, orgID, uuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockRepositoryConfigDao_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
func (_e *MockRepositoryConfigDao_Expecter) Fetch(ctx interface{}, orgID interface{}, uuid interface{}) *MockRepositoryConfigDao_Fetch_Call {
	return &MockRepositoryConfigDao_Fetch_Call{Call: _e.mock.On("Fetch", ctx, orgID, uuid)}
}

func (_c *MockRepositoryConfigDao_Fetch_Call) Run(run func(ctx context.Context, orgID string, uuid string)) *MockRepositoryConfigDao_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_Fetch_Call) Return(repositoryResponse api.RepositoryResponse, err error) *MockRepositoryConfigDao_Fetch_Call {
	_c.Call.Return(repositoryResponse, err)
	return _c
}

func (_c *MockRepositoryConfigDao_Fetch_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string) (api.RepositoryResponse, error)) *MockRepositoryConfigDao_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// FetchByRepoUuid provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) FetchByRepoUuid(ctx context.Context, orgID string, repoUuid string) (api.RepositoryResponse, error) {
	ret := _mock.Called(ctx, orgID, repoUuid)

	if len(ret) == 0 {
		panic("no return value specified for FetchByRepoUuid")
	}

	var r0 api.RepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (api.RepositoryResponse, error)); ok {
		return returnFunc(ctx, orgID, repoUuid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) api.RepositoryResponse); ok {
		r0 = returnFunc(ctx, orgID, repoUuid)
	} else {
		r0 = ret.Get(0).(api.RepositoryResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, orgID, repoUuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_FetchByRepoUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchByRepoUuid'
type MockRepositoryConfigDao_FetchByRepoUuid_Call struct {
	*mock.Call
}

// FetchByRepoUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - repoUuid string
func (_e *MockRepositoryConfigDao_Expecter) FetchByRepoUuid(ctx interface{}, orgID interface{}, repoUuid interface{}) *MockRepositoryConfigDao_FetchByRepoUuid_Call {
	return &MockRepositoryConfigDao_FetchByRepoUuid_Call{Call: _e.mock.On("FetchByRepoUuid", ctx, orgID, repoUuid)}
}

func (_c *MockRepositoryConfigDao_FetchByRepoUuid_Call) Run(run func(ctx context.Context, orgID string, repoUuid string)) *MockRepositoryConfigDao_FetchByRepoUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_FetchByRepoUuid_Call) Return(repositoryResponse api.RepositoryResponse, err error) *MockRepositoryConfigDao_FetchByRepoUuid_Call {
	_c.Call.Return(repositoryResponse, err)
	return _c
}

func (_c *MockRepositoryConfigDao_FetchByRepoUuid_Call) RunAndReturn(run func(ctx context.Context, orgID string, repoUuid string) (api.RepositoryResponse, error)) *MockRepositoryConfigDao_FetchByRepoUuid_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRepoUUIDsByURLs provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) FetchRepoUUIDsByURLs(ctx context.Context, orgID string, repoURLs []string) ([]string, error) {
	ret := _mock.Called(ctx, orgID, repoURLs)

	if len(ret) == 0 {
		panic("no return value specified for FetchRepoUUIDsByURLs")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return returnFunc(ctx, orgID, repoURLs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = returnFunc(ctx, orgID, repoURLs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, orgID, repoURLs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRepoUUIDsByURLs'
type MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call struct {
	*mock.Call
}

// FetchRepoUUIDsByURLs is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - repoURLs []string
func (_e *MockRepositoryConfigDao_Expecter) FetchRepoUUIDsByURLs(ctx interface{}, orgID interface{}, repoURLs interface{}) *MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call {
	return &MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call{Call: _e.mock.On("FetchRepoUUIDsByURLs", ctx, orgID, repoURLs)}
}

func (_c *MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call) Run(run func(ctx context.Context, orgID string, repoURLs []string)) *MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call) Return(strings []string, err error) *MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call) RunAndReturn(run func(ctx context.Context, orgID string, repoURLs []string) ([]string, error)) *MockRepositoryConfigDao_FetchRepoUUIDsByURLs_Call {
	_c.Call.Return(run)
	return _c
}

// FetchWithoutOrgID provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) FetchWithoutOrgID(ctx context.Context, uuid string, includeSoftDel bool) (api.RepositoryResponse, error) {
	ret := _mock.Called(ctx, uuid, includeSoftDel)

	if len(ret) == 0 {
		panic("no return value specified for FetchWithoutOrgID")
	}

	var r0 api.RepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (api.RepositoryResponse, error)); ok {
		return returnFunc(ctx, uuid, includeSoftDel)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) api.RepositoryResponse); ok {
		r0 = returnFunc(ctx, uuid, includeSoftDel)
	} else {
		r0 = ret.Get(0).(api.RepositoryResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, uuid, includeSoftDel)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_FetchWithoutOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchWithoutOrgID'
type MockRepositoryConfigDao_FetchWithoutOrgID_Call struct {
	*mock.Call
}

// FetchWithoutOrgID is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - includeSoftDel bool
func (_e *MockRepositoryConfigDao_Expecter) FetchWithoutOrgID(ctx interface{}, uuid interface{}, includeSoftDel interface{}) *MockRepositoryConfigDao_FetchWithoutOrgID_Call {
	return &MockRepositoryConfigDao_FetchWithoutOrgID_Call{Call: _e.mock.On("FetchWithoutOrgID", ctx, uuid, includeSoftDel)}
}

func (_c *MockRepositoryConfigDao_FetchWithoutOrgID_Call) Run(run func(ctx context.Context, uuid string, includeSoftDel bool)) *MockRepositoryConfigDao_FetchWithoutOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_FetchWithoutOrgID_Call) Return(repositoryResponse api.RepositoryResponse, err error) *MockRepositoryConfigDao_FetchWithoutOrgID_Call {
	_c.Call.Return(repositoryResponse, err)
	return _c
}

func (_c *MockRepositoryConfigDao_FetchWithoutOrgID_Call) RunAndReturn(run func(ctx context.Context, uuid string, includeSoftDel bool) (api.RepositoryResponse, error)) *MockRepositoryConfigDao_FetchWithoutOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnly_FetchRepoConfigsForRepoUUID provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) InternalOnly_FetchRepoConfigsForRepoUUID(ctx context.Context, uuid string) []api.RepositoryResponse {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnly_FetchRepoConfigsForRepoUUID")
	}

	var r0 []api.RepositoryResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []api.RepositoryResponse); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.RepositoryResponse)
		}
	}
	return r0
}

// MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnly_FetchRepoConfigsForRepoUUID'
type MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call struct {
	*mock.Call
}

// InternalOnly_FetchRepoConfigsForRepoUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockRepositoryConfigDao_Expecter) InternalOnly_FetchRepoConfigsForRepoUUID(ctx interface{}, uuid interface{}) *MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call {
	return &MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call{Call: _e.mock.On("InternalOnly_FetchRepoConfigsForRepoUUID", ctx, uuid)}
}

func (_c *MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call) Run(run func(ctx context.Context, uuid string)) *MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call) Return(repositoryResponses []api.RepositoryResponse) *MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call {
	_c.Call.Return(repositoryResponses)
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call) RunAndReturn(run func(ctx context.Context, uuid string) []api.RepositoryResponse) *MockRepositoryConfigDao_InternalOnly_FetchRepoConfigsForRepoUUID_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnly_IncrementFailedSnapshotCount provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) InternalOnly_IncrementFailedSnapshotCount(ctx context.Context, rcUuid string) error {
	ret := _mock.Called(ctx, rcUuid)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnly_IncrementFailedSnapshotCount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, rcUuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnly_IncrementFailedSnapshotCount'
type MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call struct {
	*mock.Call
}

// InternalOnly_IncrementFailedSnapshotCount is a helper method to define mock.On call
//   - ctx context.Context
//   - rcUuid string
func (_e *MockRepositoryConfigDao_Expecter) InternalOnly_IncrementFailedSnapshotCount(ctx interface{}, rcUuid interface{}) *MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call {
	return &MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call{Call: _e.mock.On("InternalOnly_IncrementFailedSnapshotCount", ctx, rcUuid)}
}

func (_c *MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call) Run(run func(ctx context.Context, rcUuid string)) *MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call) Return(err error) *MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call) RunAndReturn(run func(ctx context.Context, rcUuid string) error) *MockRepositoryConfigDao_InternalOnly_IncrementFailedSnapshotCount_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnly_ListReposToSnapshot provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) InternalOnly_ListReposToSnapshot(ctx context.Context, filter *ListRepoFilter) ([]models.RepositoryConfiguration, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnly_ListReposToSnapshot")
	}

	var r0 []models.RepositoryConfiguration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListRepoFilter) ([]models.RepositoryConfiguration, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListRepoFilter) []models.RepositoryConfiguration); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RepositoryConfiguration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ListRepoFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnly_ListReposToSnapshot'
type MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call struct {
	*mock.Call
}

// InternalOnly_ListReposToSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *ListRepoFilter
func (_e *MockRepositoryConfigDao_Expecter) InternalOnly_ListReposToSnapshot(ctx interface{}, filter interface{}) *MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call {
	return &MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call{Call: _e.mock.On("InternalOnly_ListReposToSnapshot", ctx, filter)}
}

func (_c *MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call) Run(run func(ctx context.Context, filter *ListRepoFilter)) *MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ListRepoFilter
		if args[1] != nil {
			arg1 = args[1].(*ListRepoFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call) Return(repositoryConfigurations []models.RepositoryConfiguration, err error) *MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call {
	_c.Call.Return(repositoryConfigurations, err)
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call) RunAndReturn(run func(ctx context.Context, filter *ListRepoFilter) ([]models.RepositoryConfiguration, error)) *MockRepositoryConfigDao_InternalOnly_ListReposToSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnly_RefreshPredefinedSnapshotRepo provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) InternalOnly_RefreshPredefinedSnapshotRepo(ctx context.Context, request api.RepositoryRequest, label string, featureName string) (*api.RepositoryResponse, error) {
	ret := _mock.Called(ctx, request, label, featureName)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnly_RefreshPredefinedSnapshotRepo")
	}

	var r0 *api.RepositoryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.RepositoryRequest, string, string) (*api.RepositoryResponse, error)); ok {
		return returnFunc(ctx, request, label, featureName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.RepositoryRequest, string, string) *api.RepositoryResponse); ok {
		r0 = returnFunc(ctx, request, label, featureName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.RepositoryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, api.RepositoryRequest, string, string) error); ok {
		r1 = returnFunc(ctx, request, label, featureName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnly_RefreshPredefinedSnapshotRepo'
type MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call struct {
	*mock.Call
}

// InternalOnly_RefreshPredefinedSnapshotRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - request api.RepositoryRequest
//   - label string
//   - featureName string
func (_e *MockRepositoryConfigDao_Expecter) InternalOnly_RefreshPredefinedSnapshotRepo(ctx interface{}, request interface{}, label interface{}, featureName interface{}) *MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call {
	return &MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call{Call: _e.mock.On("InternalOnly_RefreshPredefinedSnapshotRepo", ctx, request, label, featureName)}
}

func (_c *MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call) Run(run func(ctx context.Context, request api.RepositoryRequest, label string, featureName string)) *MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.RepositoryRequest
		if args[1] != nil {
			arg1 = args[1].(api.RepositoryRequest)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call) Return(repositoryResponse *api.RepositoryResponse, err error) *MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call {
	_c.Call.Return(repositoryResponse, err)
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call) RunAndReturn(run func(ctx context.Context, request api.RepositoryRequest, label string, featureName string) (*api.RepositoryResponse, error)) *MockRepositoryConfigDao_InternalOnly_RefreshPredefinedSnapshotRepo_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnly_ResetFailedSnapshotCount provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) InternalOnly_ResetFailedSnapshotCount(ctx context.Context, rcUuid string) error {
	ret := _mock.Called(ctx, rcUuid)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnly_ResetFailedSnapshotCount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, rcUuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnly_ResetFailedSnapshotCount'
type MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call struct {
	*mock.Call
}

// InternalOnly_ResetFailedSnapshotCount is a helper method to define mock.On call
//   - ctx context.Context
//   - rcUuid string
func (_e *MockRepositoryConfigDao_Expecter) InternalOnly_ResetFailedSnapshotCount(ctx interface{}, rcUuid interface{}) *MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call {
	return &MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call{Call: _e.mock.On("InternalOnly_ResetFailedSnapshotCount", ctx, rcUuid)}
}

func (_c *MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call) Run(run func(ctx context.Context, rcUuid string)) *MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call) Return(err error) *MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call) RunAndReturn(run func(ctx context.Context, rcUuid string) error) *MockRepositoryConfigDao_InternalOnly_ResetFailedSnapshotCount_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) List(ctx context.Context, orgID string, paginationData api.PaginationData, filterData api.FilterData) (api.RepositoryCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, orgID, paginationData, filterData)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.RepositoryCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.PaginationData, api.FilterData) (api.RepositoryCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, orgID, paginationData, filterData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.PaginationData, api.FilterData) api.RepositoryCollectionResponse); ok {
		r0 = returnFunc(ctx, orgID, paginationData, filterData)
	} else {
		r0 = ret.Get(0).(api.RepositoryCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.PaginationData, api.FilterData) int64); ok {
		r1 = returnFunc(ctx, orgID, paginationData, filterData)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, api.PaginationData, api.FilterData) error); ok {
		r2 = returnFunc(ctx, orgID, paginationData, filterData)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoryConfigDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepositoryConfigDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - paginationData api.PaginationData
//   - filterData api.FilterData
func (_e *MockRepositoryConfigDao_Expecter) List(ctx interface{}, orgID interface{}, paginationData interface{}, filterData interface{}) *MockRepositoryConfigDao_List_Call {
	return &MockRepositoryConfigDao_List_Call{Call: _e.mock.On("List", ctx, orgID, paginationData, filterData)}
}

func (_c *MockRepositoryConfigDao_List_Call) Run(run func(ctx context.Context, orgID string, paginationData api.PaginationData, filterData api.FilterData)) *MockRepositoryConfigDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.PaginationData
		if args[2] != nil {
			arg2 = args[2].(api.PaginationData)
		}
		var arg3 api.FilterData
		if args[3] != nil {
			arg3 = args[3].(api.FilterData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_List_Call) Return(repositoryCollectionResponse api.RepositoryCollectionResponse, n int64, err error) *MockRepositoryConfigDao_List_Call {
	_c.Call.Return(repositoryCollectionResponse, n, err)
	return _c
}

func (_c *MockRepositoryConfigDao_List_Call) RunAndReturn(run func(ctx context.Context, orgID string, paginationData api.PaginationData, filterData api.FilterData) (api.RepositoryCollectionResponse, int64, error)) *MockRepositoryConfigDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListReposWithOutdatedSnapshots provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) ListReposWithOutdatedSnapshots(ctx context.Context, olderThanDays int) ([]models.RepositoryConfiguration, error) {
	ret := _mock.Called(ctx, olderThanDays)

	if len(ret) == 0 {
		panic("no return value specified for ListReposWithOutdatedSnapshots")
	}

	var r0 []models.RepositoryConfiguration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]models.RepositoryConfiguration, error)); ok {
		return returnFunc(ctx, olderThanDays)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []models.RepositoryConfiguration); ok {
		r0 = returnFunc(ctx, olderThanDays)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RepositoryConfiguration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, olderThanDays)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReposWithOutdatedSnapshots'
type MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call struct {
	*mock.Call
}

// ListReposWithOutdatedSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - olderThanDays int
func (_e *MockRepositoryConfigDao_Expecter) ListReposWithOutdatedSnapshots(ctx interface{}, olderThanDays interface{}) *MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call {
	return &MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call{Call: _e.mock.On("ListReposWithOutdatedSnapshots", ctx, olderThanDays)}
}

func (_c *MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call) Run(run func(ctx context.Context, olderThanDays int)) *MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call) Return(repositoryConfigurations []models.RepositoryConfiguration, err error) *MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call {
	_c.Call.Return(repositoryConfigurations, err)
	return _c
}

func (_c *MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call) RunAndReturn(run func(ctx context.Context, olderThanDays int) ([]models.RepositoryConfiguration, error)) *MockRepositoryConfigDao_ListReposWithOutdatedSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// SavePublicRepos provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) SavePublicRepos(ctx context.Context, urls []string) error {
	ret := _mock.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for SavePublicRepos")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctx, urls)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryConfigDao_SavePublicRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePublicRepos'
type MockRepositoryConfigDao_SavePublicRepos_Call struct {
	*mock.Call
}

// SavePublicRepos is a helper method to define mock.On call
//   - ctx context.Context
//   - urls []string
func (_e *MockRepositoryConfigDao_Expecter) SavePublicRepos(ctx interface{}, urls interface{}) *MockRepositoryConfigDao_SavePublicRepos_Call {
	return &MockRepositoryConfigDao_SavePublicRepos_Call{Call: _e.mock.On("SavePublicRepos", ctx, urls)}
}

func (_c *MockRepositoryConfigDao_SavePublicRepos_Call) Run(run func(ctx context.Context, urls []string)) *MockRepositoryConfigDao_SavePublicRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_SavePublicRepos_Call) Return(err error) *MockRepositoryConfigDao_SavePublicRepos_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryConfigDao_SavePublicRepos_Call) RunAndReturn(run func(ctx context.Context, urls []string) error) *MockRepositoryConfigDao_SavePublicRepos_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDelete provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) SoftDelete(ctx context.Context, orgID string, uuid string) error {
	ret := _mock.Called(ctx, orgID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryConfigDao_SoftDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDelete'
type MockRepositoryConfigDao_SoftDelete_Call struct {
	*mock.Call
}

// SoftDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
func (_e *MockRepositoryConfigDao_Expecter) SoftDelete(ctx interface{}, orgID interface{}, uuid interface{}) *MockRepositoryConfigDao_SoftDelete_Call {
	return &MockRepositoryConfigDao_SoftDelete_Call{Call: _e.mock.On("SoftDelete", ctx, orgID, uuid)}
}

func (_c *MockRepositoryConfigDao_SoftDelete_Call) Run(run func(ctx context.Context, orgID string, uuid string)) *MockRepositoryConfigDao_SoftDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_SoftDelete_Call) Return(err error) *MockRepositoryConfigDao_SoftDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryConfigDao_SoftDelete_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string) error) *MockRepositoryConfigDao_SoftDelete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) Update(ctx context.Context, orgID string, uuid string, repoParams api.RepositoryUpdateRequest) (bool, error) {
	ret := _mock.Called(ctx, orgID, uuid, repoParams)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, api.RepositoryUpdateRequest) (bool, error)); ok {
		return returnFunc(ctx, orgID, uuid, repoParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, api.RepositoryUpdateRequest) bool); ok {
		r0 = returnFunc(ctx, orgID, uuid, repoParams)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, api.RepositoryUpdateRequest) error); ok {
		r1 = returnFunc(ctx, orgID, uuid, repoParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepositoryConfigDao_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
//   - repoParams api.RepositoryUpdateRequest
func (_e *MockRepositoryConfigDao_Expecter) Update(ctx interface{}, orgID interface{}, uuid interface{}, repoParams interface{}) *MockRepositoryConfigDao_Update_Call {
	return &MockRepositoryConfigDao_Update_Call{Call: _e.mock.On("Update", ctx, orgID, uuid, repoParams)}
}

func (_c *MockRepositoryConfigDao_Update_Call) Run(run func(ctx context.Context, orgID string, uuid string, repoParams api.RepositoryUpdateRequest)) *MockRepositoryConfigDao_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 api.RepositoryUpdateRequest
		if args[3] != nil {
			arg3 = args[3].(api.RepositoryUpdateRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_Update_Call) Return(b bool, err error) *MockRepositoryConfigDao_Update_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepositoryConfigDao_Update_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string, repoParams api.RepositoryUpdateRequest) (bool, error)) *MockRepositoryConfigDao_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastSnapshot provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) UpdateLastSnapshot(ctx context.Context, orgID string, repoConfigUUID string, snapUUID string) error {
	ret := _mock.Called(ctx, orgID, repoConfigUUID, snapUUID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastSnapshot")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, repoConfigUUID, snapUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryConfigDao_UpdateLastSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastSnapshot'
type MockRepositoryConfigDao_UpdateLastSnapshot_Call struct {
	*mock.Call
}

// UpdateLastSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - repoConfigUUID string
//   - snapUUID string
func (_e *MockRepositoryConfigDao_Expecter) UpdateLastSnapshot(ctx interface{}, orgID interface{}, repoConfigUUID interface{}, snapUUID interface{}) *MockRepositoryConfigDao_UpdateLastSnapshot_Call {
	return &MockRepositoryConfigDao_UpdateLastSnapshot_Call{Call: _e.mock.On("UpdateLastSnapshot", ctx, orgID, repoConfigUUID, snapUUID)}
}

func (_c *MockRepositoryConfigDao_UpdateLastSnapshot_Call) Run(run func(ctx context.Context, orgID string, repoConfigUUID string, snapUUID string)) *MockRepositoryConfigDao_UpdateLastSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_UpdateLastSnapshot_Call) Return(err error) *MockRepositoryConfigDao_UpdateLastSnapshot_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryConfigDao_UpdateLastSnapshot_Call) RunAndReturn(run func(ctx context.Context, orgID string, repoConfigUUID string, snapUUID string) error) *MockRepositoryConfigDao_UpdateLastSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastSnapshotTask provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) UpdateLastSnapshotTask(ctx context.Context, taskUUID string, orgID string, repoUUID string) error {
	ret := _mock.Called(ctx, taskUUID, orgID, repoUUID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastSnapshotTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, taskUUID, orgID, repoUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryConfigDao_UpdateLastSnapshotTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastSnapshotTask'
type MockRepositoryConfigDao_UpdateLastSnapshotTask_Call struct {
	*mock.Call
}

// UpdateLastSnapshotTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskUUID string
//   - orgID string
//   - repoUUID string
func (_e *MockRepositoryConfigDao_Expecter) UpdateLastSnapshotTask(ctx interface{}, taskUUID interface{}, orgID interface{}, repoUUID interface{}) *MockRepositoryConfigDao_UpdateLastSnapshotTask_Call {
	return &MockRepositoryConfigDao_UpdateLastSnapshotTask_Call{Call: _e.mock.On("UpdateLastSnapshotTask", ctx, taskUUID, orgID, repoUUID)}
}

func (_c *MockRepositoryConfigDao_UpdateLastSnapshotTask_Call) Run(run func(ctx context.Context, taskUUID string, orgID string, repoUUID string)) *MockRepositoryConfigDao_UpdateLastSnapshotTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_UpdateLastSnapshotTask_Call) Return(err error) *MockRepositoryConfigDao_UpdateLastSnapshotTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryConfigDao_UpdateLastSnapshotTask_Call) RunAndReturn(run func(ctx context.Context, taskUUID string, orgID string, repoUUID string) error) *MockRepositoryConfigDao_UpdateLastSnapshotTask_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateParameters provides a mock function for the type MockRepositoryConfigDao
func (_mock *MockRepositoryConfigDao) ValidateParameters(ctx context.Context, orgId string, params api.RepositoryValidationRequest, excludedUUIDS []string) (api.RepositoryValidationResponse, error) {
	ret := _mock.Called(ctx, orgId, params, excludedUUIDS)

	if len(ret) == 0 {
		panic("no return value specified for ValidateParameters")
	}

	var r0 api.RepositoryValidationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.RepositoryValidationRequest, []string) (api.RepositoryValidationResponse, error)); ok {
		return returnFunc(ctx, orgId, params, excludedUUIDS)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.RepositoryValidationRequest, []string) api.RepositoryValidationResponse); ok {
		r0 = returnFunc(ctx, orgId, params, excludedUUIDS)
	} else {
		r0 = ret.Get(0).(api.RepositoryValidationResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.RepositoryValidationRequest, []string) error); ok {
		r1 = returnFunc(ctx, orgId, params, excludedUUIDS)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryConfigDao_ValidateParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateParameters'
type MockRepositoryConfigDao_ValidateParameters_Call struct {
	*mock.Call
}

// ValidateParameters is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - params api.RepositoryValidationRequest
//   - excludedUUIDS []string
func (_e *MockRepositoryConfigDao_Expecter) ValidateParameters(ctx interface{}, orgId interface{}, params interface{}, excludedUUIDS interface{}) *MockRepositoryConfigDao_ValidateParameters_Call {
	return &MockRepositoryConfigDao_ValidateParameters_Call{Call: _e.mock.On("ValidateParameters", ctx, orgId, params, excludedUUIDS)}
}

func (_c *MockRepositoryConfigDao_ValidateParameters_Call) Run(run func(ctx context.Context, orgId string, params api.RepositoryValidationRequest, excludedUUIDS []string)) *MockRepositoryConfigDao_ValidateParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.RepositoryValidationRequest
		if args[2] != nil {
			arg2 = args[2].(api.RepositoryValidationRequest)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRepositoryConfigDao_ValidateParameters_Call) Return(repositoryValidationResponse api.RepositoryValidationResponse, err error) *MockRepositoryConfigDao_ValidateParameters_Call {
	_c.Call.Return(repositoryValidationResponse, err)
	return _c
}

func (_c *MockRepositoryConfigDao_ValidateParameters_Call) RunAndReturn(run func(ctx context.Context, orgId string, params api.RepositoryValidationRequest, excludedUUIDS []string) (api.RepositoryValidationResponse, error)) *MockRepositoryConfigDao_ValidateParameters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModuleStreamDao creates a new instance of MockModuleStreamDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModuleStreamDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModuleStreamDao {
	mock := &MockModuleStreamDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockModuleStreamDao is an autogenerated mock type for the ModuleStreamDao type
type MockModuleStreamDao struct {
	mock.Mock
}

type MockModuleStreamDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModuleStreamDao) EXPECT() *MockModuleStreamDao_Expecter {
	return &MockModuleStreamDao_Expecter{mock: &_m.Mock}
}

// InsertForRepository provides a mock function for the type MockModuleStreamDao
func (_mock *MockModuleStreamDao) InsertForRepository(ctx context.Context, repoUuid string, pkgGroups []yum.ModuleMD) (int64, error) {
	ret := _mock.Called(ctx, repoUuid, pkgGroups)

	if len(ret) == 0 {
		panic("no return value specified for InsertForRepository")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.ModuleMD) (int64, error)); ok {
		return returnFunc(ctx, repoUuid, pkgGroups)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.ModuleMD) int64); ok {
		r0 = returnFunc(ctx, repoUuid, pkgGroups)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []yum.ModuleMD) error); ok {
		r1 = returnFunc(ctx, repoUuid, pkgGroups)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModuleStreamDao_InsertForRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertForRepository'
type MockModuleStreamDao_InsertForRepository_Call struct {
	*mock.Call
}

// InsertForRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repoUuid string
//   - pkgGroups []yum.ModuleMD
func (_e *MockModuleStreamDao_Expecter) InsertForRepository(ctx interface{}, repoUuid interface{}, pkgGroups interface{}) *MockModuleStreamDao_InsertForRepository_Call {
	return &MockModuleStreamDao_InsertForRepository_Call{Call: _e.mock.On("InsertForRepository", ctx, repoUuid, pkgGroups)}
}

func (_c *MockModuleStreamDao_InsertForRepository_Call) Run(run func(ctx context.Context, repoUuid string, pkgGroups []yum.ModuleMD)) *MockModuleStreamDao_InsertForRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []yum.ModuleMD
		if args[2] != nil {
			arg2 = args[2].([]yum.ModuleMD)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockModuleStreamDao_InsertForRepository_Call) Return(n int64, err error) *MockModuleStreamDao_InsertForRepository_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockModuleStreamDao_InsertForRepository_Call) RunAndReturn(run func(ctx context.Context, repoUuid string, pkgGroups []yum.ModuleMD) (int64, error)) *MockModuleStreamDao_InsertForRepository_Call {
	_c.Call.Return(run)
	return _c
}

// OrphanCleanup provides a mock function for the type MockModuleStreamDao
func (_mock *MockModuleStreamDao) OrphanCleanup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OrphanCleanup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockModuleStreamDao_OrphanCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrphanCleanup'
type MockModuleStreamDao_OrphanCleanup_Call struct {
	*mock.Call
}

// OrphanCleanup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockModuleStreamDao_Expecter) OrphanCleanup(ctx interface{}) *MockModuleStreamDao_OrphanCleanup_Call {
	return &MockModuleStreamDao_OrphanCleanup_Call{Call: _e.mock.On("OrphanCleanup", ctx)}
}

func (_c *MockModuleStreamDao_OrphanCleanup_Call) Run(run func(ctx context.Context)) *MockModuleStreamDao_OrphanCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockModuleStreamDao_OrphanCleanup_Call) Return(err error) *MockModuleStreamDao_OrphanCleanup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockModuleStreamDao_OrphanCleanup_Call) RunAndReturn(run func(ctx context.Context) error) *MockModuleStreamDao_OrphanCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// SearchRepositoryModuleStreams provides a mock function for the type MockModuleStreamDao
func (_mock *MockModuleStreamDao) SearchRepositoryModuleStreams(ctx context.Context, orgID string, request api.SearchModuleStreamsRequest) ([]api.SearchModuleStreams, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchRepositoryModuleStreams")
	}

	var r0 []api.SearchModuleStreams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SearchModuleStreamsRequest) ([]api.SearchModuleStreams, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SearchModuleStreamsRequest) []api.SearchModuleStreams); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchModuleStreams)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.SearchModuleStreamsRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModuleStreamDao_SearchRepositoryModuleStreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchRepositoryModuleStreams'
type MockModuleStreamDao_SearchRepositoryModuleStreams_Call struct {
	*mock.Call
}

// SearchRepositoryModuleStreams is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.SearchModuleStreamsRequest
func (_e *MockModuleStreamDao_Expecter) SearchRepositoryModuleStreams(ctx interface{}, orgID interface{}, request interface{}) *MockModuleStreamDao_SearchRepositoryModuleStreams_Call {
	return &MockModuleStreamDao_SearchRepositoryModuleStreams_Call{Call: _e.mock.On("SearchRepositoryModuleStreams", ctx, orgID, request)}
}

func (_c *MockModuleStreamDao_SearchRepositoryModuleStreams_Call) Run(run func(ctx context.Context, orgID string, request api.SearchModuleStreamsRequest)) *MockModuleStreamDao_SearchRepositoryModuleStreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.SearchModuleStreamsRequest
		if args[2] != nil {
			arg2 = args[2].(api.SearchModuleStreamsRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockModuleStreamDao_SearchRepositoryModuleStreams_Call) Return(searchModuleStreamss []api.SearchModuleStreams, err error) *MockModuleStreamDao_SearchRepositoryModuleStreams_Call {
	_c.Call.Return(searchModuleStreamss, err)
	return _c
}

func (_c *MockModuleStreamDao_SearchRepositoryModuleStreams_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.SearchModuleStreamsRequest) ([]api.SearchModuleStreams, error)) *MockModuleStreamDao_SearchRepositoryModuleStreams_Call {
	_c.Call.Return(run)
	return _c
}

// SearchSnapshotModuleStreams provides a mock function for the type MockModuleStreamDao
func (_mock *MockModuleStreamDao) SearchSnapshotModuleStreams(ctx context.Context, orgID string, request api.SearchSnapshotModuleStreamsRequest) ([]api.SearchModuleStreams, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchSnapshotModuleStreams")
	}

	var r0 []api.SearchModuleStreams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SearchSnapshotModuleStreamsRequest) ([]api.SearchModuleStreams, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SearchSnapshotModuleStreamsRequest) []api.SearchModuleStreams); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchModuleStreams)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.SearchSnapshotModuleStreamsRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModuleStreamDao_SearchSnapshotModuleStreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchSnapshotModuleStreams'
type MockModuleStreamDao_SearchSnapshotModuleStreams_Call struct {
	*mock.Call
}

// SearchSnapshotModuleStreams is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.SearchSnapshotModuleStreamsRequest
func (_e *MockModuleStreamDao_Expecter) SearchSnapshotModuleStreams(ctx interface{}, orgID interface{}, request interface{}) *MockModuleStreamDao_SearchSnapshotModuleStreams_Call {
	return &MockModuleStreamDao_SearchSnapshotModuleStreams_Call{Call: _e.mock.On("SearchSnapshotModuleStreams", ctx, orgID, request)}
}

func (_c *MockModuleStreamDao_SearchSnapshotModuleStreams_Call) Run(run func(ctx context.Context, orgID string, request api.SearchSnapshotModuleStreamsRequest)) *MockModuleStreamDao_SearchSnapshotModuleStreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.SearchSnapshotModuleStreamsRequest
		if args[2] != nil {
			arg2 = args[2].(api.SearchSnapshotModuleStreamsRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockModuleStreamDao_SearchSnapshotModuleStreams_Call) Return(searchModuleStreamss []api.SearchModuleStreams, err error) *MockModuleStreamDao_SearchSnapshotModuleStreams_Call {
	_c.Call.Return(searchModuleStreamss, err)
	return _c
}

func (_c *MockModuleStreamDao_SearchSnapshotModuleStreams_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.SearchSnapshotModuleStreamsRequest) ([]api.SearchModuleStreams, error)) *MockModuleStreamDao_SearchSnapshotModuleStreams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRpmDao creates a new instance of MockRpmDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRpmDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRpmDao {
	mock := &MockRpmDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRpmDao is an autogenerated mock type for the RpmDao type
type MockRpmDao struct {
	mock.Mock
}

type MockRpmDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRpmDao) EXPECT() *MockRpmDao_Expecter {
	return &MockRpmDao_Expecter{mock: &_m.Mock}
}

// DetectRpms provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) DetectRpms(ctx context.Context, orgID string, request api.DetectRpmsRequest) (*api.DetectRpmsResponse, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for DetectRpms")
	}

	var r0 *api.DetectRpmsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.DetectRpmsRequest) (*api.DetectRpmsResponse, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.DetectRpmsRequest) *api.DetectRpmsResponse); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DetectRpmsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.DetectRpmsRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRpmDao_DetectRpms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetectRpms'
type MockRpmDao_DetectRpms_Call struct {
	*mock.Call
}

// DetectRpms is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.DetectRpmsRequest
func (_e *MockRpmDao_Expecter) DetectRpms(ctx interface{}, orgID interface{}, request interface{}) *MockRpmDao_DetectRpms_Call {
	return &MockRpmDao_DetectRpms_Call{Call: _e.mock.On("DetectRpms", ctx, orgID, request)}
}

func (_c *MockRpmDao_DetectRpms_Call) Run(run func(ctx context.Context, orgID string, request api.DetectRpmsRequest)) *MockRpmDao_DetectRpms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.DetectRpmsRequest
		if args[2] != nil {
			arg2 = args[2].(api.DetectRpmsRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRpmDao_DetectRpms_Call) Return(detectRpmsResponse *api.DetectRpmsResponse, err error) *MockRpmDao_DetectRpms_Call {
	_c.Call.Return(detectRpmsResponse, err)
	return _c
}

func (_c *MockRpmDao_DetectRpms_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.DetectRpmsRequest) (*api.DetectRpmsResponse, error)) *MockRpmDao_DetectRpms_Call {
	_c.Call.Return(run)
	return _c
}

// InsertForRepository provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) InsertForRepository(ctx context.Context, repoUuid string, pkgs []yum.Package) (int64, error) {
	ret := _mock.Called(ctx, repoUuid, pkgs)

	if len(ret) == 0 {
		panic("no return value specified for InsertForRepository")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.Package) (int64, error)); ok {
		return returnFunc(ctx, repoUuid, pkgs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.Package) int64); ok {
		r0 = returnFunc(ctx, repoUuid, pkgs)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []yum.Package) error); ok {
		r1 = returnFunc(ctx, repoUuid, pkgs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRpmDao_InsertForRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertForRepository'
type MockRpmDao_InsertForRepository_Call struct {
	*mock.Call
}

// InsertForRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repoUuid string
//   - pkgs []yum.Package
func (_e *MockRpmDao_Expecter) InsertForRepository(ctx interface{}, repoUuid interface{}, pkgs interface{}) *MockRpmDao_InsertForRepository_Call {
	return &MockRpmDao_InsertForRepository_Call{Call: _e.mock.On("InsertForRepository", ctx, repoUuid, pkgs)}
}

func (_c *MockRpmDao_InsertForRepository_Call) Run(run func(ctx context.Context, repoUuid string, pkgs []yum.Package)) *MockRpmDao_InsertForRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []yum.Package
		if args[2] != nil {
			arg2 = args[2].([]yum.Package)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRpmDao_InsertForRepository_Call) Return(n int64, err error) *MockRpmDao_InsertForRepository_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRpmDao_InsertForRepository_Call) RunAndReturn(run func(ctx context.Context, repoUuid string, pkgs []yum.Package) (int64, error)) *MockRpmDao_InsertForRepository_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) List(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string) (api.RepositoryRpmCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, orgID, uuidRepo, limit, offset, search, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.RepositoryRpmCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int, string, string) (api.RepositoryRpmCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int, string, string) api.RepositoryRpmCollectionResponse); ok {
		r0 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r0 = ret.Get(0).(api.RepositoryRpmCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, int, string, string) int64); ok {
		r1 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, int, string, string) error); ok {
		r2 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRpmDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRpmDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuidRepo string
//   - limit int
//   - offset int
//   - search string
//   - sortBy string
func (_e *MockRpmDao_Expecter) List(ctx interface{}, orgID interface{}, uuidRepo interface{}, limit interface{}, offset interface{}, search interface{}, sortBy interface{}) *MockRpmDao_List_Call {
	return &MockRpmDao_List_Call{Call: _e.mock.On("List", ctx, orgID, uuidRepo, limit, offset, search, sortBy)}
}

func (_c *MockRpmDao_List_Call) Run(run func(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string)) *MockRpmDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockRpmDao_List_Call) Return(repositoryRpmCollectionResponse api.RepositoryRpmCollectionResponse, n int64, err error) *MockRpmDao_List_Call {
	_c.Call.Return(repositoryRpmCollectionResponse, n, err)
	return _c
}

func (_c *MockRpmDao_List_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string) (api.RepositoryRpmCollectionResponse, int64, error)) *MockRpmDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshotErrata provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) ListSnapshotErrata(ctx context.Context, orgId string, snapshotUUIDs []string, filters tangy.ErrataListFilters, pageOpts api.PaginationData) ([]api.SnapshotErrata, int, error) {
	ret := _mock.Called(ctx, orgId, snapshotUUIDs, filters, pageOpts)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshotErrata")
	}

	var r0 []api.SnapshotErrata
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, tangy.ErrataListFilters, api.PaginationData) ([]api.SnapshotErrata, int, error)); ok {
		return returnFunc(ctx, orgId, snapshotUUIDs, filters, pageOpts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, tangy.ErrataListFilters, api.PaginationData) []api.SnapshotErrata); ok {
		r0 = returnFunc(ctx, orgId, snapshotUUIDs, filters, pageOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SnapshotErrata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string, tangy.ErrataListFilters, api.PaginationData) int); ok {
		r1 = returnFunc(ctx, orgId, snapshotUUIDs, filters, pageOpts)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, []string, tangy.ErrataListFilters, api.PaginationData) error); ok {
		r2 = returnFunc(ctx, orgId, snapshotUUIDs, filters, pageOpts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRpmDao_ListSnapshotErrata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshotErrata'
type MockRpmDao_ListSnapshotErrata_Call struct {
	*mock.Call
}

// ListSnapshotErrata is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - snapshotUUIDs []string
//   - filters tangy.ErrataListFilters
//   - pageOpts api.PaginationData
func (_e *MockRpmDao_Expecter) ListSnapshotErrata(ctx interface{}, orgId interface{}, snapshotUUIDs interface{}, filters interface{}, pageOpts interface{}) *MockRpmDao_ListSnapshotErrata_Call {
	return &MockRpmDao_ListSnapshotErrata_Call{Call: _e.mock.On("ListSnapshotErrata", ctx, orgId, snapshotUUIDs, filters, pageOpts)}
}

func (_c *MockRpmDao_ListSnapshotErrata_Call) Run(run func(ctx context.Context, orgId string, snapshotUUIDs []string, filters tangy.ErrataListFilters, pageOpts api.PaginationData)) *MockRpmDao_ListSnapshotErrata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 tangy.ErrataListFilters
		if args[3] != nil {
			arg3 = args[3].(tangy.ErrataListFilters)
		}
		var arg4 api.PaginationData
		if args[4] != nil {
			arg4 = args[4].(api.PaginationData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockRpmDao_ListSnapshotErrata_Call) Return(snapshotErratas []api.SnapshotErrata, n int, err error) *MockRpmDao_ListSnapshotErrata_Call {
	_c.Call.Return(snapshotErratas, n, err)
	return _c
}

func (_c *MockRpmDao_ListSnapshotErrata_Call) RunAndReturn(run func(ctx context.Context, orgId string, snapshotUUIDs []string, filters tangy.ErrataListFilters, pageOpts api.PaginationData) ([]api.SnapshotErrata, int, error)) *MockRpmDao_ListSnapshotErrata_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshotRpms provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) ListSnapshotRpms(ctx context.Context, orgId string, snapshotUUIDs []string, search string, pageOpts api.PaginationData) ([]api.SnapshotRpm, int, error) {
	ret := _mock.Called(ctx, orgId, snapshotUUIDs, search, pageOpts)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshotRpms")
	}

	var r0 []api.SnapshotRpm
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, string, api.PaginationData) ([]api.SnapshotRpm, int, error)); ok {
		return returnFunc(ctx, orgId, snapshotUUIDs, search, pageOpts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, string, api.PaginationData) []api.SnapshotRpm); ok {
		r0 = returnFunc(ctx, orgId, snapshotUUIDs, search, pageOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SnapshotRpm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string, string, api.PaginationData) int); ok {
		r1 = returnFunc(ctx, orgId, snapshotUUIDs, search, pageOpts)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, []string, string, api.PaginationData) error); ok {
		r2 = returnFunc(ctx, orgId, snapshotUUIDs, search, pageOpts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRpmDao_ListSnapshotRpms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshotRpms'
type MockRpmDao_ListSnapshotRpms_Call struct {
	*mock.Call
}

// ListSnapshotRpms is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - snapshotUUIDs []string
//   - search string
//   - pageOpts api.PaginationData
func (_e *MockRpmDao_Expecter) ListSnapshotRpms(ctx interface{}, orgId interface{}, snapshotUUIDs interface{}, search interface{}, pageOpts interface{}) *MockRpmDao_ListSnapshotRpms_Call {
	return &MockRpmDao_ListSnapshotRpms_Call{Call: _e.mock.On("ListSnapshotRpms", ctx, orgId, snapshotUUIDs, search, pageOpts)}
}

func (_c *MockRpmDao_ListSnapshotRpms_Call) Run(run func(ctx context.Context, orgId string, snapshotUUIDs []string, search string, pageOpts api.PaginationData)) *MockRpmDao_ListSnapshotRpms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 api.PaginationData
		if args[4] != nil {
			arg4 = args[4].(api.PaginationData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockRpmDao_ListSnapshotRpms_Call) Return(snapshotRpms []api.SnapshotRpm, n int, err error) *MockRpmDao_ListSnapshotRpms_Call {
	_c.Call.Return(snapshotRpms, n, err)
	return _c
}

func (_c *MockRpmDao_ListSnapshotRpms_Call) RunAndReturn(run func(ctx context.Context, orgId string, snapshotUUIDs []string, search string, pageOpts api.PaginationData) ([]api.SnapshotRpm, int, error)) *MockRpmDao_ListSnapshotRpms_Call {
	_c.Call.Return(run)
	return _c
}

// ListTemplateErrata provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) ListTemplateErrata(ctx context.Context, orgId string, templateUUID string, filters tangy.ErrataListFilters, pageOpts api.PaginationData) ([]api.SnapshotErrata, int, error) {
	ret := _mock.Called(ctx, orgId, templateUUID, filters, pageOpts)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateErrata")
	}

	var r0 []api.SnapshotErrata
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, tangy.ErrataListFilters, api.PaginationData) ([]api.SnapshotErrata, int, error)); ok {
		return returnFunc(ctx, orgId, templateUUID, filters, pageOpts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, tangy.ErrataListFilters, api.PaginationData) []api.SnapshotErrata); ok {
		r0 = returnFunc(ctx, orgId, templateUUID, filters, pageOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SnapshotErrata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, tangy.ErrataListFilters, api.PaginationData) int); ok {
		r1 = returnFunc(ctx, orgId, templateUUID, filters, pageOpts)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, tangy.ErrataListFilters, api.PaginationData) error); ok {
		r2 = returnFunc(ctx, orgId, templateUUID, filters, pageOpts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRpmDao_ListTemplateErrata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTemplateErrata'
type MockRpmDao_ListTemplateErrata_Call struct {
	*mock.Call
}

// ListTemplateErrata is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - templateUUID string
//   - filters tangy.ErrataListFilters
//   - pageOpts api.PaginationData
func (_e *MockRpmDao_Expecter) ListTemplateErrata(ctx interface{}, orgId interface{}, templateUUID interface{}, filters interface{}, pageOpts interface{}) *MockRpmDao_ListTemplateErrata_Call {
	return &MockRpmDao_ListTemplateErrata_Call{Call: _e.mock.On("ListTemplateErrata", ctx, orgId, templateUUID, filters, pageOpts)}
}

func (_c *MockRpmDao_ListTemplateErrata_Call) Run(run func(ctx context.Context, orgId string, templateUUID string, filters tangy.ErrataListFilters, pageOpts api.PaginationData)) *MockRpmDao_ListTemplateErrata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 tangy.ErrataListFilters
		if args[3] != nil {
			arg3 = args[3].(tangy.ErrataListFilters)
		}
		var arg4 api.PaginationData
		if args[4] != nil {
			arg4 = args[4].(api.PaginationData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockRpmDao_ListTemplateErrata_Call) Return(snapshotErratas []api.SnapshotErrata, n int, err error) *MockRpmDao_ListTemplateErrata_Call {
	_c.Call.Return(snapshotErratas, n, err)
	return _c
}

func (_c *MockRpmDao_ListTemplateErrata_Call) RunAndReturn(run func(ctx context.Context, orgId string, templateUUID string, filters tangy.ErrataListFilters, pageOpts api.PaginationData) ([]api.SnapshotErrata, int, error)) *MockRpmDao_ListTemplateErrata_Call {
	_c.Call.Return(run)
	return _c
}

// ListTemplateRpms provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) ListTemplateRpms(ctx context.Context, orgId string, templateUUID string, search string, pageOpts api.PaginationData) ([]api.SnapshotRpm, int, error) {
	ret := _mock.Called(ctx, orgId, templateUUID, search, pageOpts)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateRpms")
	}

	var r0 []api.SnapshotRpm
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, api.PaginationData) ([]api.SnapshotRpm, int, error)); ok {
		return returnFunc(ctx, orgId, templateUUID, search, pageOpts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, api.PaginationData) []api.SnapshotRpm); ok {
		r0 = returnFunc(ctx, orgId, templateUUID, search, pageOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SnapshotRpm)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, api.PaginationData) int); ok {
		r1 = returnFunc(ctx, orgId, templateUUID, search, pageOpts)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, string, api.PaginationData) error); ok {
		r2 = returnFunc(ctx, orgId, templateUUID, search, pageOpts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRpmDao_ListTemplateRpms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTemplateRpms'
type MockRpmDao_ListTemplateRpms_Call struct {
	*mock.Call
}

// ListTemplateRpms is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - templateUUID string
//   - search string
//   - pageOpts api.PaginationData
func (_e *MockRpmDao_Expecter) ListTemplateRpms(ctx interface{}, orgId interface{}, templateUUID interface{}, search interface{}, pageOpts interface{}) *MockRpmDao_ListTemplateRpms_Call {
	return &MockRpmDao_ListTemplateRpms_Call{Call: _e.mock.On("ListTemplateRpms", ctx, orgId, templateUUID, search, pageOpts)}
}

func (_c *MockRpmDao_ListTemplateRpms_Call) Run(run func(ctx context.Context, orgId string, templateUUID string, search string, pageOpts api.PaginationData)) *MockRpmDao_ListTemplateRpms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 api.PaginationData
		if args[4] != nil {
			arg4 = args[4].(api.PaginationData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockRpmDao_ListTemplateRpms_Call) Return(snapshotRpms []api.SnapshotRpm, n int, err error) *MockRpmDao_ListTemplateRpms_Call {
	_c.Call.Return(snapshotRpms, n, err)
	return _c
}

func (_c *MockRpmDao_ListTemplateRpms_Call) RunAndReturn(run func(ctx context.Context, orgId string, templateUUID string, search string, pageOpts api.PaginationData) ([]api.SnapshotRpm, int, error)) *MockRpmDao_ListTemplateRpms_Call {
	_c.Call.Return(run)
	return _c
}

// OrphanCleanup provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) OrphanCleanup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OrphanCleanup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRpmDao_OrphanCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrphanCleanup'
type MockRpmDao_OrphanCleanup_Call struct {
	*mock.Call
}

// OrphanCleanup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRpmDao_Expecter) OrphanCleanup(ctx interface{}) *MockRpmDao_OrphanCleanup_Call {
	return &MockRpmDao_OrphanCleanup_Call{Call: _e.mock.On("OrphanCleanup", ctx)}
}

func (_c *MockRpmDao_OrphanCleanup_Call) Run(run func(ctx context.Context)) *MockRpmDao_OrphanCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRpmDao_OrphanCleanup_Call) Return(err error) *MockRpmDao_OrphanCleanup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRpmDao_OrphanCleanup_Call) RunAndReturn(run func(ctx context.Context) error) *MockRpmDao_OrphanCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) Search(ctx context.Context, orgID string, request api.ContentUnitSearchRequest) ([]api.SearchRpmResponse, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []api.SearchRpmResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ContentUnitSearchRequest) ([]api.SearchRpmResponse, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ContentUnitSearchRequest) []api.SearchRpmResponse); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchRpmResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.ContentUnitSearchRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRpmDao_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockRpmDao_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.ContentUnitSearchRequest
func (_e *MockRpmDao_Expecter) Search(ctx interface{}, orgID interface{}, request interface{}) *MockRpmDao_Search_Call {
	return &MockRpmDao_Search_Call{Call: _e.mock.On("Search", ctx, orgID, request)}
}

func (_c *MockRpmDao_Search_Call) Run(run func(ctx context.Context, orgID string, request api.ContentUnitSearchRequest)) *MockRpmDao_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.ContentUnitSearchRequest
		if args[2] != nil {
			arg2 = args[2].(api.ContentUnitSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRpmDao_Search_Call) Return(searchRpmResponses []api.SearchRpmResponse, err error) *MockRpmDao_Search_Call {
	_c.Call.Return(searchRpmResponses, err)
	return _c
}

func (_c *MockRpmDao_Search_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.ContentUnitSearchRequest) ([]api.SearchRpmResponse, error)) *MockRpmDao_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchSnapshotRpms provides a mock function for the type MockRpmDao
func (_mock *MockRpmDao) SearchSnapshotRpms(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest) ([]api.SearchRpmResponse, error) {
	ret := _mock.Called(ctx, orgId, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchSnapshotRpms")
	}

	var r0 []api.SearchRpmResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SnapshotSearchRpmRequest) ([]api.SearchRpmResponse, error)); ok {
		return returnFunc(ctx, orgId, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SnapshotSearchRpmRequest) []api.SearchRpmResponse); ok {
		r0 = returnFunc(ctx, orgId, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchRpmResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.SnapshotSearchRpmRequest) error); ok {
		r1 = returnFunc(ctx, orgId, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRpmDao_SearchSnapshotRpms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchSnapshotRpms'
type MockRpmDao_SearchSnapshotRpms_Call struct {
	*mock.Call
}

// SearchSnapshotRpms is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - request api.SnapshotSearchRpmRequest
func (_e *MockRpmDao_Expecter) SearchSnapshotRpms(ctx interface{}, orgId interface{}, request interface{}) *MockRpmDao_SearchSnapshotRpms_Call {
	return &MockRpmDao_SearchSnapshotRpms_Call{Call: _e.mock.On("SearchSnapshotRpms", ctx, orgId, request)}
}

func (_c *MockRpmDao_SearchSnapshotRpms_Call) Run(run func(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest)) *MockRpmDao_SearchSnapshotRpms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.SnapshotSearchRpmRequest
		if args[2] != nil {
			arg2 = args[2].(api.SnapshotSearchRpmRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRpmDao_SearchSnapshotRpms_Call) Return(searchRpmResponses []api.SearchRpmResponse, err error) *MockRpmDao_SearchSnapshotRpms_Call {
	_c.Call.Return(searchRpmResponses, err)
	return _c
}

func (_c *MockRpmDao_SearchSnapshotRpms_Call) RunAndReturn(run func(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest) ([]api.SearchRpmResponse, error)) *MockRpmDao_SearchSnapshotRpms_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryDao creates a new instance of MockRepositoryDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryDao {
	mock := &MockRepositoryDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepositoryDao is an autogenerated mock type for the RepositoryDao type
type MockRepositoryDao struct {
	mock.Mock
}

type MockRepositoryDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryDao) EXPECT() *MockRepositoryDao_Expecter {
	return &MockRepositoryDao_Expecter{mock: &_m.Mock}
}

// FetchForUrl provides a mock function for the type MockRepositoryDao
func (_mock *MockRepositoryDao) FetchForUrl(ctx context.Context, url string, origin *string) (Repository, error) {
	ret := _mock.Called(ctx, url, origin)

	if len(ret) == 0 {
		panic("no return value specified for FetchForUrl")
	}

	var r0 Repository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) (Repository, error)); ok {
		return returnFunc(ctx, url, origin)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) Repository); ok {
		r0 = returnFunc(ctx, url, origin)
	} else {
		r0 = ret.Get(0).(Repository)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string) error); ok {
		r1 = returnFunc(ctx, url, origin)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryDao_FetchForUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchForUrl'
type MockRepositoryDao_FetchForUrl_Call struct {
	*mock.Call
}

// FetchForUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - origin *string
func (_e *MockRepositoryDao_Expecter) FetchForUrl(ctx interface{}, url interface{}, origin interface{}) *MockRepositoryDao_FetchForUrl_Call {
	return &MockRepositoryDao_FetchForUrl_Call{Call: _e.mock.On("FetchForUrl", ctx, url, origin)}
}

func (_c *MockRepositoryDao_FetchForUrl_Call) Run(run func(ctx context.Context, url string, origin *string)) *MockRepositoryDao_FetchForUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryDao_FetchForUrl_Call) Return(repository Repository, err error) *MockRepositoryDao_FetchForUrl_Call {
	_c.Call.Return(repository, err)
	return _c
}

func (_c *MockRepositoryDao_FetchForUrl_Call) RunAndReturn(run func(ctx context.Context, url string, origin *string) (Repository, error)) *MockRepositoryDao_FetchForUrl_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRepositoryRPMCount provides a mock function for the type MockRepositoryDao
func (_mock *MockRepositoryDao) FetchRepositoryRPMCount(ctx context.Context, repoUUID string) (int, error) {
	ret := _mock.Called(ctx, repoUUID)

	if len(ret) == 0 {
		panic("no return value specified for FetchRepositoryRPMCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return returnFunc(ctx, repoUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = returnFunc(ctx, repoUUID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, repoUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryDao_FetchRepositoryRPMCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRepositoryRPMCount'
type MockRepositoryDao_FetchRepositoryRPMCount_Call struct {
	*mock.Call
}

// FetchRepositoryRPMCount is a helper method to define mock.On call
//   - ctx context.Context
//   - repoUUID string
func (_e *MockRepositoryDao_Expecter) FetchRepositoryRPMCount(ctx interface{}, repoUUID interface{}) *MockRepositoryDao_FetchRepositoryRPMCount_Call {
	return &MockRepositoryDao_FetchRepositoryRPMCount_Call{Call: _e.mock.On("FetchRepositoryRPMCount", ctx, repoUUID)}
}

func (_c *MockRepositoryDao_FetchRepositoryRPMCount_Call) Run(run func(ctx context.Context, repoUUID string)) *MockRepositoryDao_FetchRepositoryRPMCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryDao_FetchRepositoryRPMCount_Call) Return(n int, err error) *MockRepositoryDao_FetchRepositoryRPMCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepositoryDao_FetchRepositoryRPMCount_Call) RunAndReturn(run func(ctx context.Context, repoUUID string) (int, error)) *MockRepositoryDao_FetchRepositoryRPMCount_Call {
	_c.Call.Return(run)
	return _c
}

// ListForIntrospection provides a mock function for the type MockRepositoryDao
func (_mock *MockRepositoryDao) ListForIntrospection(ctx context.Context, urls *[]string, force bool) ([]Repository, error) {
	ret := _mock.Called(ctx, urls, force)

	if len(ret) == 0 {
		panic("no return value specified for ListForIntrospection")
	}

	var r0 []Repository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *[]string, bool) ([]Repository, error)); ok {
		return returnFunc(ctx, urls, force)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *[]string, bool) []Repository); ok {
		r0 = returnFunc(ctx, urls, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *[]string, bool) error); ok {
		r1 = returnFunc(ctx, urls, force)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryDao_ListForIntrospection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListForIntrospection'
type MockRepositoryDao_ListForIntrospection_Call struct {
	*mock.Call
}

// ListForIntrospection is a helper method to define mock.On call
//   - ctx context.Context
//   - urls *[]string
//   - force bool
func (_e *MockRepositoryDao_Expecter) ListForIntrospection(ctx interface{}, urls interface{}, force interface{}) *MockRepositoryDao_ListForIntrospection_Call {
	return &MockRepositoryDao_ListForIntrospection_Call{Call: _e.mock.On("ListForIntrospection", ctx, urls, force)}
}

func (_c *MockRepositoryDao_ListForIntrospection_Call) Run(run func(ctx context.Context, urls *[]string, force bool)) *MockRepositoryDao_ListForIntrospection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *[]string
		if args[1] != nil {
			arg1 = args[1].(*[]string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryDao_ListForIntrospection_Call) Return(repositorys []Repository, err error) *MockRepositoryDao_ListForIntrospection_Call {
	_c.Call.Return(repositorys, err)
	return _c
}

func (_c *MockRepositoryDao_ListForIntrospection_Call) RunAndReturn(run func(ctx context.Context, urls *[]string, force bool) ([]Repository, error)) *MockRepositoryDao_ListForIntrospection_Call {
	_c.Call.Return(run)
	return _c
}

// ListPublic provides a mock function for the type MockRepositoryDao
func (_mock *MockRepositoryDao) ListPublic(ctx context.Context, paginationData api.PaginationData, filterData api.FilterData) (api.PublicRepositoryCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, paginationData, filterData)

	if len(ret) == 0 {
		panic("no return value specified for ListPublic")
	}

	var r0 api.PublicRepositoryCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.PaginationData, api.FilterData) (api.PublicRepositoryCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, paginationData, filterData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.PaginationData, api.FilterData) api.PublicRepositoryCollectionResponse); ok {
		r0 = returnFunc(ctx, paginationData, filterData)
	} else {
		r0 = ret.Get(0).(api.PublicRepositoryCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, api.PaginationData, api.FilterData) int64); ok {
		r1 = returnFunc(ctx, paginationData, filterData)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, api.PaginationData, api.FilterData) error); ok {
		r2 = returnFunc(ctx, paginationData, filterData)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoryDao_ListPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPublic'
type MockRepositoryDao_ListPublic_Call struct {
	*mock.Call
}

// ListPublic is a helper method to define mock.On call
//   - ctx context.Context
//   - paginationData api.PaginationData
//   - filterData api.FilterData
func (_e *MockRepositoryDao_Expecter) ListPublic(ctx interface{}, paginationData interface{}, filterData interface{}) *MockRepositoryDao_ListPublic_Call {
	return &MockRepositoryDao_ListPublic_Call{Call: _e.mock.On("ListPublic", ctx, paginationData, filterData)}
}

func (_c *MockRepositoryDao_ListPublic_Call) Run(run func(ctx context.Context, paginationData api.PaginationData, filterData api.FilterData)) *MockRepositoryDao_ListPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.PaginationData
		if args[1] != nil {
			arg1 = args[1].(api.PaginationData)
		}
		var arg2 api.FilterData
		if args[2] != nil {
			arg2 = args[2].(api.FilterData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepositoryDao_ListPublic_Call) Return(publicRepositoryCollectionResponse api.PublicRepositoryCollectionResponse, n int64, err error) *MockRepositoryDao_ListPublic_Call {
	_c.Call.Return(publicRepositoryCollectionResponse, n, err)
	return _c
}

func (_c *MockRepositoryDao_ListPublic_Call) RunAndReturn(run func(ctx context.Context, paginationData api.PaginationData, filterData api.FilterData) (api.PublicRepositoryCollectionResponse, int64, error)) *MockRepositoryDao_ListPublic_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsNotPublic provides a mock function for the type MockRepositoryDao
func (_mock *MockRepositoryDao) MarkAsNotPublic(ctx context.Context, url string) error {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsNotPublic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, url)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryDao_MarkAsNotPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsNotPublic'
type MockRepositoryDao_MarkAsNotPublic_Call struct {
	*mock.Call
}

// MarkAsNotPublic is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockRepositoryDao_Expecter) MarkAsNotPublic(ctx interface{}, url interface{}) *MockRepositoryDao_MarkAsNotPublic_Call {
	return &MockRepositoryDao_MarkAsNotPublic_Call{Call: _e.mock.On("MarkAsNotPublic", ctx, url)}
}

func (_c *MockRepositoryDao_MarkAsNotPublic_Call) Run(run func(ctx context.Context, url string)) *MockRepositoryDao_MarkAsNotPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryDao_MarkAsNotPublic_Call) Return(err error) *MockRepositoryDao_MarkAsNotPublic_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryDao_MarkAsNotPublic_Call) RunAndReturn(run func(ctx context.Context, url string) error) *MockRepositoryDao_MarkAsNotPublic_Call {
	_c.Call.Return(run)
	return _c
}

// OrphanCleanup provides a mock function for the type MockRepositoryDao
func (_mock *MockRepositoryDao) OrphanCleanup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OrphanCleanup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryDao_OrphanCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrphanCleanup'
type MockRepositoryDao_OrphanCleanup_Call struct {
	*mock.Call
}

// OrphanCleanup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryDao_Expecter) OrphanCleanup(ctx interface{}) *MockRepositoryDao_OrphanCleanup_Call {
	return &MockRepositoryDao_OrphanCleanup_Call{Call: _e.mock.On("OrphanCleanup", ctx)}
}

func (_c *MockRepositoryDao_OrphanCleanup_Call) Run(run func(ctx context.Context)) *MockRepositoryDao_OrphanCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryDao_OrphanCleanup_Call) Return(err error) *MockRepositoryDao_OrphanCleanup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryDao_OrphanCleanup_Call) RunAndReturn(run func(ctx context.Context) error) *MockRepositoryDao_OrphanCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepositoryDao
func (_mock *MockRepositoryDao) Update(ctx context.Context, repo RepositoryUpdate) error {
	ret := _mock.Called(ctx, repo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, RepositoryUpdate) error); ok {
		r0 = returnFunc(ctx, repo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepositoryDao_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepositoryDao_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - repo RepositoryUpdate
func (_e *MockRepositoryDao_Expecter) Update(ctx interface{}, repo interface{}) *MockRepositoryDao_Update_Call {
	return &MockRepositoryDao_Update_Call{Call: _e.mock.On("Update", ctx, repo)}
}

func (_c *MockRepositoryDao_Update_Call) Run(run func(ctx context.Context, repo RepositoryUpdate)) *MockRepositoryDao_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 RepositoryUpdate
		if args[1] != nil {
			arg1 = args[1].(RepositoryUpdate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryDao_Update_Call) Return(err error) *MockRepositoryDao_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepositoryDao_Update_Call) RunAndReturn(run func(ctx context.Context, repo RepositoryUpdate) error) *MockRepositoryDao_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSnapshotDao creates a new instance of MockSnapshotDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSnapshotDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSnapshotDao {
	mock := &MockSnapshotDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSnapshotDao is an autogenerated mock type for the SnapshotDao type
type MockSnapshotDao struct {
	mock.Mock
}

type MockSnapshotDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSnapshotDao) EXPECT() *MockSnapshotDao_Expecter {
	return &MockSnapshotDao_Expecter{mock: &_m.Mock}
}

// BulkDelete provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) BulkDelete(ctx context.Context, uuids []string) []error {
	ret := _mock.Called(ctx, uuids)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 []error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []error); ok {
		r0 = returnFunc(ctx, uuids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}
	return r0
}

// MockSnapshotDao_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type MockSnapshotDao_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - uuids []string
func (_e *MockSnapshotDao_Expecter) BulkDelete(ctx interface{}, uuids interface{}) *MockSnapshotDao_BulkDelete_Call {
	return &MockSnapshotDao_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, uuids)}
}

func (_c *MockSnapshotDao_BulkDelete_Call) Run(run func(ctx context.Context, uuids []string)) *MockSnapshotDao_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_BulkDelete_Call) Return(errs []error) *MockSnapshotDao_BulkDelete_Call {
	_c.Call.Return(errs)
	return _c
}

func (_c *MockSnapshotDao_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, uuids []string) []error) *MockSnapshotDao_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ClearDeletedAt provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) ClearDeletedAt(ctx context.Context, snapUUID string) error {
	ret := _mock.Called(ctx, snapUUID)

	if len(ret) == 0 {
		panic("no return value specified for ClearDeletedAt")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, snapUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSnapshotDao_ClearDeletedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDeletedAt'
type MockSnapshotDao_ClearDeletedAt_Call struct {
	*mock.Call
}

// ClearDeletedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - snapUUID string
func (_e *MockSnapshotDao_Expecter) ClearDeletedAt(ctx interface{}, snapUUID interface{}) *MockSnapshotDao_ClearDeletedAt_Call {
	return &MockSnapshotDao_ClearDeletedAt_Call{Call: _e.mock.On("ClearDeletedAt", ctx, snapUUID)}
}

func (_c *MockSnapshotDao_ClearDeletedAt_Call) Run(run func(ctx context.Context, snapUUID string)) *MockSnapshotDao_ClearDeletedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_ClearDeletedAt_Call) Return(err error) *MockSnapshotDao_ClearDeletedAt_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSnapshotDao_ClearDeletedAt_Call) RunAndReturn(run func(ctx context.Context, snapUUID string) error) *MockSnapshotDao_ClearDeletedAt_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) Create(ctx context.Context, snap *models.Snapshot) error {
	ret := _mock.Called(ctx, snap)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Snapshot) error); ok {
		r0 = returnFunc(ctx, snap)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSnapshotDao_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSnapshotDao_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - snap *models.Snapshot
func (_e *MockSnapshotDao_Expecter) Create(ctx interface{}, snap interface{}) *MockSnapshotDao_Create_Call {
	return &MockSnapshotDao_Create_Call{Call: _e.mock.On("Create", ctx, snap)}
}

func (_c *MockSnapshotDao_Create_Call) Run(run func(ctx context.Context, snap *models.Snapshot)) *MockSnapshotDao_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Snapshot
		if args[1] != nil {
			arg1 = args[1].(*models.Snapshot)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_Create_Call) Return(err error) *MockSnapshotDao_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSnapshotDao_Create_Call) RunAndReturn(run func(ctx context.Context, snap *models.Snapshot) error) *MockSnapshotDao_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) Delete(ctx context.Context, snapUUID string) error {
	ret := _mock.Called(ctx, snapUUID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, snapUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSnapshotDao_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSnapshotDao_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - snapUUID string
func (_e *MockSnapshotDao_Expecter) Delete(ctx interface{}, snapUUID interface{}) *MockSnapshotDao_Delete_Call {
	return &MockSnapshotDao_Delete_Call{Call: _e.mock.On("Delete", ctx, snapUUID)}
}

func (_c *MockSnapshotDao_Delete_Call) Run(run func(ctx context.Context, snapUUID string)) *MockSnapshotDao_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_Delete_Call) Return(err error) *MockSnapshotDao_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSnapshotDao_Delete_Call) RunAndReturn(run func(ctx context.Context, snapUUID string) error) *MockSnapshotDao_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) Fetch(ctx context.Context, uuid string) (api.SnapshotResponse, error) {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 api.SnapshotResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (api.SnapshotResponse, error)); ok {
		return returnFunc(ctx, uuid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) api.SnapshotResponse); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(api.SnapshotResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockSnapshotDao_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockSnapshotDao_Expecter) Fetch(ctx interface{}, uuid interface{}) *MockSnapshotDao_Fetch_Call {
	return &MockSnapshotDao_Fetch_Call{Call: _e.mock.On("Fetch", ctx, uuid)}
}

func (_c *MockSnapshotDao_Fetch_Call) Run(run func(ctx context.Context, uuid string)) *MockSnapshotDao_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_Fetch_Call) Return(snapshotResponse api.SnapshotResponse, err error) *MockSnapshotDao_Fetch_Call {
	_c.Call.Return(snapshotResponse, err)
	return _c
}

func (_c *MockSnapshotDao_Fetch_Call) RunAndReturn(run func(ctx context.Context, uuid string) (api.SnapshotResponse, error)) *MockSnapshotDao_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// FetchForRepoConfigUUID provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) FetchForRepoConfigUUID(ctx context.Context, repoConfigUUID string, inclSoftDel bool) ([]models.Snapshot, error) {
	ret := _mock.Called(ctx, repoConfigUUID, inclSoftDel)

	if len(ret) == 0 {
		panic("no return value specified for FetchForRepoConfigUUID")
	}

	var r0 []models.Snapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) ([]models.Snapshot, error)); ok {
		return returnFunc(ctx, repoConfigUUID, inclSoftDel)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) []models.Snapshot); ok {
		r0 = returnFunc(ctx, repoConfigUUID, inclSoftDel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Snapshot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, repoConfigUUID, inclSoftDel)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_FetchForRepoConfigUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchForRepoConfigUUID'
type MockSnapshotDao_FetchForRepoConfigUUID_Call struct {
	*mock.Call
}

// FetchForRepoConfigUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoConfigUUID string
//   - inclSoftDel bool
func (_e *MockSnapshotDao_Expecter) FetchForRepoConfigUUID(ctx interface{}, repoConfigUUID interface{}, inclSoftDel interface{}) *MockSnapshotDao_FetchForRepoConfigUUID_Call {
	return &MockSnapshotDao_FetchForRepoConfigUUID_Call{Call: _e.mock.On("FetchForRepoConfigUUID", ctx, repoConfigUUID, inclSoftDel)}
}

func (_c *MockSnapshotDao_FetchForRepoConfigUUID_Call) Run(run func(ctx context.Context, repoConfigUUID string, inclSoftDel bool)) *MockSnapshotDao_FetchForRepoConfigUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_FetchForRepoConfigUUID_Call) Return(snapshots []models.Snapshot, err error) *MockSnapshotDao_FetchForRepoConfigUUID_Call {
	_c.Call.Return(snapshots, err)
	return _c
}

func (_c *MockSnapshotDao_FetchForRepoConfigUUID_Call) RunAndReturn(run func(ctx context.Context, repoConfigUUID string, inclSoftDel bool) ([]models.Snapshot, error)) *MockSnapshotDao_FetchForRepoConfigUUID_Call {
	_c.Call.Return(run)
	return _c
}

// FetchLatestSnapshot provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) FetchLatestSnapshot(ctx context.Context, repoConfigUUID string) (api.SnapshotResponse, error) {
	ret := _mock.Called(ctx, repoConfigUUID)

	if len(ret) == 0 {
		panic("no return value specified for FetchLatestSnapshot")
	}

	var r0 api.SnapshotResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (api.SnapshotResponse, error)); ok {
		return returnFunc(ctx, repoConfigUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) api.SnapshotResponse); ok {
		r0 = returnFunc(ctx, repoConfigUUID)
	} else {
		r0 = ret.Get(0).(api.SnapshotResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, repoConfigUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_FetchLatestSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLatestSnapshot'
type MockSnapshotDao_FetchLatestSnapshot_Call struct {
	*mock.Call
}

// FetchLatestSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - repoConfigUUID string
func (_e *MockSnapshotDao_Expecter) FetchLatestSnapshot(ctx interface{}, repoConfigUUID interface{}) *MockSnapshotDao_FetchLatestSnapshot_Call {
	return &MockSnapshotDao_FetchLatestSnapshot_Call{Call: _e.mock.On("FetchLatestSnapshot", ctx, repoConfigUUID)}
}

func (_c *MockSnapshotDao_FetchLatestSnapshot_Call) Run(run func(ctx context.Context, repoConfigUUID string)) *MockSnapshotDao_FetchLatestSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_FetchLatestSnapshot_Call) Return(snapshotResponse api.SnapshotResponse, err error) *MockSnapshotDao_FetchLatestSnapshot_Call {
	_c.Call.Return(snapshotResponse, err)
	return _c
}

func (_c *MockSnapshotDao_FetchLatestSnapshot_Call) RunAndReturn(run func(ctx context.Context, repoConfigUUID string) (api.SnapshotResponse, error)) *MockSnapshotDao_FetchLatestSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// FetchLatestSnapshotModel provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) FetchLatestSnapshotModel(ctx context.Context, repoConfigUUID string) (models.Snapshot, error) {
	ret := _mock.Called(ctx, repoConfigUUID)

	if len(ret) == 0 {
		panic("no return value specified for FetchLatestSnapshotModel")
	}

	var r0 models.Snapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Snapshot, error)); ok {
		return returnFunc(ctx, repoConfigUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Snapshot); ok {
		r0 = returnFunc(ctx, repoConfigUUID)
	} else {
		r0 = ret.Get(0).(models.Snapshot)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, repoConfigUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_FetchLatestSnapshotModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLatestSnapshotModel'
type MockSnapshotDao_FetchLatestSnapshotModel_Call struct {
	*mock.Call
}

// FetchLatestSnapshotModel is a helper method to define mock.On call
//   - ctx context.Context
//   - repoConfigUUID string
func (_e *MockSnapshotDao_Expecter) FetchLatestSnapshotModel(ctx interface{}, repoConfigUUID interface{}) *MockSnapshotDao_FetchLatestSnapshotModel_Call {
	return &MockSnapshotDao_FetchLatestSnapshotModel_Call{Call: _e.mock.On("FetchLatestSnapshotModel", ctx, repoConfigUUID)}
}

func (_c *MockSnapshotDao_FetchLatestSnapshotModel_Call) Run(run func(ctx context.Context, repoConfigUUID string)) *MockSnapshotDao_FetchLatestSnapshotModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_FetchLatestSnapshotModel_Call) Return(snapshot models.Snapshot, err error) *MockSnapshotDao_FetchLatestSnapshotModel_Call {
	_c.Call.Return(snapshot, err)
	return _c
}

func (_c *MockSnapshotDao_FetchLatestSnapshotModel_Call) RunAndReturn(run func(ctx context.Context, repoConfigUUID string) (models.Snapshot, error)) *MockSnapshotDao_FetchLatestSnapshotModel_Call {
	_c.Call.Return(run)
	return _c
}

// FetchModel provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) FetchModel(ctx context.Context, uuid string, includeSoftDel bool) (models.Snapshot, error) {
	ret := _mock.Called(ctx, uuid, includeSoftDel)

	if len(ret) == 0 {
		panic("no return value specified for FetchModel")
	}

	var r0 models.Snapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (models.Snapshot, error)); ok {
		return returnFunc(ctx, uuid, includeSoftDel)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) models.Snapshot); ok {
		r0 = returnFunc(ctx, uuid, includeSoftDel)
	} else {
		r0 = ret.Get(0).(models.Snapshot)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, uuid, includeSoftDel)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_FetchModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchModel'
type MockSnapshotDao_FetchModel_Call struct {
	*mock.Call
}

// FetchModel is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - includeSoftDel bool
func (_e *MockSnapshotDao_Expecter) FetchModel(ctx interface{}, uuid interface{}, includeSoftDel interface{}) *MockSnapshotDao_FetchModel_Call {
	return &MockSnapshotDao_FetchModel_Call{Call: _e.mock.On("FetchModel", ctx, uuid, includeSoftDel)}
}

func (_c *MockSnapshotDao_FetchModel_Call) Run(run func(ctx context.Context, uuid string, includeSoftDel bool)) *MockSnapshotDao_FetchModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_FetchModel_Call) Return(snapshot models.Snapshot, err error) *MockSnapshotDao_FetchModel_Call {
	_c.Call.Return(snapshot, err)
	return _c
}

func (_c *MockSnapshotDao_FetchModel_Call) RunAndReturn(run func(ctx context.Context, uuid string, includeSoftDel bool) (models.Snapshot, error)) *MockSnapshotDao_FetchModel_Call {
	_c.Call.Return(run)
	return _c
}

// FetchSnapshotByVersionHref provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) FetchSnapshotByVersionHref(ctx context.Context, repoConfigUUID string, versionHref string) (*api.SnapshotResponse, error) {
	ret := _mock.Called(ctx, repoConfigUUID, versionHref)

	if len(ret) == 0 {
		panic("no return value specified for FetchSnapshotByVersionHref")
	}

	var r0 *api.SnapshotResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*api.SnapshotResponse, error)); ok {
		return returnFunc(ctx, repoConfigUUID, versionHref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *api.SnapshotResponse); ok {
		r0 = returnFunc(ctx, repoConfigUUID, versionHref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SnapshotResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, repoConfigUUID, versionHref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_FetchSnapshotByVersionHref_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSnapshotByVersionHref'
type MockSnapshotDao_FetchSnapshotByVersionHref_Call struct {
	*mock.Call
}

// FetchSnapshotByVersionHref is a helper method to define mock.On call
//   - ctx context.Context
//   - repoConfigUUID string
//   - versionHref string
func (_e *MockSnapshotDao_Expecter) FetchSnapshotByVersionHref(ctx interface{}, repoConfigUUID interface{}, versionHref interface{}) *MockSnapshotDao_FetchSnapshotByVersionHref_Call {
	return &MockSnapshotDao_FetchSnapshotByVersionHref_Call{Call: _e.mock.On("FetchSnapshotByVersionHref", ctx, repoConfigUUID, versionHref)}
}

func (_c *MockSnapshotDao_FetchSnapshotByVersionHref_Call) Run(run func(ctx context.Context, repoConfigUUID string, versionHref string)) *MockSnapshotDao_FetchSnapshotByVersionHref_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_FetchSnapshotByVersionHref_Call) Return(snapshotResponse *api.SnapshotResponse, err error) *MockSnapshotDao_FetchSnapshotByVersionHref_Call {
	_c.Call.Return(snapshotResponse, err)
	return _c
}

func (_c *MockSnapshotDao_FetchSnapshotByVersionHref_Call) RunAndReturn(run func(ctx context.Context, repoConfigUUID string, versionHref string) (*api.SnapshotResponse, error)) *MockSnapshotDao_FetchSnapshotByVersionHref_Call {
	_c.Call.Return(run)
	return _c
}

// FetchSnapshotsByDateAndRepository provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) FetchSnapshotsByDateAndRepository(ctx context.Context, orgID string, request api.ListSnapshotByDateRequest) (api.ListSnapshotByDateResponse, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for FetchSnapshotsByDateAndRepository")
	}

	var r0 api.ListSnapshotByDateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ListSnapshotByDateRequest) (api.ListSnapshotByDateResponse, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ListSnapshotByDateRequest) api.ListSnapshotByDateResponse); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		r0 = ret.Get(0).(api.ListSnapshotByDateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.ListSnapshotByDateRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSnapshotsByDateAndRepository'
type MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call struct {
	*mock.Call
}

// FetchSnapshotsByDateAndRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.ListSnapshotByDateRequest
func (_e *MockSnapshotDao_Expecter) FetchSnapshotsByDateAndRepository(ctx interface{}, orgID interface{}, request interface{}) *MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call {
	return &MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call{Call: _e.mock.On("FetchSnapshotsByDateAndRepository", ctx, orgID, request)}
}

func (_c *MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call) Run(run func(ctx context.Context, orgID string, request api.ListSnapshotByDateRequest)) *MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.ListSnapshotByDateRequest
		if args[2] != nil {
			arg2 = args[2].(api.ListSnapshotByDateRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call) Return(listSnapshotByDateResponse api.ListSnapshotByDateResponse, err error) *MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call {
	_c.Call.Return(listSnapshotByDateResponse, err)
	return _c
}

func (_c *MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.ListSnapshotByDateRequest) (api.ListSnapshotByDateResponse, error)) *MockSnapshotDao_FetchSnapshotsByDateAndRepository_Call {
	_c.Call.Return(run)
	return _c
}

// FetchSnapshotsModelByDateAndRepository provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) FetchSnapshotsModelByDateAndRepository(ctx context.Context, orgID string, request api.ListSnapshotByDateRequest) ([]models.Snapshot, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for FetchSnapshotsModelByDateAndRepository")
	}

	var r0 []models.Snapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ListSnapshotByDateRequest) ([]models.Snapshot, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ListSnapshotByDateRequest) []models.Snapshot); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Snapshot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.ListSnapshotByDateRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSnapshotsModelByDateAndRepository'
type MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call struct {
	*mock.Call
}

// FetchSnapshotsModelByDateAndRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.ListSnapshotByDateRequest
func (_e *MockSnapshotDao_Expecter) FetchSnapshotsModelByDateAndRepository(ctx interface{}, orgID interface{}, request interface{}) *MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call {
	return &MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call{Call: _e.mock.On("FetchSnapshotsModelByDateAndRepository", ctx, orgID, request)}
}

func (_c *MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call) Run(run func(ctx context.Context, orgID string, request api.ListSnapshotByDateRequest)) *MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.ListSnapshotByDateRequest
		if args[2] != nil {
			arg2 = args[2].(api.ListSnapshotByDateRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call) Return(snapshots []models.Snapshot, err error) *MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call {
	_c.Call.Return(snapshots, err)
	return _c
}

func (_c *MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.ListSnapshotByDateRequest) ([]models.Snapshot, error)) *MockSnapshotDao_FetchSnapshotsModelByDateAndRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoryConfigurationFile provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) GetRepositoryConfigurationFile(ctx context.Context, orgID string, snapshotUUID string, isLatest bool) (string, error) {
	ret := _mock.Called(ctx, orgID, snapshotUUID, isLatest)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryConfigurationFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) (string, error)); ok {
		return returnFunc(ctx, orgID, snapshotUUID, isLatest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) string); ok {
		r0 = returnFunc(ctx, orgID, snapshotUUID, isLatest)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = returnFunc(ctx, orgID, snapshotUUID, isLatest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_GetRepositoryConfigurationFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryConfigurationFile'
type MockSnapshotDao_GetRepositoryConfigurationFile_Call struct {
	*mock.Call
}

// GetRepositoryConfigurationFile is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - snapshotUUID string
//   - isLatest bool
func (_e *MockSnapshotDao_Expecter) GetRepositoryConfigurationFile(ctx interface{}, orgID interface{}, snapshotUUID interface{}, isLatest interface{}) *MockSnapshotDao_GetRepositoryConfigurationFile_Call {
	return &MockSnapshotDao_GetRepositoryConfigurationFile_Call{Call: _e.mock.On("GetRepositoryConfigurationFile", ctx, orgID, snapshotUUID, isLatest)}
}

func (_c *MockSnapshotDao_GetRepositoryConfigurationFile_Call) Run(run func(ctx context.Context, orgID string, snapshotUUID string, isLatest bool)) *MockSnapshotDao_GetRepositoryConfigurationFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_GetRepositoryConfigurationFile_Call) Return(s string, err error) *MockSnapshotDao_GetRepositoryConfigurationFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSnapshotDao_GetRepositoryConfigurationFile_Call) RunAndReturn(run func(ctx context.Context, orgID string, snapshotUUID string, isLatest bool) (string, error)) *MockSnapshotDao_GetRepositoryConfigurationFile_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) List(ctx context.Context, orgID string, repoConfigUuid string, paginationData api.PaginationData, filterData api.FilterData) (api.SnapshotCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, orgID, repoConfigUuid, paginationData, filterData)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.SnapshotCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, api.PaginationData, api.FilterData) (api.SnapshotCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, orgID, repoConfigUuid, paginationData, filterData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, api.PaginationData, api.FilterData) api.SnapshotCollectionResponse); ok {
		r0 = returnFunc(ctx, orgID, repoConfigUuid, paginationData, filterData)
	} else {
		r0 = ret.Get(0).(api.SnapshotCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, api.PaginationData, api.FilterData) int64); ok {
		r1 = returnFunc(ctx, orgID, repoConfigUuid, paginationData, filterData)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, api.PaginationData, api.FilterData) error); ok {
		r2 = returnFunc(ctx, orgID, repoConfigUuid, paginationData, filterData)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSnapshotDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSnapshotDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - repoConfigUuid string
//   - paginationData api.PaginationData
//   - filterData api.FilterData
func (_e *MockSnapshotDao_Expecter) List(ctx interface{}, orgID interface{}, repoConfigUuid interface{}, paginationData interface{}, filterData interface{}) *MockSnapshotDao_List_Call {
	return &MockSnapshotDao_List_Call{Call: _e.mock.On("List", ctx, orgID, repoConfigUuid, paginationData, filterData)}
}

func (_c *MockSnapshotDao_List_Call) Run(run func(ctx context.Context, orgID string, repoConfigUuid string, paginationData api.PaginationData, filterData api.FilterData)) *MockSnapshotDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 api.PaginationData
		if args[3] != nil {
			arg3 = args[3].(api.PaginationData)
		}
		var arg4 api.FilterData
		if args[4] != nil {
			arg4 = args[4].(api.FilterData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_List_Call) Return(snapshotCollectionResponse api.SnapshotCollectionResponse, n int64, err error) *MockSnapshotDao_List_Call {
	_c.Call.Return(snapshotCollectionResponse, n, err)
	return _c
}

func (_c *MockSnapshotDao_List_Call) RunAndReturn(run func(ctx context.Context, orgID string, repoConfigUuid string, paginationData api.PaginationData, filterData api.FilterData) (api.SnapshotCollectionResponse, int64, error)) *MockSnapshotDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByTemplate provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) ListByTemplate(ctx context.Context, orgID string, template api.TemplateResponse, repositorySearch string, paginationData api.PaginationData) (api.SnapshotCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, orgID, template, repositorySearch, paginationData)

	if len(ret) == 0 {
		panic("no return value specified for ListByTemplate")
	}

	var r0 api.SnapshotCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.TemplateResponse, string, api.PaginationData) (api.SnapshotCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, orgID, template, repositorySearch, paginationData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.TemplateResponse, string, api.PaginationData) api.SnapshotCollectionResponse); ok {
		r0 = returnFunc(ctx, orgID, template, repositorySearch, paginationData)
	} else {
		r0 = ret.Get(0).(api.SnapshotCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.TemplateResponse, string, api.PaginationData) int64); ok {
		r1 = returnFunc(ctx, orgID, template, repositorySearch, paginationData)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, api.TemplateResponse, string, api.PaginationData) error); ok {
		r2 = returnFunc(ctx, orgID, template, repositorySearch, paginationData)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSnapshotDao_ListByTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByTemplate'
type MockSnapshotDao_ListByTemplate_Call struct {
	*mock.Call
}

// ListByTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - template api.TemplateResponse
//   - repositorySearch string
//   - paginationData api.PaginationData
func (_e *MockSnapshotDao_Expecter) ListByTemplate(ctx interface{}, orgID interface{}, template interface{}, repositorySearch interface{}, paginationData interface{}) *MockSnapshotDao_ListByTemplate_Call {
	return &MockSnapshotDao_ListByTemplate_Call{Call: _e.mock.On("ListByTemplate", ctx, orgID, template, repositorySearch, paginationData)}
}

func (_c *MockSnapshotDao_ListByTemplate_Call) Run(run func(ctx context.Context, orgID string, template api.TemplateResponse, repositorySearch string, paginationData api.PaginationData)) *MockSnapshotDao_ListByTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.TemplateResponse
		if args[2] != nil {
			arg2 = args[2].(api.TemplateResponse)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 api.PaginationData
		if args[4] != nil {
			arg4 = args[4].(api.PaginationData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_ListByTemplate_Call) Return(snapshotCollectionResponse api.SnapshotCollectionResponse, n int64, err error) *MockSnapshotDao_ListByTemplate_Call {
	_c.Call.Return(snapshotCollectionResponse, n, err)
	return _c
}

func (_c *MockSnapshotDao_ListByTemplate_Call) RunAndReturn(run func(ctx context.Context, orgID string, template api.TemplateResponse, repositorySearch string, paginationData api.PaginationData) (api.SnapshotCollectionResponse, int64, error)) *MockSnapshotDao_ListByTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// SetDetectedOSVersion provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) SetDetectedOSVersion(ctx context.Context, uuid string) (string, error) {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for SetDetectedOSVersion")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, uuid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSnapshotDao_SetDetectedOSVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDetectedOSVersion'
type MockSnapshotDao_SetDetectedOSVersion_Call struct {
	*mock.Call
}

// SetDetectedOSVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockSnapshotDao_Expecter) SetDetectedOSVersion(ctx interface{}, uuid interface{}) *MockSnapshotDao_SetDetectedOSVersion_Call {
	return &MockSnapshotDao_SetDetectedOSVersion_Call{Call: _e.mock.On("SetDetectedOSVersion", ctx, uuid)}
}

func (_c *MockSnapshotDao_SetDetectedOSVersion_Call) Run(run func(ctx context.Context, uuid string)) *MockSnapshotDao_SetDetectedOSVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_SetDetectedOSVersion_Call) Return(s string, err error) *MockSnapshotDao_SetDetectedOSVersion_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSnapshotDao_SetDetectedOSVersion_Call) RunAndReturn(run func(ctx context.Context, uuid string) (string, error)) *MockSnapshotDao_SetDetectedOSVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDelete provides a mock function for the type MockSnapshotDao
func (_mock *MockSnapshotDao) SoftDelete(ctx context.Context, snapUUID string) error {
	ret := _mock.Called(ctx, snapUUID)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, snapUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSnapshotDao_SoftDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDelete'
type MockSnapshotDao_SoftDelete_Call struct {
	*mock.Call
}

// SoftDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - snapUUID string
func (_e *MockSnapshotDao_Expecter) SoftDelete(ctx interface{}, snapUUID interface{}) *MockSnapshotDao_SoftDelete_Call {
	return &MockSnapshotDao_SoftDelete_Call{Call: _e.mock.On("SoftDelete", ctx, snapUUID)}
}

func (_c *MockSnapshotDao_SoftDelete_Call) Run(run func(ctx context.Context, snapUUID string)) *MockSnapshotDao_SoftDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSnapshotDao_SoftDelete_Call) Return(err error) *MockSnapshotDao_SoftDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSnapshotDao_SoftDelete_Call) RunAndReturn(run func(ctx context.Context, snapUUID string) error) *MockSnapshotDao_SoftDelete_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricsDao creates a new instance of MockMetricsDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsDao {
	mock := &MockMetricsDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsDao is an autogenerated mock type for the MetricsDao type
type MockMetricsDao struct {
	mock.Mock
}

type MockMetricsDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsDao) EXPECT() *MockMetricsDao_Expecter {
	return &MockMetricsDao_Expecter{mock: &_m.Mock}
}

// OrganizationTotal provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) OrganizationTotal(ctx context.Context) int64 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationTotal")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockMetricsDao_OrganizationTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationTotal'
type MockMetricsDao_OrganizationTotal_Call struct {
	*mock.Call
}

// OrganizationTotal is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) OrganizationTotal(ctx interface{}) *MockMetricsDao_OrganizationTotal_Call {
	return &MockMetricsDao_OrganizationTotal_Call{Call: _e.mock.On("OrganizationTotal", ctx)}
}

func (_c *MockMetricsDao_OrganizationTotal_Call) Run(run func(ctx context.Context)) *MockMetricsDao_OrganizationTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_OrganizationTotal_Call) Return(n int64) *MockMetricsDao_OrganizationTotal_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_OrganizationTotal_Call) RunAndReturn(run func(ctx context.Context) int64) *MockMetricsDao_OrganizationTotal_Call {
	_c.Call.Return(run)
	return _c
}

// PendingTasksAverageLatency provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) PendingTasksAverageLatency(ctx context.Context) float64 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PendingTasksAverageLatency")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockMetricsDao_PendingTasksAverageLatency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingTasksAverageLatency'
type MockMetricsDao_PendingTasksAverageLatency_Call struct {
	*mock.Call
}

// PendingTasksAverageLatency is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) PendingTasksAverageLatency(ctx interface{}) *MockMetricsDao_PendingTasksAverageLatency_Call {
	return &MockMetricsDao_PendingTasksAverageLatency_Call{Call: _e.mock.On("PendingTasksAverageLatency", ctx)}
}

func (_c *MockMetricsDao_PendingTasksAverageLatency_Call) Run(run func(ctx context.Context)) *MockMetricsDao_PendingTasksAverageLatency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_PendingTasksAverageLatency_Call) Return(f float64) *MockMetricsDao_PendingTasksAverageLatency_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockMetricsDao_PendingTasksAverageLatency_Call) RunAndReturn(run func(ctx context.Context) float64) *MockMetricsDao_PendingTasksAverageLatency_Call {
	_c.Call.Return(run)
	return _c
}

// PendingTasksCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) PendingTasksCount(ctx context.Context) int64 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PendingTasksCount")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockMetricsDao_PendingTasksCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingTasksCount'
type MockMetricsDao_PendingTasksCount_Call struct {
	*mock.Call
}

// PendingTasksCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) PendingTasksCount(ctx interface{}) *MockMetricsDao_PendingTasksCount_Call {
	return &MockMetricsDao_PendingTasksCount_Call{Call: _e.mock.On("PendingTasksCount", ctx)}
}

func (_c *MockMetricsDao_PendingTasksCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_PendingTasksCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_PendingTasksCount_Call) Return(n int64) *MockMetricsDao_PendingTasksCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_PendingTasksCount_Call) RunAndReturn(run func(ctx context.Context) int64) *MockMetricsDao_PendingTasksCount_Call {
	_c.Call.Return(run)
	return _c
}

// PendingTasksOldestTask provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) PendingTasksOldestTask(ctx context.Context) float64 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PendingTasksOldestTask")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockMetricsDao_PendingTasksOldestTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingTasksOldestTask'
type MockMetricsDao_PendingTasksOldestTask_Call struct {
	*mock.Call
}

// PendingTasksOldestTask is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) PendingTasksOldestTask(ctx interface{}) *MockMetricsDao_PendingTasksOldestTask_Call {
	return &MockMetricsDao_PendingTasksOldestTask_Call{Call: _e.mock.On("PendingTasksOldestTask", ctx)}
}

func (_c *MockMetricsDao_PendingTasksOldestTask_Call) Run(run func(ctx context.Context)) *MockMetricsDao_PendingTasksOldestTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_PendingTasksOldestTask_Call) Return(f float64) *MockMetricsDao_PendingTasksOldestTask_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockMetricsDao_PendingTasksOldestTask_Call) RunAndReturn(run func(ctx context.Context) float64) *MockMetricsDao_PendingTasksOldestTask_Call {
	_c.Call.Return(run)
	return _c
}

// PublicRepositoriesFailedIntrospectionCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) PublicRepositoriesFailedIntrospectionCount(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PublicRepositoriesFailedIntrospectionCount")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicRepositoriesFailedIntrospectionCount'
type MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call struct {
	*mock.Call
}

// PublicRepositoriesFailedIntrospectionCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) PublicRepositoriesFailedIntrospectionCount(ctx interface{}) *MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call {
	return &MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call{Call: _e.mock.On("PublicRepositoriesFailedIntrospectionCount", ctx)}
}

func (_c *MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call) Return(n int) *MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call) RunAndReturn(run func(ctx context.Context) int) *MockMetricsDao_PublicRepositoriesFailedIntrospectionCount_Call {
	_c.Call.Return(run)
	return _c
}

// RHReposSnapshotNotCompletedInLast36HoursCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) RHReposSnapshotNotCompletedInLast36HoursCount(ctx context.Context) int64 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RHReposSnapshotNotCompletedInLast36HoursCount")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RHReposSnapshotNotCompletedInLast36HoursCount'
type MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call struct {
	*mock.Call
}

// RHReposSnapshotNotCompletedInLast36HoursCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) RHReposSnapshotNotCompletedInLast36HoursCount(ctx interface{}) *MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call {
	return &MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call{Call: _e.mock.On("RHReposSnapshotNotCompletedInLast36HoursCount", ctx)}
}

func (_c *MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call) Return(n int64) *MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call) RunAndReturn(run func(ctx context.Context) int64) *MockMetricsDao_RHReposSnapshotNotCompletedInLast36HoursCount_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoriesCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) RepositoriesCount(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RepositoriesCount")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockMetricsDao_RepositoriesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoriesCount'
type MockMetricsDao_RepositoriesCount_Call struct {
	*mock.Call
}

// RepositoriesCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) RepositoriesCount(ctx interface{}) *MockMetricsDao_RepositoriesCount_Call {
	return &MockMetricsDao_RepositoriesCount_Call{Call: _e.mock.On("RepositoriesCount", ctx)}
}

func (_c *MockMetricsDao_RepositoriesCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_RepositoriesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_RepositoriesCount_Call) Return(n int) *MockMetricsDao_RepositoriesCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_RepositoriesCount_Call) RunAndReturn(run func(ctx context.Context) int) *MockMetricsDao_RepositoriesCount_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoriesIntrospectionCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) RepositoriesIntrospectionCount(ctx context.Context, hours int, public bool) IntrospectionCount {
	ret := _mock.Called(ctx, hours, public)

	if len(ret) == 0 {
		panic("no return value specified for RepositoriesIntrospectionCount")
	}

	var r0 IntrospectionCount
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, bool) IntrospectionCount); ok {
		r0 = returnFunc(ctx, hours, public)
	} else {
		r0 = ret.Get(0).(IntrospectionCount)
	}
	return r0
}

// MockMetricsDao_RepositoriesIntrospectionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoriesIntrospectionCount'
type MockMetricsDao_RepositoriesIntrospectionCount_Call struct {
	*mock.Call
}

// RepositoriesIntrospectionCount is a helper method to define mock.On call
//   - ctx context.Context
//   - hours int
//   - public bool
func (_e *MockMetricsDao_Expecter) RepositoriesIntrospectionCount(ctx interface{}, hours interface{}, public interface{}) *MockMetricsDao_RepositoriesIntrospectionCount_Call {
	return &MockMetricsDao_RepositoriesIntrospectionCount_Call{Call: _e.mock.On("RepositoriesIntrospectionCount", ctx, hours, public)}
}

func (_c *MockMetricsDao_RepositoriesIntrospectionCount_Call) Run(run func(ctx context.Context, hours int, public bool)) *MockMetricsDao_RepositoriesIntrospectionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetricsDao_RepositoriesIntrospectionCount_Call) Return(introspectionCount IntrospectionCount) *MockMetricsDao_RepositoriesIntrospectionCount_Call {
	_c.Call.Return(introspectionCount)
	return _c
}

func (_c *MockMetricsDao_RepositoriesIntrospectionCount_Call) RunAndReturn(run func(ctx context.Context, hours int, public bool) IntrospectionCount) *MockMetricsDao_RepositoriesIntrospectionCount_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoryConfigsCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) RepositoryConfigsCount(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryConfigsCount")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockMetricsDao_RepositoryConfigsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoryConfigsCount'
type MockMetricsDao_RepositoryConfigsCount_Call struct {
	*mock.Call
}

// RepositoryConfigsCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) RepositoryConfigsCount(ctx interface{}) *MockMetricsDao_RepositoryConfigsCount_Call {
	return &MockMetricsDao_RepositoryConfigsCount_Call{Call: _e.mock.On("RepositoryConfigsCount", ctx)}
}

func (_c *MockMetricsDao_RepositoryConfigsCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_RepositoryConfigsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_RepositoryConfigsCount_Call) Return(n int) *MockMetricsDao_RepositoryConfigsCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_RepositoryConfigsCount_Call) RunAndReturn(run func(ctx context.Context) int) *MockMetricsDao_RepositoryConfigsCount_Call {
	_c.Call.Return(run)
	return _c
}

// TaskPendingTimeAverageByType provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) TaskPendingTimeAverageByType(ctx context.Context) []TaskTypePendingTimeAverage {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TaskPendingTimeAverageByType")
	}

	var r0 []TaskTypePendingTimeAverage
	if returnFunc, ok := ret.Get(0).(func(context.Context) []TaskTypePendingTimeAverage); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TaskTypePendingTimeAverage)
		}
	}
	return r0
}

// MockMetricsDao_TaskPendingTimeAverageByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskPendingTimeAverageByType'
type MockMetricsDao_TaskPendingTimeAverageByType_Call struct {
	*mock.Call
}

// TaskPendingTimeAverageByType is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) TaskPendingTimeAverageByType(ctx interface{}) *MockMetricsDao_TaskPendingTimeAverageByType_Call {
	return &MockMetricsDao_TaskPendingTimeAverageByType_Call{Call: _e.mock.On("TaskPendingTimeAverageByType", ctx)}
}

func (_c *MockMetricsDao_TaskPendingTimeAverageByType_Call) Run(run func(ctx context.Context)) *MockMetricsDao_TaskPendingTimeAverageByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_TaskPendingTimeAverageByType_Call) Return(taskTypePendingTimeAverages []TaskTypePendingTimeAverage) *MockMetricsDao_TaskPendingTimeAverageByType_Call {
	_c.Call.Return(taskTypePendingTimeAverages)
	return _c
}

func (_c *MockMetricsDao_TaskPendingTimeAverageByType_Call) RunAndReturn(run func(ctx context.Context) []TaskTypePendingTimeAverage) *MockMetricsDao_TaskPendingTimeAverageByType_Call {
	_c.Call.Return(run)
	return _c
}

// TemplatesAgeAverage provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) TemplatesAgeAverage(ctx context.Context) float64 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TemplatesAgeAverage")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockMetricsDao_TemplatesAgeAverage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TemplatesAgeAverage'
type MockMetricsDao_TemplatesAgeAverage_Call struct {
	*mock.Call
}

// TemplatesAgeAverage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) TemplatesAgeAverage(ctx interface{}) *MockMetricsDao_TemplatesAgeAverage_Call {
	return &MockMetricsDao_TemplatesAgeAverage_Call{Call: _e.mock.On("TemplatesAgeAverage", ctx)}
}

func (_c *MockMetricsDao_TemplatesAgeAverage_Call) Run(run func(ctx context.Context)) *MockMetricsDao_TemplatesAgeAverage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_TemplatesAgeAverage_Call) Return(f float64) *MockMetricsDao_TemplatesAgeAverage_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockMetricsDao_TemplatesAgeAverage_Call) RunAndReturn(run func(ctx context.Context) float64) *MockMetricsDao_TemplatesAgeAverage_Call {
	_c.Call.Return(run)
	return _c
}

// TemplatesUpdatedInLast24HoursCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) TemplatesUpdatedInLast24HoursCount(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TemplatesUpdatedInLast24HoursCount")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TemplatesUpdatedInLast24HoursCount'
type MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call struct {
	*mock.Call
}

// TemplatesUpdatedInLast24HoursCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) TemplatesUpdatedInLast24HoursCount(ctx interface{}) *MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call {
	return &MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call{Call: _e.mock.On("TemplatesUpdatedInLast24HoursCount", ctx)}
}

func (_c *MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call) Return(n int) *MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call) RunAndReturn(run func(ctx context.Context) int) *MockMetricsDao_TemplatesUpdatedInLast24HoursCount_Call {
	_c.Call.Return(run)
	return _c
}

// TemplatesUseDateCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) TemplatesUseDateCount(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TemplatesUseDateCount")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockMetricsDao_TemplatesUseDateCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TemplatesUseDateCount'
type MockMetricsDao_TemplatesUseDateCount_Call struct {
	*mock.Call
}

// TemplatesUseDateCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) TemplatesUseDateCount(ctx interface{}) *MockMetricsDao_TemplatesUseDateCount_Call {
	return &MockMetricsDao_TemplatesUseDateCount_Call{Call: _e.mock.On("TemplatesUseDateCount", ctx)}
}

func (_c *MockMetricsDao_TemplatesUseDateCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_TemplatesUseDateCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_TemplatesUseDateCount_Call) Return(n int) *MockMetricsDao_TemplatesUseDateCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_TemplatesUseDateCount_Call) RunAndReturn(run func(ctx context.Context) int) *MockMetricsDao_TemplatesUseDateCount_Call {
	_c.Call.Return(run)
	return _c
}

// TemplatesUseLatestCount provides a mock function for the type MockMetricsDao
func (_mock *MockMetricsDao) TemplatesUseLatestCount(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TemplatesUseLatestCount")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockMetricsDao_TemplatesUseLatestCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TemplatesUseLatestCount'
type MockMetricsDao_TemplatesUseLatestCount_Call struct {
	*mock.Call
}

// TemplatesUseLatestCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsDao_Expecter) TemplatesUseLatestCount(ctx interface{}) *MockMetricsDao_TemplatesUseLatestCount_Call {
	return &MockMetricsDao_TemplatesUseLatestCount_Call{Call: _e.mock.On("TemplatesUseLatestCount", ctx)}
}

func (_c *MockMetricsDao_TemplatesUseLatestCount_Call) Run(run func(ctx context.Context)) *MockMetricsDao_TemplatesUseLatestCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsDao_TemplatesUseLatestCount_Call) Return(n int) *MockMetricsDao_TemplatesUseLatestCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMetricsDao_TemplatesUseLatestCount_Call) RunAndReturn(run func(ctx context.Context) int) *MockMetricsDao_TemplatesUseLatestCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskInfoDao creates a new instance of MockTaskInfoDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskInfoDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskInfoDao {
	mock := &MockTaskInfoDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskInfoDao is an autogenerated mock type for the TaskInfoDao type
type MockTaskInfoDao struct {
	mock.Mock
}

type MockTaskInfoDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskInfoDao) EXPECT() *MockTaskInfoDao_Expecter {
	return &MockTaskInfoDao_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function for the type MockTaskInfoDao
func (_mock *MockTaskInfoDao) Cleanup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskInfoDao_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type MockTaskInfoDao_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTaskInfoDao_Expecter) Cleanup(ctx interface{}) *MockTaskInfoDao_Cleanup_Call {
	return &MockTaskInfoDao_Cleanup_Call{Call: _e.mock.On("Cleanup", ctx)}
}

func (_c *MockTaskInfoDao_Cleanup_Call) Run(run func(ctx context.Context)) *MockTaskInfoDao_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTaskInfoDao_Cleanup_Call) Return(err error) *MockTaskInfoDao_Cleanup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskInfoDao_Cleanup_Call) RunAndReturn(run func(ctx context.Context) error) *MockTaskInfoDao_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type MockTaskInfoDao
func (_mock *MockTaskInfoDao) Fetch(ctx context.Context, OrgID string, id string) (api.TaskInfoResponse, error) {
	ret := _mock.Called(ctx, OrgID, id)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 api.TaskInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (api.TaskInfoResponse, error)); ok {
		return returnFunc(ctx, OrgID, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) api.TaskInfoResponse); ok {
		r0 = returnFunc(ctx, OrgID, id)
	} else {
		r0 = ret.Get(0).(api.TaskInfoResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, OrgID, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskInfoDao_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockTaskInfoDao_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - OrgID string
//   - id string
func (_e *MockTaskInfoDao_Expecter) Fetch(ctx interface{}, OrgID interface{}, id interface{}) *MockTaskInfoDao_Fetch_Call {
	return &MockTaskInfoDao_Fetch_Call{Call: _e.mock.On("Fetch", ctx, OrgID, id)}
}

func (_c *MockTaskInfoDao_Fetch_Call) Run(run func(ctx context.Context, OrgID string, id string)) *MockTaskInfoDao_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTaskInfoDao_Fetch_Call) Return(taskInfoResponse api.TaskInfoResponse, err error) *MockTaskInfoDao_Fetch_Call {
	_c.Call.Return(taskInfoResponse, err)
	return _c
}

func (_c *MockTaskInfoDao_Fetch_Call) RunAndReturn(run func(ctx context.Context, OrgID string, id string) (api.TaskInfoResponse, error)) *MockTaskInfoDao_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// FetchActiveTasks provides a mock function for the type MockTaskInfoDao
func (_mock *MockTaskInfoDao) FetchActiveTasks(ctx context.Context, orgID string, objectUUID string, taskTypes ...string) ([]string, error) {
	// string
	_va := make([]interface{}, len(taskTypes))
	for _i := range taskTypes {
		_va[_i] = taskTypes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgID, objectUUID)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchActiveTasks")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) ([]string, error)); ok {
		return returnFunc(ctx, orgID, objectUUID, taskTypes...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) []string); ok {
		r0 = returnFunc(ctx, orgID, objectUUID, taskTypes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...string) error); ok {
		r1 = returnFunc(ctx, orgID, objectUUID, taskTypes...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskInfoDao_FetchActiveTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchActiveTasks'
type MockTaskInfoDao_FetchActiveTasks_Call struct {
	*mock.Call
}

// FetchActiveTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - objectUUID string
//   - taskTypes ...string
func (_e *MockTaskInfoDao_Expecter) FetchActiveTasks(ctx interface{}, orgID interface{}, objectUUID interface{}, taskTypes ...interface{}) *MockTaskInfoDao_FetchActiveTasks_Call {
	return &MockTaskInfoDao_FetchActiveTasks_Call{Call: _e.mock.On("FetchActiveTasks",
		append([]interface{}{ctx, orgID, objectUUID}, taskTypes...)...)}
}

func (_c *MockTaskInfoDao_FetchActiveTasks_Call) Run(run func(ctx context.Context, orgID string, objectUUID string, taskTypes ...string)) *MockTaskInfoDao_FetchActiveTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []string
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockTaskInfoDao_FetchActiveTasks_Call) Return(strings []string, err error) *MockTaskInfoDao_FetchActiveTasks_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockTaskInfoDao_FetchActiveTasks_Call) RunAndReturn(run func(ctx context.Context, orgID string, objectUUID string, taskTypes ...string) ([]string, error)) *MockTaskInfoDao_FetchActiveTasks_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockTaskInfoDao
func (_mock *MockTaskInfoDao) List(ctx context.Context, OrgID string, pageData api.PaginationData, filterData api.TaskInfoFilterData) (api.TaskInfoCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, OrgID, pageData, filterData)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.TaskInfoCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.PaginationData, api.TaskInfoFilterData) (api.TaskInfoCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, OrgID, pageData, filterData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.PaginationData, api.TaskInfoFilterData) api.TaskInfoCollectionResponse); ok {
		r0 = returnFunc(ctx, OrgID, pageData, filterData)
	} else {
		r0 = ret.Get(0).(api.TaskInfoCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.PaginationData, api.TaskInfoFilterData) int64); ok {
		r1 = returnFunc(ctx, OrgID, pageData, filterData)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, api.PaginationData, api.TaskInfoFilterData) error); ok {
		r2 = returnFunc(ctx, OrgID, pageData, filterData)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTaskInfoDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTaskInfoDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - OrgID string
//   - pageData api.PaginationData
//   - filterData api.TaskInfoFilterData
func (_e *MockTaskInfoDao_Expecter) List(ctx interface{}, OrgID interface{}, pageData interface{}, filterData interface{}) *MockTaskInfoDao_List_Call {
	return &MockTaskInfoDao_List_Call{Call: _e.mock.On("List", ctx, OrgID, pageData, filterData)}
}

func (_c *MockTaskInfoDao_List_Call) Run(run func(ctx context.Context, OrgID string, pageData api.PaginationData, filterData api.TaskInfoFilterData)) *MockTaskInfoDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.PaginationData
		if args[2] != nil {
			arg2 = args[2].(api.PaginationData)
		}
		var arg3 api.TaskInfoFilterData
		if args[3] != nil {
			arg3 = args[3].(api.TaskInfoFilterData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTaskInfoDao_List_Call) Return(taskInfoCollectionResponse api.TaskInfoCollectionResponse, n int64, err error) *MockTaskInfoDao_List_Call {
	_c.Call.Return(taskInfoCollectionResponse, n, err)
	return _c
}

func (_c *MockTaskInfoDao_List_Call) RunAndReturn(run func(ctx context.Context, OrgID string, pageData api.PaginationData, filterData api.TaskInfoFilterData) (api.TaskInfoCollectionResponse, int64, error)) *MockTaskInfoDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdminTaskDao creates a new instance of MockAdminTaskDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdminTaskDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdminTaskDao {
	mock := &MockAdminTaskDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAdminTaskDao is an autogenerated mock type for the AdminTaskDao type
type MockAdminTaskDao struct {
	mock.Mock
}

type MockAdminTaskDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminTaskDao) EXPECT() *MockAdminTaskDao_Expecter {
	return &MockAdminTaskDao_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type MockAdminTaskDao
func (_mock *MockAdminTaskDao) Fetch(ctx context.Context, id string) (api.AdminTaskInfoResponse, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 api.AdminTaskInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (api.AdminTaskInfoResponse, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) api.AdminTaskInfoResponse); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(api.AdminTaskInfoResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAdminTaskDao_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockAdminTaskDao_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAdminTaskDao_Expecter) Fetch(ctx interface{}, id interface{}) *MockAdminTaskDao_Fetch_Call {
	return &MockAdminTaskDao_Fetch_Call{Call: _e.mock.On("Fetch", ctx, id)}
}

func (_c *MockAdminTaskDao_Fetch_Call) Run(run func(ctx context.Context, id string)) *MockAdminTaskDao_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAdminTaskDao_Fetch_Call) Return(adminTaskInfoResponse api.AdminTaskInfoResponse, err error) *MockAdminTaskDao_Fetch_Call {
	_c.Call.Return(adminTaskInfoResponse, err)
	return _c
}

func (_c *MockAdminTaskDao_Fetch_Call) RunAndReturn(run func(ctx context.Context, id string) (api.AdminTaskInfoResponse, error)) *MockAdminTaskDao_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockAdminTaskDao
func (_mock *MockAdminTaskDao) List(ctx context.Context, pageData api.PaginationData, filterData api.AdminTaskFilterData) (api.AdminTaskInfoCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, pageData, filterData)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.AdminTaskInfoCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.PaginationData, api.AdminTaskFilterData) (api.AdminTaskInfoCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, pageData, filterData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.PaginationData, api.AdminTaskFilterData) api.AdminTaskInfoCollectionResponse); ok {
		r0 = returnFunc(ctx, pageData, filterData)
	} else {
		r0 = ret.Get(0).(api.AdminTaskInfoCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, api.PaginationData, api.AdminTaskFilterData) int64); ok {
		r1 = returnFunc(ctx, pageData, filterData)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, api.PaginationData, api.AdminTaskFilterData) error); ok {
		r2 = returnFunc(ctx, pageData, filterData)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAdminTaskDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAdminTaskDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - pageData api.PaginationData
//   - filterData api.AdminTaskFilterData
func (_e *MockAdminTaskDao_Expecter) List(ctx interface{}, pageData interface{}, filterData interface{}) *MockAdminTaskDao_List_Call {
	return &MockAdminTaskDao_List_Call{Call: _e.mock.On("List", ctx, pageData, filterData)}
}

func (_c *MockAdminTaskDao_List_Call) Run(run func(ctx context.Context, pageData api.PaginationData, filterData api.AdminTaskFilterData)) *MockAdminTaskDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.PaginationData
		if args[1] != nil {
			arg1 = args[1].(api.PaginationData)
		}
		var arg2 api.AdminTaskFilterData
		if args[2] != nil {
			arg2 = args[2].(api.AdminTaskFilterData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAdminTaskDao_List_Call) Return(adminTaskInfoCollectionResponse api.AdminTaskInfoCollectionResponse, n int64, err error) *MockAdminTaskDao_List_Call {
	_c.Call.Return(adminTaskInfoCollectionResponse, n, err)
	return _c
}

func (_c *MockAdminTaskDao_List_Call) RunAndReturn(run func(ctx context.Context, pageData api.PaginationData, filterData api.AdminTaskFilterData) (api.AdminTaskInfoCollectionResponse, int64, error)) *MockAdminTaskDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainDao creates a new instance of MockDomainDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainDao {
	mock := &MockDomainDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainDao is an autogenerated mock type for the DomainDao type
type MockDomainDao struct {
	mock.Mock
}

type MockDomainDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainDao) EXPECT() *MockDomainDao_Expecter {
	return &MockDomainDao_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockDomainDao
func (_mock *MockDomainDao) Delete(ctx context.Context, orgId string, domainName string) error {
	ret := _mock.Called(ctx, orgId, domainName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, orgId, domainName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainDao_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDomainDao_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - domainName string
func (_e *MockDomainDao_Expecter) Delete(ctx interface{}, orgId interface{}, domainName interface{}) *MockDomainDao_Delete_Call {
	return &MockDomainDao_Delete_Call{Call: _e.mock.On("Delete", ctx, orgId, domainName)}
}

func (_c *MockDomainDao_Delete_Call) Run(run func(ctx context.Context, orgId string, domainName string)) *MockDomainDao_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainDao_Delete_Call) Return(err error) *MockDomainDao_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainDao_Delete_Call) RunAndReturn(run func(ctx context.Context, orgId string, domainName string) error) *MockDomainDao_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type MockDomainDao
func (_mock *MockDomainDao) Fetch(ctx context.Context, orgId string) (string, error) {
	ret := _mock.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, orgId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, orgId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orgId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainDao_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockDomainDao_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *MockDomainDao_Expecter) Fetch(ctx interface{}, orgId interface{}) *MockDomainDao_Fetch_Call {
	return &MockDomainDao_Fetch_Call{Call: _e.mock.On("Fetch", ctx, orgId)}
}

func (_c *MockDomainDao_Fetch_Call) Run(run func(ctx context.Context, orgId string)) *MockDomainDao_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainDao_Fetch_Call) Return(s string, err error) *MockDomainDao_Fetch_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainDao_Fetch_Call) RunAndReturn(run func(ctx context.Context, orgId string) (string, error)) *MockDomainDao_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// FetchOrCreateDomain provides a mock function for the type MockDomainDao
func (_mock *MockDomainDao) FetchOrCreateDomain(ctx context.Context, orgId string) (string, error) {
	ret := _mock.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for FetchOrCreateDomain")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, orgId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, orgId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orgId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainDao_FetchOrCreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchOrCreateDomain'
type MockDomainDao_FetchOrCreateDomain_Call struct {
	*mock.Call
}

// FetchOrCreateDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *MockDomainDao_Expecter) FetchOrCreateDomain(ctx interface{}, orgId interface{}) *MockDomainDao_FetchOrCreateDomain_Call {
	return &MockDomainDao_FetchOrCreateDomain_Call{Call: _e.mock.On("FetchOrCreateDomain", ctx, orgId)}
}

func (_c *MockDomainDao_FetchOrCreateDomain_Call) Run(run func(ctx context.Context, orgId string)) *MockDomainDao_FetchOrCreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainDao_FetchOrCreateDomain_Call) Return(s string, err error) *MockDomainDao_FetchOrCreateDomain_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainDao_FetchOrCreateDomain_Call) RunAndReturn(run func(ctx context.Context, orgId string) (string, error)) *MockDomainDao_FetchOrCreateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockDomainDao
func (_mock *MockDomainDao) List(ctx context.Context) ([]models.Domain, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Domain, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Domain); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Domain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDomainDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDomainDao_Expecter) List(ctx interface{}) *MockDomainDao_List_Call {
	return &MockDomainDao_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockDomainDao_List_Call) Run(run func(ctx context.Context)) *MockDomainDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainDao_List_Call) Return(domains []models.Domain, err error) *MockDomainDao_List_Call {
	_c.Call.Return(domains, err)
	return _c
}

func (_c *MockDomainDao_List_Call) RunAndReturn(run func(ctx context.Context) ([]models.Domain, error)) *MockDomainDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackageGroupDao creates a new instance of MockPackageGroupDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackageGroupDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackageGroupDao {
	mock := &MockPackageGroupDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPackageGroupDao is an autogenerated mock type for the PackageGroupDao type
type MockPackageGroupDao struct {
	mock.Mock
}

type MockPackageGroupDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageGroupDao) EXPECT() *MockPackageGroupDao_Expecter {
	return &MockPackageGroupDao_Expecter{mock: &_m.Mock}
}

// InsertForRepository provides a mock function for the type MockPackageGroupDao
func (_mock *MockPackageGroupDao) InsertForRepository(ctx context.Context, repoUuid string, pkgGroups []yum.PackageGroup) (int64, error) {
	ret := _mock.Called(ctx, repoUuid, pkgGroups)

	if len(ret) == 0 {
		panic("no return value specified for InsertForRepository")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.PackageGroup) (int64, error)); ok {
		return returnFunc(ctx, repoUuid, pkgGroups)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.PackageGroup) int64); ok {
		r0 = returnFunc(ctx, repoUuid, pkgGroups)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []yum.PackageGroup) error); ok {
		r1 = returnFunc(ctx, repoUuid, pkgGroups)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackageGroupDao_InsertForRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertForRepository'
type MockPackageGroupDao_InsertForRepository_Call struct {
	*mock.Call
}

// InsertForRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repoUuid string
//   - pkgGroups []yum.PackageGroup
func (_e *MockPackageGroupDao_Expecter) InsertForRepository(ctx interface{}, repoUuid interface{}, pkgGroups interface{}) *MockPackageGroupDao_InsertForRepository_Call {
	return &MockPackageGroupDao_InsertForRepository_Call{Call: _e.mock.On("InsertForRepository", ctx, repoUuid, pkgGroups)}
}

func (_c *MockPackageGroupDao_InsertForRepository_Call) Run(run func(ctx context.Context, repoUuid string, pkgGroups []yum.PackageGroup)) *MockPackageGroupDao_InsertForRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []yum.PackageGroup
		if args[2] != nil {
			arg2 = args[2].([]yum.PackageGroup)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPackageGroupDao_InsertForRepository_Call) Return(n int64, err error) *MockPackageGroupDao_InsertForRepository_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPackageGroupDao_InsertForRepository_Call) RunAndReturn(run func(ctx context.Context, repoUuid string, pkgGroups []yum.PackageGroup) (int64, error)) *MockPackageGroupDao_InsertForRepository_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockPackageGroupDao
func (_mock *MockPackageGroupDao) List(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string) (api.RepositoryPackageGroupCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, orgID, uuidRepo, limit, offset, search, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.RepositoryPackageGroupCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int, string, string) (api.RepositoryPackageGroupCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int, string, string) api.RepositoryPackageGroupCollectionResponse); ok {
		r0 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r0 = ret.Get(0).(api.RepositoryPackageGroupCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, int, string, string) int64); ok {
		r1 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, int, string, string) error); ok {
		r2 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPackageGroupDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPackageGroupDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuidRepo string
//   - limit int
//   - offset int
//   - search string
//   - sortBy string
func (_e *MockPackageGroupDao_Expecter) List(ctx interface{}, orgID interface{}, uuidRepo interface{}, limit interface{}, offset interface{}, search interface{}, sortBy interface{}) *MockPackageGroupDao_List_Call {
	return &MockPackageGroupDao_List_Call{Call: _e.mock.On("List", ctx, orgID, uuidRepo, limit, offset, search, sortBy)}
}

func (_c *MockPackageGroupDao_List_Call) Run(run func(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string)) *MockPackageGroupDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockPackageGroupDao_List_Call) Return(repositoryPackageGroupCollectionResponse api.RepositoryPackageGroupCollectionResponse, n int64, err error) *MockPackageGroupDao_List_Call {
	_c.Call.Return(repositoryPackageGroupCollectionResponse, n, err)
	return _c
}

func (_c *MockPackageGroupDao_List_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string) (api.RepositoryPackageGroupCollectionResponse, int64, error)) *MockPackageGroupDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// OrphanCleanup provides a mock function for the type MockPackageGroupDao
func (_mock *MockPackageGroupDao) OrphanCleanup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OrphanCleanup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPackageGroupDao_OrphanCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrphanCleanup'
type MockPackageGroupDao_OrphanCleanup_Call struct {
	*mock.Call
}

// OrphanCleanup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageGroupDao_Expecter) OrphanCleanup(ctx interface{}) *MockPackageGroupDao_OrphanCleanup_Call {
	return &MockPackageGroupDao_OrphanCleanup_Call{Call: _e.mock.On("OrphanCleanup", ctx)}
}

func (_c *MockPackageGroupDao_OrphanCleanup_Call) Run(run func(ctx context.Context)) *MockPackageGroupDao_OrphanCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPackageGroupDao_OrphanCleanup_Call) Return(err error) *MockPackageGroupDao_OrphanCleanup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPackageGroupDao_OrphanCleanup_Call) RunAndReturn(run func(ctx context.Context) error) *MockPackageGroupDao_OrphanCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockPackageGroupDao
func (_mock *MockPackageGroupDao) Search(ctx context.Context, orgID string, request api.ContentUnitSearchRequest) ([]api.SearchPackageGroupResponse, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []api.SearchPackageGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ContentUnitSearchRequest) ([]api.SearchPackageGroupResponse, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ContentUnitSearchRequest) []api.SearchPackageGroupResponse); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchPackageGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.ContentUnitSearchRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackageGroupDao_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockPackageGroupDao_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.ContentUnitSearchRequest
func (_e *MockPackageGroupDao_Expecter) Search(ctx interface{}, orgID interface{}, request interface{}) *MockPackageGroupDao_Search_Call {
	return &MockPackageGroupDao_Search_Call{Call: _e.mock.On("Search", ctx, orgID, request)}
}

func (_c *MockPackageGroupDao_Search_Call) Run(run func(ctx context.Context, orgID string, request api.ContentUnitSearchRequest)) *MockPackageGroupDao_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.ContentUnitSearchRequest
		if args[2] != nil {
			arg2 = args[2].(api.ContentUnitSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPackageGroupDao_Search_Call) Return(searchPackageGroupResponses []api.SearchPackageGroupResponse, err error) *MockPackageGroupDao_Search_Call {
	_c.Call.Return(searchPackageGroupResponses, err)
	return _c
}

func (_c *MockPackageGroupDao_Search_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.ContentUnitSearchRequest) ([]api.SearchPackageGroupResponse, error)) *MockPackageGroupDao_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchSnapshotPackageGroups provides a mock function for the type MockPackageGroupDao
func (_mock *MockPackageGroupDao) SearchSnapshotPackageGroups(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest) ([]api.SearchPackageGroupResponse, error) {
	ret := _mock.Called(ctx, orgId, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchSnapshotPackageGroups")
	}

	var r0 []api.SearchPackageGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SnapshotSearchRpmRequest) ([]api.SearchPackageGroupResponse, error)); ok {
		return returnFunc(ctx, orgId, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SnapshotSearchRpmRequest) []api.SearchPackageGroupResponse); ok {
		r0 = returnFunc(ctx, orgId, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchPackageGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.SnapshotSearchRpmRequest) error); ok {
		r1 = returnFunc(ctx, orgId, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackageGroupDao_SearchSnapshotPackageGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchSnapshotPackageGroups'
type MockPackageGroupDao_SearchSnapshotPackageGroups_Call struct {
	*mock.Call
}

// SearchSnapshotPackageGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - request api.SnapshotSearchRpmRequest
func (_e *MockPackageGroupDao_Expecter) SearchSnapshotPackageGroups(ctx interface{}, orgId interface{}, request interface{}) *MockPackageGroupDao_SearchSnapshotPackageGroups_Call {
	return &MockPackageGroupDao_SearchSnapshotPackageGroups_Call{Call: _e.mock.On("SearchSnapshotPackageGroups", ctx, orgId, request)}
}

func (_c *MockPackageGroupDao_SearchSnapshotPackageGroups_Call) Run(run func(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest)) *MockPackageGroupDao_SearchSnapshotPackageGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.SnapshotSearchRpmRequest
		if args[2] != nil {
			arg2 = args[2].(api.SnapshotSearchRpmRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPackageGroupDao_SearchSnapshotPackageGroups_Call) Return(searchPackageGroupResponses []api.SearchPackageGroupResponse, err error) *MockPackageGroupDao_SearchSnapshotPackageGroups_Call {
	_c.Call.Return(searchPackageGroupResponses, err)
	return _c
}

func (_c *MockPackageGroupDao_SearchSnapshotPackageGroups_Call) RunAndReturn(run func(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest) ([]api.SearchPackageGroupResponse, error)) *MockPackageGroupDao_SearchSnapshotPackageGroups_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnvironmentDao creates a new instance of MockEnvironmentDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnvironmentDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnvironmentDao {
	mock := &MockEnvironmentDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnvironmentDao is an autogenerated mock type for the EnvironmentDao type
type MockEnvironmentDao struct {
	mock.Mock
}

type MockEnvironmentDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnvironmentDao) EXPECT() *MockEnvironmentDao_Expecter {
	return &MockEnvironmentDao_Expecter{mock: &_m.Mock}
}

// InsertForRepository provides a mock function for the type MockEnvironmentDao
func (_mock *MockEnvironmentDao) InsertForRepository(ctx context.Context, repoUuid string, environments []yum.Environment) (int64, error) {
	ret := _mock.Called(ctx, repoUuid, environments)

	if len(ret) == 0 {
		panic("no return value specified for InsertForRepository")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.Environment) (int64, error)); ok {
		return returnFunc(ctx, repoUuid, environments)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []yum.Environment) int64); ok {
		r0 = returnFunc(ctx, repoUuid, environments)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []yum.Environment) error); ok {
		r1 = returnFunc(ctx, repoUuid, environments)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentDao_InsertForRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertForRepository'
type MockEnvironmentDao_InsertForRepository_Call struct {
	*mock.Call
}

// InsertForRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repoUuid string
//   - environments []yum.Environment
func (_e *MockEnvironmentDao_Expecter) InsertForRepository(ctx interface{}, repoUuid interface{}, environments interface{}) *MockEnvironmentDao_InsertForRepository_Call {
	return &MockEnvironmentDao_InsertForRepository_Call{Call: _e.mock.On("InsertForRepository", ctx, repoUuid, environments)}
}

func (_c *MockEnvironmentDao_InsertForRepository_Call) Run(run func(ctx context.Context, repoUuid string, environments []yum.Environment)) *MockEnvironmentDao_InsertForRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []yum.Environment
		if args[2] != nil {
			arg2 = args[2].([]yum.Environment)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEnvironmentDao_InsertForRepository_Call) Return(n int64, err error) *MockEnvironmentDao_InsertForRepository_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockEnvironmentDao_InsertForRepository_Call) RunAndReturn(run func(ctx context.Context, repoUuid string, environments []yum.Environment) (int64, error)) *MockEnvironmentDao_InsertForRepository_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockEnvironmentDao
func (_mock *MockEnvironmentDao) List(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string) (api.RepositoryEnvironmentCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, orgID, uuidRepo, limit, offset, search, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.RepositoryEnvironmentCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int, string, string) (api.RepositoryEnvironmentCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, int, string, string) api.RepositoryEnvironmentCollectionResponse); ok {
		r0 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r0 = ret.Get(0).(api.RepositoryEnvironmentCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, int, string, string) int64); ok {
		r1 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, int, string, string) error); ok {
		r2 = returnFunc(ctx, orgID, uuidRepo, limit, offset, search, sortBy)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockEnvironmentDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockEnvironmentDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuidRepo string
//   - limit int
//   - offset int
//   - search string
//   - sortBy string
func (_e *MockEnvironmentDao_Expecter) List(ctx interface{}, orgID interface{}, uuidRepo interface{}, limit interface{}, offset interface{}, search interface{}, sortBy interface{}) *MockEnvironmentDao_List_Call {
	return &MockEnvironmentDao_List_Call{Call: _e.mock.On("List", ctx, orgID, uuidRepo, limit, offset, search, sortBy)}
}

func (_c *MockEnvironmentDao_List_Call) Run(run func(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string)) *MockEnvironmentDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockEnvironmentDao_List_Call) Return(repositoryEnvironmentCollectionResponse api.RepositoryEnvironmentCollectionResponse, n int64, err error) *MockEnvironmentDao_List_Call {
	_c.Call.Return(repositoryEnvironmentCollectionResponse, n, err)
	return _c
}

func (_c *MockEnvironmentDao_List_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuidRepo string, limit int, offset int, search string, sortBy string) (api.RepositoryEnvironmentCollectionResponse, int64, error)) *MockEnvironmentDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// OrphanCleanup provides a mock function for the type MockEnvironmentDao
func (_mock *MockEnvironmentDao) OrphanCleanup(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OrphanCleanup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnvironmentDao_OrphanCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrphanCleanup'
type MockEnvironmentDao_OrphanCleanup_Call struct {
	*mock.Call
}

// OrphanCleanup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEnvironmentDao_Expecter) OrphanCleanup(ctx interface{}) *MockEnvironmentDao_OrphanCleanup_Call {
	return &MockEnvironmentDao_OrphanCleanup_Call{Call: _e.mock.On("OrphanCleanup", ctx)}
}

func (_c *MockEnvironmentDao_OrphanCleanup_Call) Run(run func(ctx context.Context)) *MockEnvironmentDao_OrphanCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEnvironmentDao_OrphanCleanup_Call) Return(err error) *MockEnvironmentDao_OrphanCleanup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnvironmentDao_OrphanCleanup_Call) RunAndReturn(run func(ctx context.Context) error) *MockEnvironmentDao_OrphanCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockEnvironmentDao
func (_mock *MockEnvironmentDao) Search(ctx context.Context, orgID string, request api.ContentUnitSearchRequest) ([]api.SearchEnvironmentResponse, error) {
	ret := _mock.Called(ctx, orgID, request)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []api.SearchEnvironmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ContentUnitSearchRequest) ([]api.SearchEnvironmentResponse, error)); ok {
		return returnFunc(ctx, orgID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.ContentUnitSearchRequest) []api.SearchEnvironmentResponse); ok {
		r0 = returnFunc(ctx, orgID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchEnvironmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.ContentUnitSearchRequest) error); ok {
		r1 = returnFunc(ctx, orgID, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentDao_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockEnvironmentDao_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - request api.ContentUnitSearchRequest
func (_e *MockEnvironmentDao_Expecter) Search(ctx interface{}, orgID interface{}, request interface{}) *MockEnvironmentDao_Search_Call {
	return &MockEnvironmentDao_Search_Call{Call: _e.mock.On("Search", ctx, orgID, request)}
}

func (_c *MockEnvironmentDao_Search_Call) Run(run func(ctx context.Context, orgID string, request api.ContentUnitSearchRequest)) *MockEnvironmentDao_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.ContentUnitSearchRequest
		if args[2] != nil {
			arg2 = args[2].(api.ContentUnitSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEnvironmentDao_Search_Call) Return(searchEnvironmentResponses []api.SearchEnvironmentResponse, err error) *MockEnvironmentDao_Search_Call {
	_c.Call.Return(searchEnvironmentResponses, err)
	return _c
}

func (_c *MockEnvironmentDao_Search_Call) RunAndReturn(run func(ctx context.Context, orgID string, request api.ContentUnitSearchRequest) ([]api.SearchEnvironmentResponse, error)) *MockEnvironmentDao_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchSnapshotEnvironments provides a mock function for the type MockEnvironmentDao
func (_mock *MockEnvironmentDao) SearchSnapshotEnvironments(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest) ([]api.SearchEnvironmentResponse, error) {
	ret := _mock.Called(ctx, orgId, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchSnapshotEnvironments")
	}

	var r0 []api.SearchEnvironmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SnapshotSearchRpmRequest) ([]api.SearchEnvironmentResponse, error)); ok {
		return returnFunc(ctx, orgId, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, api.SnapshotSearchRpmRequest) []api.SearchEnvironmentResponse); ok {
		r0 = returnFunc(ctx, orgId, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.SearchEnvironmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, api.SnapshotSearchRpmRequest) error); ok {
		r1 = returnFunc(ctx, orgId, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironmentDao_SearchSnapshotEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchSnapshotEnvironments'
type MockEnvironmentDao_SearchSnapshotEnvironments_Call struct {
	*mock.Call
}

// SearchSnapshotEnvironments is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - request api.SnapshotSearchRpmRequest
func (_e *MockEnvironmentDao_Expecter) SearchSnapshotEnvironments(ctx interface{}, orgId interface{}, request interface{}) *MockEnvironmentDao_SearchSnapshotEnvironments_Call {
	return &MockEnvironmentDao_SearchSnapshotEnvironments_Call{Call: _e.mock.On("SearchSnapshotEnvironments", ctx, orgId, request)}
}

func (_c *MockEnvironmentDao_SearchSnapshotEnvironments_Call) Run(run func(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest)) *MockEnvironmentDao_SearchSnapshotEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 api.SnapshotSearchRpmRequest
		if args[2] != nil {
			arg2 = args[2].(api.SnapshotSearchRpmRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEnvironmentDao_SearchSnapshotEnvironments_Call) Return(searchEnvironmentResponses []api.SearchEnvironmentResponse, err error) *MockEnvironmentDao_SearchSnapshotEnvironments_Call {
	_c.Call.Return(searchEnvironmentResponses, err)
	return _c
}

func (_c *MockEnvironmentDao_SearchSnapshotEnvironments_Call) RunAndReturn(run func(ctx context.Context, orgId string, request api.SnapshotSearchRpmRequest) ([]api.SearchEnvironmentResponse, error)) *MockEnvironmentDao_SearchSnapshotEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplateDao creates a new instance of MockTemplateDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateDao {
	mock := &MockTemplateDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTemplateDao is an autogenerated mock type for the TemplateDao type
type MockTemplateDao struct {
	mock.Mock
}

type MockTemplateDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateDao) EXPECT() *MockTemplateDao_Expecter {
	return &MockTemplateDao_Expecter{mock: &_m.Mock}
}

// ClearDeletedAt provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) ClearDeletedAt(ctx context.Context, orgID string, uuid string) error {
	ret := _mock.Called(ctx, orgID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ClearDeletedAt")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_ClearDeletedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDeletedAt'
type MockTemplateDao_ClearDeletedAt_Call struct {
	*mock.Call
}

// ClearDeletedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
func (_e *MockTemplateDao_Expecter) ClearDeletedAt(ctx interface{}, orgID interface{}, uuid interface{}) *MockTemplateDao_ClearDeletedAt_Call {
	return &MockTemplateDao_ClearDeletedAt_Call{Call: _e.mock.On("ClearDeletedAt", ctx, orgID, uuid)}
}

func (_c *MockTemplateDao_ClearDeletedAt_Call) Run(run func(ctx context.Context, orgID string, uuid string)) *MockTemplateDao_ClearDeletedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_ClearDeletedAt_Call) Return(err error) *MockTemplateDao_ClearDeletedAt_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_ClearDeletedAt_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string) error) *MockTemplateDao_ClearDeletedAt_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) Create(ctx context.Context, templateRequest api.TemplateRequest) (api.TemplateResponse, error) {
	ret := _mock.Called(ctx, templateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 api.TemplateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.TemplateRequest) (api.TemplateResponse, error)); ok {
		return returnFunc(ctx, templateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.TemplateRequest) api.TemplateResponse); ok {
		r0 = returnFunc(ctx, templateRequest)
	} else {
		r0 = ret.Get(0).(api.TemplateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, api.TemplateRequest) error); ok {
		r1 = returnFunc(ctx, templateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTemplateDao_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - templateRequest api.TemplateRequest
func (_e *MockTemplateDao_Expecter) Create(ctx interface{}, templateRequest interface{}) *MockTemplateDao_Create_Call {
	return &MockTemplateDao_Create_Call{Call: _e.mock.On("Create", ctx, templateRequest)}
}

func (_c *MockTemplateDao_Create_Call) Run(run func(ctx context.Context, templateRequest api.TemplateRequest)) *MockTemplateDao_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.TemplateRequest
		if args[1] != nil {
			arg1 = args[1].(api.TemplateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateDao_Create_Call) Return(templateResponse api.TemplateResponse, err error) *MockTemplateDao_Create_Call {
	_c.Call.Return(templateResponse, err)
	return _c
}

func (_c *MockTemplateDao_Create_Call) RunAndReturn(run func(ctx context.Context, templateRequest api.TemplateRequest) (api.TemplateResponse, error)) *MockTemplateDao_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) Delete(ctx context.Context, orgID string, uuid string) error {
	ret := _mock.Called(ctx, orgID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTemplateDao_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
func (_e *MockTemplateDao_Expecter) Delete(ctx interface{}, orgID interface{}, uuid interface{}) *MockTemplateDao_Delete_Call {
	return &MockTemplateDao_Delete_Call{Call: _e.mock.On("Delete", ctx, orgID, uuid)}
}

func (_c *MockTemplateDao_Delete_Call) Run(run func(ctx context.Context, orgID string, uuid string)) *MockTemplateDao_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_Delete_Call) Return(err error) *MockTemplateDao_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_Delete_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string) error) *MockTemplateDao_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplateRepoConfigs provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) DeleteTemplateRepoConfigs(ctx context.Context, templateUUID string, keepRepoConfigUUIDs []string) error {
	ret := _mock.Called(ctx, templateUUID, keepRepoConfigUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplateRepoConfigs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, templateUUID, keepRepoConfigUUIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_DeleteTemplateRepoConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplateRepoConfigs'
type MockTemplateDao_DeleteTemplateRepoConfigs_Call struct {
	*mock.Call
}

// DeleteTemplateRepoConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - keepRepoConfigUUIDs []string
func (_e *MockTemplateDao_Expecter) DeleteTemplateRepoConfigs(ctx interface{}, templateUUID interface{}, keepRepoConfigUUIDs interface{}) *MockTemplateDao_DeleteTemplateRepoConfigs_Call {
	return &MockTemplateDao_DeleteTemplateRepoConfigs_Call{Call: _e.mock.On("DeleteTemplateRepoConfigs", ctx, templateUUID, keepRepoConfigUUIDs)}
}

func (_c *MockTemplateDao_DeleteTemplateRepoConfigs_Call) Run(run func(ctx context.Context, templateUUID string, keepRepoConfigUUIDs []string)) *MockTemplateDao_DeleteTemplateRepoConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_DeleteTemplateRepoConfigs_Call) Return(err error) *MockTemplateDao_DeleteTemplateRepoConfigs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_DeleteTemplateRepoConfigs_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, keepRepoConfigUUIDs []string) error) *MockTemplateDao_DeleteTemplateRepoConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplateSnapshot provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) DeleteTemplateSnapshot(ctx context.Context, snapshotUUID string) error {
	ret := _mock.Called(ctx, snapshotUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplateSnapshot")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, snapshotUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_DeleteTemplateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplateSnapshot'
type MockTemplateDao_DeleteTemplateSnapshot_Call struct {
	*mock.Call
}

// DeleteTemplateSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - snapshotUUID string
func (_e *MockTemplateDao_Expecter) DeleteTemplateSnapshot(ctx interface{}, snapshotUUID interface{}) *MockTemplateDao_DeleteTemplateSnapshot_Call {
	return &MockTemplateDao_DeleteTemplateSnapshot_Call{Call: _e.mock.On("DeleteTemplateSnapshot", ctx, snapshotUUID)}
}

func (_c *MockTemplateDao_DeleteTemplateSnapshot_Call) Run(run func(ctx context.Context, snapshotUUID string)) *MockTemplateDao_DeleteTemplateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateDao_DeleteTemplateSnapshot_Call) Return(err error) *MockTemplateDao_DeleteTemplateSnapshot_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_DeleteTemplateSnapshot_Call) RunAndReturn(run func(ctx context.Context, snapshotUUID string) error) *MockTemplateDao_DeleteTemplateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) Fetch(ctx context.Context, orgID string, uuid string, includeSoftDel bool) (api.TemplateResponse, error) {
	ret := _mock.Called(ctx, orgID, uuid, includeSoftDel)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 api.TemplateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) (api.TemplateResponse, error)); ok {
		return returnFunc(ctx, orgID, uuid, includeSoftDel)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) api.TemplateResponse); ok {
		r0 = returnFunc(ctx, orgID, uuid, includeSoftDel)
	} else {
		r0 = ret.Get(0).(api.TemplateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = returnFunc(ctx, orgID, uuid, includeSoftDel)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockTemplateDao_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
//   - includeSoftDel bool
func (_e *MockTemplateDao_Expecter) Fetch(ctx interface{}, orgID interface{}, uuid interface{}, includeSoftDel interface{}) *MockTemplateDao_Fetch_Call {
	return &MockTemplateDao_Fetch_Call{Call: _e.mock.On("Fetch", ctx, orgID, uuid, includeSoftDel)}
}

func (_c *MockTemplateDao_Fetch_Call) Run(run func(ctx context.Context, orgID string, uuid string, includeSoftDel bool)) *MockTemplateDao_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTemplateDao_Fetch_Call) Return(templateResponse api.TemplateResponse, err error) *MockTemplateDao_Fetch_Call {
	_c.Call.Return(templateResponse, err)
	return _c
}

func (_c *MockTemplateDao_Fetch_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string, includeSoftDel bool) (api.TemplateResponse, error)) *MockTemplateDao_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// GetDistributionHref provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) GetDistributionHref(ctx context.Context, templateUUID string, repoConfigUUID string) (string, error) {
	ret := _mock.Called(ctx, templateUUID, repoConfigUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionHref")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, templateUUID, repoConfigUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, templateUUID, repoConfigUUID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, templateUUID, repoConfigUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_GetDistributionHref_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDistributionHref'
type MockTemplateDao_GetDistributionHref_Call struct {
	*mock.Call
}

// GetDistributionHref is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - repoConfigUUID string
func (_e *MockTemplateDao_Expecter) GetDistributionHref(ctx interface{}, templateUUID interface{}, repoConfigUUID interface{}) *MockTemplateDao_GetDistributionHref_Call {
	return &MockTemplateDao_GetDistributionHref_Call{Call: _e.mock.On("GetDistributionHref", ctx, templateUUID, repoConfigUUID)}
}

func (_c *MockTemplateDao_GetDistributionHref_Call) Run(run func(ctx context.Context, templateUUID string, repoConfigUUID string)) *MockTemplateDao_GetDistributionHref_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_GetDistributionHref_Call) Return(s string, err error) *MockTemplateDao_GetDistributionHref_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTemplateDao_GetDistributionHref_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, repoConfigUUID string) (string, error)) *MockTemplateDao_GetDistributionHref_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoChanges provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) GetRepoChanges(ctx context.Context, templateUUID string, newRepoConfigUUIDs []string) ([]string, []string, []string, []string, error) {
	ret := _mock.Called(ctx, templateUUID, newRepoConfigUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoChanges")
	}

	var r0 []string
	var r1 []string
	var r2 []string
	var r3 []string
	var r4 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, []string, []string, []string, error)); ok {
		return returnFunc(ctx, templateUUID, newRepoConfigUUIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = returnFunc(ctx, templateUUID, newRepoConfigUUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) []string); ok {
		r1 = returnFunc(ctx, templateUUID, newRepoConfigUUIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, []string) []string); ok {
		r2 = returnFunc(ctx, templateUUID, newRepoConfigUUIDs)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, string, []string) []string); ok {
		r3 = returnFunc(ctx, templateUUID, newRepoConfigUUIDs)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).([]string)
		}
	}
	if returnFunc, ok := ret.Get(4).(func(context.Context, string, []string) error); ok {
		r4 = returnFunc(ctx, templateUUID, newRepoConfigUUIDs)
	} else {
		r4 = ret.Error(4)
	}
	return r0, r1, r2, r3, r4
}

// MockTemplateDao_GetRepoChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoChanges'
type MockTemplateDao_GetRepoChanges_Call struct {
	*mock.Call
}

// GetRepoChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - newRepoConfigUUIDs []string
func (_e *MockTemplateDao_Expecter) GetRepoChanges(ctx interface{}, templateUUID interface{}, newRepoConfigUUIDs interface{}) *MockTemplateDao_GetRepoChanges_Call {
	return &MockTemplateDao_GetRepoChanges_Call{Call: _e.mock.On("GetRepoChanges", ctx, templateUUID, newRepoConfigUUIDs)}
}

func (_c *MockTemplateDao_GetRepoChanges_Call) Run(run func(ctx context.Context, templateUUID string, newRepoConfigUUIDs []string)) *MockTemplateDao_GetRepoChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_GetRepoChanges_Call) Return(strings []string, strings1 []string, strings2 []string, strings3 []string, err error) *MockTemplateDao_GetRepoChanges_Call {
	_c.Call.Return(strings, strings1, strings2, strings3, err)
	return _c
}

func (_c *MockTemplateDao_GetRepoChanges_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, newRepoConfigUUIDs []string) ([]string, []string, []string, []string, error)) *MockTemplateDao_GetRepoChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoryConfigurationFile provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) GetRepositoryConfigurationFile(ctx context.Context, orgID string, templateUUID string) (string, error) {
	ret := _mock.Called(ctx, orgID, templateUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryConfigurationFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, orgID, templateUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, orgID, templateUUID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, orgID, templateUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_GetRepositoryConfigurationFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryConfigurationFile'
type MockTemplateDao_GetRepositoryConfigurationFile_Call struct {
	*mock.Call
}

// GetRepositoryConfigurationFile is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - templateUUID string
func (_e *MockTemplateDao_Expecter) GetRepositoryConfigurationFile(ctx interface{}, orgID interface{}, templateUUID interface{}) *MockTemplateDao_GetRepositoryConfigurationFile_Call {
	return &MockTemplateDao_GetRepositoryConfigurationFile_Call{Call: _e.mock.On("GetRepositoryConfigurationFile", ctx, orgID, templateUUID)}
}

func (_c *MockTemplateDao_GetRepositoryConfigurationFile_Call) Run(run func(ctx context.Context, orgID string, templateUUID string)) *MockTemplateDao_GetRepositoryConfigurationFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_GetRepositoryConfigurationFile_Call) Return(s string, err error) *MockTemplateDao_GetRepositoryConfigurationFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTemplateDao_GetRepositoryConfigurationFile_Call) RunAndReturn(run func(ctx context.Context, orgID string, templateUUID string) (string, error)) *MockTemplateDao_GetRepositoryConfigurationFile_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnlyFetchByName provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) InternalOnlyFetchByName(ctx context.Context, name string) (models.Template, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnlyFetchByName")
	}

	var r0 models.Template
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Template, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Template); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(models.Template)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_InternalOnlyFetchByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnlyFetchByName'
type MockTemplateDao_InternalOnlyFetchByName_Call struct {
	*mock.Call
}

// InternalOnlyFetchByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTemplateDao_Expecter) InternalOnlyFetchByName(ctx interface{}, name interface{}) *MockTemplateDao_InternalOnlyFetchByName_Call {
	return &MockTemplateDao_InternalOnlyFetchByName_Call{Call: _e.mock.On("InternalOnlyFetchByName", ctx, name)}
}

func (_c *MockTemplateDao_InternalOnlyFetchByName_Call) Run(run func(ctx context.Context, name string)) *MockTemplateDao_InternalOnlyFetchByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateDao_InternalOnlyFetchByName_Call) Return(template models.Template, err error) *MockTemplateDao_InternalOnlyFetchByName_Call {
	_c.Call.Return(template, err)
	return _c
}

func (_c *MockTemplateDao_InternalOnlyFetchByName_Call) RunAndReturn(run func(ctx context.Context, name string) (models.Template, error)) *MockTemplateDao_InternalOnlyFetchByName_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnlyGetTemplatesForRepoConfig provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) InternalOnlyGetTemplatesForRepoConfig(ctx context.Context, repoUUID string, useLatestOnly bool) ([]api.TemplateResponse, error) {
	ret := _mock.Called(ctx, repoUUID, useLatestOnly)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnlyGetTemplatesForRepoConfig")
	}

	var r0 []api.TemplateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) ([]api.TemplateResponse, error)); ok {
		return returnFunc(ctx, repoUUID, useLatestOnly)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) []api.TemplateResponse); ok {
		r0 = returnFunc(ctx, repoUUID, useLatestOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.TemplateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, repoUUID, useLatestOnly)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnlyGetTemplatesForRepoConfig'
type MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call struct {
	*mock.Call
}

// InternalOnlyGetTemplatesForRepoConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - repoUUID string
//   - useLatestOnly bool
func (_e *MockTemplateDao_Expecter) InternalOnlyGetTemplatesForRepoConfig(ctx interface{}, repoUUID interface{}, useLatestOnly interface{}) *MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call {
	return &MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call{Call: _e.mock.On("InternalOnlyGetTemplatesForRepoConfig", ctx, repoUUID, useLatestOnly)}
}

func (_c *MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call) Run(run func(ctx context.Context, repoUUID string, useLatestOnly bool)) *MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call) Return(templateResponses []api.TemplateResponse, err error) *MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call {
	_c.Call.Return(templateResponses, err)
	return _c
}

func (_c *MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call) RunAndReturn(run func(ctx context.Context, repoUUID string, useLatestOnly bool) ([]api.TemplateResponse, error)) *MockTemplateDao_InternalOnlyGetTemplatesForRepoConfig_Call {
	_c.Call.Return(run)
	return _c
}

// InternalOnlyGetTemplatesForSnapshots provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) InternalOnlyGetTemplatesForSnapshots(ctx context.Context, snapUUIDs []string) ([]api.TemplateResponse, error) {
	ret := _mock.Called(ctx, snapUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for InternalOnlyGetTemplatesForSnapshots")
	}

	var r0 []api.TemplateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]api.TemplateResponse, error)); ok {
		return returnFunc(ctx, snapUUIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []api.TemplateResponse); ok {
		r0 = returnFunc(ctx, snapUUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.TemplateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, snapUUIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalOnlyGetTemplatesForSnapshots'
type MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call struct {
	*mock.Call
}

// InternalOnlyGetTemplatesForSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - snapUUIDs []string
func (_e *MockTemplateDao_Expecter) InternalOnlyGetTemplatesForSnapshots(ctx interface{}, snapUUIDs interface{}) *MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call {
	return &MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call{Call: _e.mock.On("InternalOnlyGetTemplatesForSnapshots", ctx, snapUUIDs)}
}

func (_c *MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call) Run(run func(ctx context.Context, snapUUIDs []string)) *MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call) Return(templateResponses []api.TemplateResponse, err error) *MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call {
	_c.Call.Return(templateResponses, err)
	return _c
}

func (_c *MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call) RunAndReturn(run func(ctx context.Context, snapUUIDs []string) ([]api.TemplateResponse, error)) *MockTemplateDao_InternalOnlyGetTemplatesForSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) List(ctx context.Context, orgID string, includeSoftDel bool, paginationData api.PaginationData, filterData api.TemplateFilterData) (api.TemplateCollectionResponse, int64, error) {
	ret := _mock.Called(ctx, orgID, includeSoftDel, paginationData, filterData)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 api.TemplateCollectionResponse
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, api.PaginationData, api.TemplateFilterData) (api.TemplateCollectionResponse, int64, error)); ok {
		return returnFunc(ctx, orgID, includeSoftDel, paginationData, filterData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, api.PaginationData, api.TemplateFilterData) api.TemplateCollectionResponse); ok {
		r0 = returnFunc(ctx, orgID, includeSoftDel, paginationData, filterData)
	} else {
		r0 = ret.Get(0).(api.TemplateCollectionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool, api.PaginationData, api.TemplateFilterData) int64); ok {
		r1 = returnFunc(ctx, orgID, includeSoftDel, paginationData, filterData)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, bool, api.PaginationData, api.TemplateFilterData) error); ok {
		r2 = returnFunc(ctx, orgID, includeSoftDel, paginationData, filterData)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTemplateDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTemplateDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - includeSoftDel bool
//   - paginationData api.PaginationData
//   - filterData api.TemplateFilterData
func (_e *MockTemplateDao_Expecter) List(ctx interface{}, orgID interface{}, includeSoftDel interface{}, paginationData interface{}, filterData interface{}) *MockTemplateDao_List_Call {
	return &MockTemplateDao_List_Call{Call: _e.mock.On("List", ctx, orgID, includeSoftDel, paginationData, filterData)}
}

func (_c *MockTemplateDao_List_Call) Run(run func(ctx context.Context, orgID string, includeSoftDel bool, paginationData api.PaginationData, filterData api.TemplateFilterData)) *MockTemplateDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 api.PaginationData
		if args[3] != nil {
			arg3 = args[3].(api.PaginationData)
		}
		var arg4 api.TemplateFilterData
		if args[4] != nil {
			arg4 = args[4].(api.TemplateFilterData)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTemplateDao_List_Call) Return(templateCollectionResponse api.TemplateCollectionResponse, n int64, err error) *MockTemplateDao_List_Call {
	_c.Call.Return(templateCollectionResponse, n, err)
	return _c
}

func (_c *MockTemplateDao_List_Call) RunAndReturn(run func(ctx context.Context, orgID string, includeSoftDel bool, paginationData api.PaginationData, filterData api.TemplateFilterData) (api.TemplateCollectionResponse, int64, error)) *MockTemplateDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// SetEnvironmentCreated provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) SetEnvironmentCreated(ctx context.Context, templateUUID string) error {
	ret := _mock.Called(ctx, templateUUID)

	if len(ret) == 0 {
		panic("no return value specified for SetEnvironmentCreated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, templateUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_SetEnvironmentCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnvironmentCreated'
type MockTemplateDao_SetEnvironmentCreated_Call struct {
	*mock.Call
}

// SetEnvironmentCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
func (_e *MockTemplateDao_Expecter) SetEnvironmentCreated(ctx interface{}, templateUUID interface{}) *MockTemplateDao_SetEnvironmentCreated_Call {
	return &MockTemplateDao_SetEnvironmentCreated_Call{Call: _e.mock.On("SetEnvironmentCreated", ctx, templateUUID)}
}

func (_c *MockTemplateDao_SetEnvironmentCreated_Call) Run(run func(ctx context.Context, templateUUID string)) *MockTemplateDao_SetEnvironmentCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateDao_SetEnvironmentCreated_Call) Return(err error) *MockTemplateDao_SetEnvironmentCreated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_SetEnvironmentCreated_Call) RunAndReturn(run func(ctx context.Context, templateUUID string) error) *MockTemplateDao_SetEnvironmentCreated_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDelete provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) SoftDelete(ctx context.Context, orgID string, uuid string) error {
	ret := _mock.Called(ctx, orgID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_SoftDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDelete'
type MockTemplateDao_SoftDelete_Call struct {
	*mock.Call
}

// SoftDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
func (_e *MockTemplateDao_Expecter) SoftDelete(ctx interface{}, orgID interface{}, uuid interface{}) *MockTemplateDao_SoftDelete_Call {
	return &MockTemplateDao_SoftDelete_Call{Call: _e.mock.On("SoftDelete", ctx, orgID, uuid)}
}

func (_c *MockTemplateDao_SoftDelete_Call) Run(run func(ctx context.Context, orgID string, uuid string)) *MockTemplateDao_SoftDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplateDao_SoftDelete_Call) Return(err error) *MockTemplateDao_SoftDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_SoftDelete_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string) error) *MockTemplateDao_SoftDelete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) Update(ctx context.Context, orgID string, uuid string, templParams api.TemplateUpdateRequest) (api.TemplateResponse, error) {
	ret := _mock.Called(ctx, orgID, uuid, templParams)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 api.TemplateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, api.TemplateUpdateRequest) (api.TemplateResponse, error)); ok {
		return returnFunc(ctx, orgID, uuid, templParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, api.TemplateUpdateRequest) api.TemplateResponse); ok {
		r0 = returnFunc(ctx, orgID, uuid, templParams)
	} else {
		r0 = ret.Get(0).(api.TemplateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, api.TemplateUpdateRequest) error); ok {
		r1 = returnFunc(ctx, orgID, uuid, templParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateDao_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTemplateDao_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - uuid string
//   - templParams api.TemplateUpdateRequest
func (_e *MockTemplateDao_Expecter) Update(ctx interface{}, orgID interface{}, uuid interface{}, templParams interface{}) *MockTemplateDao_Update_Call {
	return &MockTemplateDao_Update_Call{Call: _e.mock.On("Update", ctx, orgID, uuid, templParams)}
}

func (_c *MockTemplateDao_Update_Call) Run(run func(ctx context.Context, orgID string, uuid string, templParams api.TemplateUpdateRequest)) *MockTemplateDao_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 api.TemplateUpdateRequest
		if args[3] != nil {
			arg3 = args[3].(api.TemplateUpdateRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTemplateDao_Update_Call) Return(templateResponse api.TemplateResponse, err error) *MockTemplateDao_Update_Call {
	_c.Call.Return(templateResponse, err)
	return _c
}

func (_c *MockTemplateDao_Update_Call) RunAndReturn(run func(ctx context.Context, orgID string, uuid string, templParams api.TemplateUpdateRequest) (api.TemplateResponse, error)) *MockTemplateDao_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDistributionHrefs provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) UpdateDistributionHrefs(ctx context.Context, templateUUID string, repoUUIDs []string, snapshots []models.Snapshot, repoDistributionMap map[string]string) error {
	ret := _mock.Called(ctx, templateUUID, repoUUIDs, snapshots, repoDistributionMap)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistributionHrefs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []models.Snapshot, map[string]string) error); ok {
		r0 = returnFunc(ctx, templateUUID, repoUUIDs, snapshots, repoDistributionMap)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_UpdateDistributionHrefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDistributionHrefs'
type MockTemplateDao_UpdateDistributionHrefs_Call struct {
	*mock.Call
}

// UpdateDistributionHrefs is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - repoUUIDs []string
//   - snapshots []models.Snapshot
//   - repoDistributionMap map[string]string
func (_e *MockTemplateDao_Expecter) UpdateDistributionHrefs(ctx interface{}, templateUUID interface{}, repoUUIDs interface{}, snapshots interface{}, repoDistributionMap interface{}) *MockTemplateDao_UpdateDistributionHrefs_Call {
	return &MockTemplateDao_UpdateDistributionHrefs_Call{Call: _e.mock.On("UpdateDistributionHrefs", ctx, templateUUID, repoUUIDs, snapshots, repoDistributionMap)}
}

func (_c *MockTemplateDao_UpdateDistributionHrefs_Call) Run(run func(ctx context.Context, templateUUID string, repoUUIDs []string, snapshots []models.Snapshot, repoDistributionMap map[string]string)) *MockTemplateDao_UpdateDistributionHrefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 []models.Snapshot
		if args[3] != nil {
			arg3 = args[3].([]models.Snapshot)
		}
		var arg4 map[string]string
		if args[4] != nil {
			arg4 = args[4].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTemplateDao_UpdateDistributionHrefs_Call) Return(err error) *MockTemplateDao_UpdateDistributionHrefs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_UpdateDistributionHrefs_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, repoUUIDs []string, snapshots []models.Snapshot, repoDistributionMap map[string]string) error) *MockTemplateDao_UpdateDistributionHrefs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastError provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) UpdateLastError(ctx context.Context, orgID string, templateUUID string, lastUpdateSnapshotError string) error {
	ret := _mock.Called(ctx, orgID, templateUUID, lastUpdateSnapshotError)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastError")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, orgID, templateUUID, lastUpdateSnapshotError)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_UpdateLastError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastError'
type MockTemplateDao_UpdateLastError_Call struct {
	*mock.Call
}

// UpdateLastError is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - templateUUID string
//   - lastUpdateSnapshotError string
func (_e *MockTemplateDao_Expecter) UpdateLastError(ctx interface{}, orgID interface{}, templateUUID interface{}, lastUpdateSnapshotError interface{}) *MockTemplateDao_UpdateLastError_Call {
	return &MockTemplateDao_UpdateLastError_Call{Call: _e.mock.On("UpdateLastError", ctx, orgID, templateUUID, lastUpdateSnapshotError)}
}

func (_c *MockTemplateDao_UpdateLastError_Call) Run(run func(ctx context.Context, orgID string, templateUUID string, lastUpdateSnapshotError string)) *MockTemplateDao_UpdateLastError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTemplateDao_UpdateLastError_Call) Return(err error) *MockTemplateDao_UpdateLastError_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_UpdateLastError_Call) RunAndReturn(run func(ctx context.Context, orgID string, templateUUID string, lastUpdateSnapshotError string) error) *MockTemplateDao_UpdateLastError_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastUpdateTask provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) UpdateLastUpdateTask(ctx context.Context, taskUUID string, orgID string, templateUUID string) error {
	ret := _mock.Called(ctx, taskUUID, orgID, templateUUID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastUpdateTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, taskUUID, orgID, templateUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_UpdateLastUpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastUpdateTask'
type MockTemplateDao_UpdateLastUpdateTask_Call struct {
	*mock.Call
}

// UpdateLastUpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskUUID string
//   - orgID string
//   - templateUUID string
func (_e *MockTemplateDao_Expecter) UpdateLastUpdateTask(ctx interface{}, taskUUID interface{}, orgID interface{}, templateUUID interface{}) *MockTemplateDao_UpdateLastUpdateTask_Call {
	return &MockTemplateDao_UpdateLastUpdateTask_Call{Call: _e.mock.On("UpdateLastUpdateTask", ctx, taskUUID, orgID, templateUUID)}
}

func (_c *MockTemplateDao_UpdateLastUpdateTask_Call) Run(run func(ctx context.Context, taskUUID string, orgID string, templateUUID string)) *MockTemplateDao_UpdateLastUpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTemplateDao_UpdateLastUpdateTask_Call) Return(err error) *MockTemplateDao_UpdateLastUpdateTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_UpdateLastUpdateTask_Call) RunAndReturn(run func(ctx context.Context, taskUUID string, orgID string, templateUUID string) error) *MockTemplateDao_UpdateLastUpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSnapshots provides a mock function for the type MockTemplateDao
func (_mock *MockTemplateDao) UpdateSnapshots(ctx context.Context, templateUUID string, repoUUIDs []string, snapshots []models.Snapshot) error {
	ret := _mock.Called(ctx, templateUUID, repoUUIDs, snapshots)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnapshots")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []models.Snapshot) error); ok {
		r0 = returnFunc(ctx, templateUUID, repoUUIDs, snapshots)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateDao_UpdateSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSnapshots'
type MockTemplateDao_UpdateSnapshots_Call struct {
	*mock.Call
}

// UpdateSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - templateUUID string
//   - repoUUIDs []string
//   - snapshots []models.Snapshot
func (_e *MockTemplateDao_Expecter) UpdateSnapshots(ctx interface{}, templateUUID interface{}, repoUUIDs interface{}, snapshots interface{}) *MockTemplateDao_UpdateSnapshots_Call {
	return &MockTemplateDao_UpdateSnapshots_Call{Call: _e.mock.On("UpdateSnapshots", ctx, templateUUID, repoUUIDs, snapshots)}
}

func (_c *MockTemplateDao_UpdateSnapshots_Call) Run(run func(ctx context.Context, templateUUID string, repoUUIDs []string, snapshots []models.Snapshot)) *MockTemplateDao_UpdateSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 []models.Snapshot
		if args[3] != nil {
			arg3 = args[3].([]models.Snapshot)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTemplateDao_UpdateSnapshots_Call) Return(err error) *MockTemplateDao_UpdateSnapshots_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateDao_UpdateSnapshots_Call) RunAndReturn(run func(ctx context.Context, templateUUID string, repoUUIDs []string, snapshots []models.Snapshot) error) *MockTemplateDao_UpdateSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMemoDao creates a new instance of MockMemoDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMemoDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMemoDao {
	mock := &MockMemoDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMemoDao is an autogenerated mock type for the MemoDao type
type MockMemoDao struct {
	mock.Mock
}

type MockMemoDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemoDao) EXPECT() *MockMemoDao_Expecter {
	return &MockMemoDao_Expecter{mock: &_m.Mock}
}

// Read provides a mock function for the type MockMemoDao
func (_mock *MockMemoDao) Read(ctx context.Context, key string) (*models.Memo, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *models.Memo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Memo, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Memo); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Memo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMemoDao_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockMemoDao_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockMemoDao_Expecter) Read(ctx interface{}, key interface{}) *MockMemoDao_Read_Call {
	return &MockMemoDao_Read_Call{Call: _e.mock.On("Read", ctx, key)}
}

func (_c *MockMemoDao_Read_Call) Run(run func(ctx context.Context, key string)) *MockMemoDao_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMemoDao_Read_Call) Return(memo *models.Memo, err error) *MockMemoDao_Read_Call {
	_c.Call.Return(memo, err)
	return _c
}

func (_c *MockMemoDao_Read_Call) RunAndReturn(run func(ctx context.Context, key string) (*models.Memo, error)) *MockMemoDao_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockMemoDao
func (_mock *MockMemoDao) Write(ctx context.Context, key string, memo json.RawMessage) (*models.Memo, error) {
	ret := _mock.Called(ctx, key, memo)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 *models.Memo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, json.RawMessage) (*models.Memo, error)); ok {
		return returnFunc(ctx, key, memo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, json.RawMessage) *models.Memo); ok {
		r0 = returnFunc(ctx, key, memo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Memo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, json.RawMessage) error); ok {
		r1 = returnFunc(ctx, key, memo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMemoDao_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockMemoDao_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - memo json.RawMessage
func (_e *MockMemoDao_Expecter) Write(ctx interface{}, key interface{}, memo interface{}) *MockMemoDao_Write_Call {
	return &MockMemoDao_Write_Call{Call: _e.mock.On("Write", ctx, key, memo)}
}

func (_c *MockMemoDao_Write_Call) Run(run func(ctx context.Context, key string, memo json.RawMessage)) *MockMemoDao_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 json.RawMessage
		if args[2] != nil {
			arg2 = args[2].(json.RawMessage)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMemoDao_Write_Call) Return(memo1 *models.Memo, err error) *MockMemoDao_Write_Call {
	_c.Call.Return(memo1, err)
	return _c
}

func (_c *MockMemoDao_Write_Call) RunAndReturn(run func(ctx context.Context, key string, memo json.RawMessage) (*models.Memo, error)) *MockMemoDao_Write_Call {
	_c.Call.Return(run)
	return _c
}
