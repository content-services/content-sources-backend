// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"context"

	"github.com/content-services/content-sources-backend/pkg/tasks/queue"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTaskClient creates a new instance of MockTaskClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskClient {
	mock := &MockTaskClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskClient is an autogenerated mock type for the TaskClient type
type MockTaskClient struct {
	mock.Mock
}

type MockTaskClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskClient) EXPECT() *MockTaskClient_Expecter {
	return &MockTaskClient_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function for the type MockTaskClient
func (_mock *MockTaskClient) Cancel(ctx context.Context, taskId string) error {
	ret := _mock.Called(ctx, taskId)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, taskId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskClient_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockTaskClient_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - taskId string
func (_e *MockTaskClient_Expecter) Cancel(ctx interface{}, taskId interface{}) *MockTaskClient_Cancel_Call {
	return &MockTaskClient_Cancel_Call{Call: _e.mock.On("Cancel", ctx, taskId)}
}

func (_c *MockTaskClient_Cancel_Call) Run(run func(ctx context.Context, taskId string)) *MockTaskClient_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTaskClient_Cancel_Call) Return(err error) *MockTaskClient_Cancel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskClient_Cancel_Call) RunAndReturn(run func(ctx context.Context, taskId string) error) *MockTaskClient_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function for the type MockTaskClient
func (_mock *MockTaskClient) Enqueue(task queue.Task) (uuid.UUID, error) {
	ret := _mock.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(queue.Task) (uuid.UUID, error)); ok {
		return returnFunc(task)
	}
	if returnFunc, ok := ret.Get(0).(func(queue.Task) uuid.UUID); ok {
		r0 = returnFunc(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(queue.Task) error); ok {
		r1 = returnFunc(task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskClient_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockTaskClient_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - task queue.Task
func (_e *MockTaskClient_Expecter) Enqueue(task interface{}) *MockTaskClient_Enqueue_Call {
	return &MockTaskClient_Enqueue_Call{Call: _e.mock.On("Enqueue", task)}
}

func (_c *MockTaskClient_Enqueue_Call) Run(run func(task queue.Task)) *MockTaskClient_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 queue.Task
		if args[0] != nil {
			arg0 = args[0].(queue.Task)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTaskClient_Enqueue_Call) Return(uUID uuid.UUID, err error) *MockTaskClient_Enqueue_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockTaskClient_Enqueue_Call) RunAndReturn(run func(task queue.Task) (uuid.UUID, error)) *MockTaskClient_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}
