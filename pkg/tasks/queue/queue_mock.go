// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package queue

import (
	"context"
	"time"

	"github.com/content-services/content-sources-backend/pkg/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQueue creates a new instance of MockQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueue {
	mock := &MockQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueue is an autogenerated mock type for the Queue type
type MockQueue struct {
	mock.Mock
}

type MockQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueue) EXPECT() *MockQueue_Expecter {
	return &MockQueue_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function for the type MockQueue
func (_mock *MockQueue) Cancel(ctx context.Context, taskId uuid.UUID) error {
	ret := _mock.Called(ctx, taskId)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQueue_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockQueue_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - taskId uuid.UUID
func (_e *MockQueue_Expecter) Cancel(ctx interface{}, taskId interface{}) *MockQueue_Cancel_Call {
	return &MockQueue_Cancel_Call{Call: _e.mock.On("Cancel", ctx, taskId)}
}

func (_c *MockQueue_Cancel_Call) Run(run func(ctx context.Context, taskId uuid.UUID)) *MockQueue_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueue_Cancel_Call) Return(err error) *MockQueue_Cancel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQueue_Cancel_Call) RunAndReturn(run func(ctx context.Context, taskId uuid.UUID) error) *MockQueue_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Dequeue provides a mock function for the type MockQueue
func (_mock *MockQueue) Dequeue(ctx context.Context, taskTypes []string) (*models.TaskInfo, error) {
	ret := _mock.Called(ctx, taskTypes)

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 *models.TaskInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) (*models.TaskInfo, error)); ok {
		return returnFunc(ctx, taskTypes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) *models.TaskInfo); ok {
		r0 = returnFunc(ctx, taskTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, taskTypes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueue_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type MockQueue_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//   - ctx context.Context
//   - taskTypes []string
func (_e *MockQueue_Expecter) Dequeue(ctx interface{}, taskTypes interface{}) *MockQueue_Dequeue_Call {
	return &MockQueue_Dequeue_Call{Call: _e.mock.On("Dequeue", ctx, taskTypes)}
}

func (_c *MockQueue_Dequeue_Call) Run(run func(ctx context.Context, taskTypes []string)) *MockQueue_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueue_Dequeue_Call) Return(taskInfo *models.TaskInfo, err error) *MockQueue_Dequeue_Call {
	_c.Call.Return(taskInfo, err)
	return _c
}

func (_c *MockQueue_Dequeue_Call) RunAndReturn(run func(ctx context.Context, taskTypes []string) (*models.TaskInfo, error)) *MockQueue_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function for the type MockQueue
func (_mock *MockQueue) Enqueue(task *Task) (uuid.UUID, error) {
	ret := _mock.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*Task) (uuid.UUID, error)); ok {
		return returnFunc(task)
	}
	if returnFunc, ok := ret.Get(0).(func(*Task) uuid.UUID); ok {
		r0 = returnFunc(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*Task) error); ok {
		r1 = returnFunc(task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockQueue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - task *Task
func (_e *MockQueue_Expecter) Enqueue(task interface{}) *MockQueue_Enqueue_Call {
	return &MockQueue_Enqueue_Call{Call: _e.mock.On("Enqueue", task)}
}

func (_c *MockQueue_Enqueue_Call) Run(run func(task *Task)) *MockQueue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Task
		if args[0] != nil {
			arg0 = args[0].(*Task)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueue_Enqueue_Call) Return(uUID uuid.UUID, err error) *MockQueue_Enqueue_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockQueue_Enqueue_Call) RunAndReturn(run func(task *Task) (uuid.UUID, error)) *MockQueue_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// Finish provides a mock function for the type MockQueue
func (_mock *MockQueue) Finish(taskId uuid.UUID, taskError error) error {
	ret := _mock.Called(taskId, taskError)

	if len(ret) == 0 {
		panic("no return value specified for Finish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, error) error); ok {
		r0 = returnFunc(taskId, taskError)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQueue_Finish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finish'
type MockQueue_Finish_Call struct {
	*mock.Call
}

// Finish is a helper method to define mock.On call
//   - taskId uuid.UUID
//   - taskError error
func (_e *MockQueue_Expecter) Finish(taskId interface{}, taskError interface{}) *MockQueue_Finish_Call {
	return &MockQueue_Finish_Call{Call: _e.mock.On("Finish", taskId, taskError)}
}

func (_c *MockQueue_Finish_Call) Run(run func(taskId uuid.UUID, taskError error)) *MockQueue_Finish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueue_Finish_Call) Return(err error) *MockQueue_Finish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQueue_Finish_Call) RunAndReturn(run func(taskId uuid.UUID, taskError error) error) *MockQueue_Finish_Call {
	_c.Call.Return(run)
	return _c
}

// Heartbeats provides a mock function for the type MockQueue
func (_mock *MockQueue) Heartbeats(olderThan time.Duration) []uuid.UUID {
	ret := _mock.Called(olderThan)

	if len(ret) == 0 {
		panic("no return value specified for Heartbeats")
	}

	var r0 []uuid.UUID
	if returnFunc, ok := ret.Get(0).(func(time.Duration) []uuid.UUID); ok {
		r0 = returnFunc(olderThan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	return r0
}

// MockQueue_Heartbeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heartbeats'
type MockQueue_Heartbeats_Call struct {
	*mock.Call
}

// Heartbeats is a helper method to define mock.On call
//   - olderThan time.Duration
func (_e *MockQueue_Expecter) Heartbeats(olderThan interface{}) *MockQueue_Heartbeats_Call {
	return &MockQueue_Heartbeats_Call{Call: _e.mock.On("Heartbeats", olderThan)}
}

func (_c *MockQueue_Heartbeats_Call) Run(run func(olderThan time.Duration)) *MockQueue_Heartbeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueue_Heartbeats_Call) Return(uUIDs []uuid.UUID) *MockQueue_Heartbeats_Call {
	_c.Call.Return(uUIDs)
	return _c
}

func (_c *MockQueue_Heartbeats_Call) RunAndReturn(run func(olderThan time.Duration) []uuid.UUID) *MockQueue_Heartbeats_Call {
	_c.Call.Return(run)
	return _c
}

// IdFromToken provides a mock function for the type MockQueue
func (_mock *MockQueue) IdFromToken(token uuid.UUID) (uuid.UUID, bool, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for IdFromToken")
	}

	var r0 uuid.UUID
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (uuid.UUID, bool, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) uuid.UUID); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) bool); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(uuid.UUID) error); ok {
		r2 = returnFunc(token)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockQueue_IdFromToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdFromToken'
type MockQueue_IdFromToken_Call struct {
	*mock.Call
}

// IdFromToken is a helper method to define mock.On call
//   - token uuid.UUID
func (_e *MockQueue_Expecter) IdFromToken(token interface{}) *MockQueue_IdFromToken_Call {
	return &MockQueue_IdFromToken_Call{Call: _e.mock.On("IdFromToken", token)}
}

func (_c *MockQueue_IdFromToken_Call) Run(run func(token uuid.UUID)) *MockQueue_IdFromToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueue_IdFromToken_Call) Return(id uuid.UUID, isRunning bool, err error) *MockQueue_IdFromToken_Call {
	_c.Call.Return(id, isRunning, err)
	return _c
}

func (_c *MockQueue_IdFromToken_Call) RunAndReturn(run func(token uuid.UUID) (uuid.UUID, bool, error)) *MockQueue_IdFromToken_Call {
	_c.Call.Return(run)
	return _c
}

// ListenForCancel provides a mock function for the type MockQueue
func (_mock *MockQueue) ListenForCancel(ctx context.Context, taskID uuid.UUID, cancelFunc context.CancelCauseFunc) {
	_mock.Called(ctx, taskID, cancelFunc)
	return
}

// MockQueue_ListenForCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListenForCancel'
type MockQueue_ListenForCancel_Call struct {
	*mock.Call
}

// ListenForCancel is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID uuid.UUID
//   - cancelFunc context.CancelCauseFunc
func (_e *MockQueue_Expecter) ListenForCancel(ctx interface{}, taskID interface{}, cancelFunc interface{}) *MockQueue_ListenForCancel_Call {
	return &MockQueue_ListenForCancel_Call{Call: _e.mock.On("ListenForCancel", ctx, taskID, cancelFunc)}
}

func (_c *MockQueue_ListenForCancel_Call) Run(run func(ctx context.Context, taskID uuid.UUID, cancelFunc context.CancelCauseFunc)) *MockQueue_ListenForCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 context.CancelCauseFunc
		if args[2] != nil {
			arg2 = args[2].(context.CancelCauseFunc)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockQueue_ListenForCancel_Call) Return() *MockQueue_ListenForCancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockQueue_ListenForCancel_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, cancelFunc context.CancelCauseFunc)) *MockQueue_ListenForCancel_Call {
	_c.Run(run)
	return _c
}

// RefreshHeartbeat provides a mock function for the type MockQueue
func (_mock *MockQueue) RefreshHeartbeat(token uuid.UUID) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshHeartbeat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQueue_RefreshHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshHeartbeat'
type MockQueue_RefreshHeartbeat_Call struct {
	*mock.Call
}

// RefreshHeartbeat is a helper method to define mock.On call
//   - token uuid.UUID
func (_e *MockQueue_Expecter) RefreshHeartbeat(token interface{}) *MockQueue_RefreshHeartbeat_Call {
	return &MockQueue_RefreshHeartbeat_Call{Call: _e.mock.On("RefreshHeartbeat", token)}
}

func (_c *MockQueue_RefreshHeartbeat_Call) Run(run func(token uuid.UUID)) *MockQueue_RefreshHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueue_RefreshHeartbeat_Call) Return(err error) *MockQueue_RefreshHeartbeat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQueue_RefreshHeartbeat_Call) RunAndReturn(run func(token uuid.UUID) error) *MockQueue_RefreshHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// Requeue provides a mock function for the type MockQueue
func (_mock *MockQueue) Requeue(taskId uuid.UUID) error {
	ret := _mock.Called(taskId)

	if len(ret) == 0 {
		panic("no return value specified for Requeue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(taskId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQueue_Requeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Requeue'
type MockQueue_Requeue_Call struct {
	*mock.Call
}

// Requeue is a helper method to define mock.On call
//   - taskId uuid.UUID
func (_e *MockQueue_Expecter) Requeue(taskId interface{}) *MockQueue_Requeue_Call {
	return &MockQueue_Requeue_Call{Call: _e.mock.On("Requeue", taskId)}
}

func (_c *MockQueue_Requeue_Call) Run(run func(taskId uuid.UUID)) *MockQueue_Requeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueue_Requeue_Call) Return(err error) *MockQueue_Requeue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQueue_Requeue_Call) RunAndReturn(run func(taskId uuid.UUID) error) *MockQueue_Requeue_Call {
	_c.Call.Return(run)
	return _c
}

// RequeueFailedTasks provides a mock function for the type MockQueue
func (_mock *MockQueue) RequeueFailedTasks(taskTypes []string) error {
	ret := _mock.Called(taskTypes)

	if len(ret) == 0 {
		panic("no return value specified for RequeueFailedTasks")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string) error); ok {
		r0 = returnFunc(taskTypes)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQueue_RequeueFailedTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequeueFailedTasks'
type MockQueue_RequeueFailedTasks_Call struct {
	*mock.Call
}

// RequeueFailedTasks is a helper method to define mock.On call
//   - taskTypes []string
func (_e *MockQueue_Expecter) RequeueFailedTasks(taskTypes interface{}) *MockQueue_RequeueFailedTasks_Call {
	return &MockQueue_RequeueFailedTasks_Call{Call: _e.mock.On("RequeueFailedTasks", taskTypes)}
}

func (_c *MockQueue_RequeueFailedTasks_Call) Run(run func(taskTypes []string)) *MockQueue_RequeueFailedTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueue_RequeueFailedTasks_Call) Return(err error) *MockQueue_RequeueFailedTasks_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQueue_RequeueFailedTasks_Call) RunAndReturn(run func(taskTypes []string) error) *MockQueue_RequeueFailedTasks_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockQueue
func (_mock *MockQueue) Status(taskId uuid.UUID) (*models.TaskInfo, error) {
	ret := _mock.Called(taskId)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *models.TaskInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.TaskInfo, error)); ok {
		return returnFunc(taskId)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.TaskInfo); ok {
		r0 = returnFunc(taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(taskId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueue_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockQueue_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - taskId uuid.UUID
func (_e *MockQueue_Expecter) Status(taskId interface{}) *MockQueue_Status_Call {
	return &MockQueue_Status_Call{Call: _e.mock.On("Status", taskId)}
}

func (_c *MockQueue_Status_Call) Run(run func(taskId uuid.UUID)) *MockQueue_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQueue_Status_Call) Return(taskInfo *models.TaskInfo, err error) *MockQueue_Status_Call {
	_c.Call.Return(taskInfo, err)
	return _c
}

func (_c *MockQueue_Status_Call) RunAndReturn(run func(taskId uuid.UUID) (*models.TaskInfo, error)) *MockQueue_Status_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePayload provides a mock function for the type MockQueue
func (_mock *MockQueue) UpdatePayload(task *models.TaskInfo, payload interface{}) (*models.TaskInfo, error) {
	ret := _mock.Called(task, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayload")
	}

	var r0 *models.TaskInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.TaskInfo, interface{}) (*models.TaskInfo, error)); ok {
		return returnFunc(task, payload)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.TaskInfo, interface{}) *models.TaskInfo); ok {
		r0 = returnFunc(task, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.TaskInfo, interface{}) error); ok {
		r1 = returnFunc(task, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueue_UpdatePayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePayload'
type MockQueue_UpdatePayload_Call struct {
	*mock.Call
}

// UpdatePayload is a helper method to define mock.On call
//   - task *models.TaskInfo
//   - payload interface{}
func (_e *MockQueue_Expecter) UpdatePayload(task interface{}, payload interface{}) *MockQueue_UpdatePayload_Call {
	return &MockQueue_UpdatePayload_Call{Call: _e.mock.On("UpdatePayload", task, payload)}
}

func (_c *MockQueue_UpdatePayload_Call) Run(run func(task *models.TaskInfo, payload interface{})) *MockQueue_UpdatePayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.TaskInfo
		if args[0] != nil {
			arg0 = args[0].(*models.TaskInfo)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueue_UpdatePayload_Call) Return(taskInfo *models.TaskInfo, err error) *MockQueue_UpdatePayload_Call {
	_c.Call.Return(taskInfo, err)
	return _c
}

func (_c *MockQueue_UpdatePayload_Call) RunAndReturn(run func(task *models.TaskInfo, payload interface{}) (*models.TaskInfo, error)) *MockQueue_UpdatePayload_Call {
	_c.Call.Return(run)
	return _c
}
