package integration

import (
	"context"
	"testing"

	"github.com/content-services/content-sources-backend/pkg/api"
	"github.com/content-services/content-sources-backend/pkg/config"
	"github.com/content-services/content-sources-backend/pkg/dao"
	"github.com/content-services/content-sources-backend/pkg/db"
	"github.com/content-services/content-sources-backend/pkg/tasks/client"
	"github.com/content-services/content-sources-backend/pkg/utils"
	uuid2 "github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

type PGSuite struct {
	Suite
	dao *dao.DaoRegistry
	ctx context.Context
}

func (s *PGSuite) SetupTest() {
	s.Suite.SetupTest()
	s.ctx = context.Background() // Test Context
}

func TestPGSuite(t *testing.T) {
	suite.Run(t, new(PGSuite))
}

func (s *PGSuite) doStuff() {
	s.dao = dao.GetDaoRegistry(db.DB)

	// Setup the repository
	accountId := uuid2.NewString()
	repo, err := s.dao.RepositoryConfig.Create(s.ctx, api.RepositoryRequest{
		Name:      utils.Ptr(uuid2.NewString()),
		AccountID: utils.Ptr(accountId),
		OrgID:     utils.Ptr(accountId),
		Snapshot:  utils.Ptr(true),
		Origin:    utils.Ptr(config.OriginUpload),
	})
	assert.NoError(s.T(), err)
	repoUuid, err := uuid2.Parse(repo.RepositoryUUID)
	assert.NoError(s.T(), err)

	// Start the task
	taskClient := client.NewTaskClient(&s.queue)
	s.snapshotAndWait(taskClient, repo, repoUuid, accountId)

	snaps, _, err := s.dao.Snapshot.List(s.ctx, repo.OrgID, repo.UUID, api.PaginationData{Limit: -1}, api.FilterData{})
	assert.NoError(s.T(), err)
	assert.NotEmpty(s.T(), snaps)
}

func (s *PGSuite) Test1() {
	s.doStuff()
}

func (s *PGSuite) Test2() {
	s.doStuff()
}

func (s *PGSuite) Test3() {
	s.doStuff()
}

func (s *PGSuite) Test4() {
	s.doStuff()
}

func (s *PGSuite) Test5() {
	s.doStuff()
}

func (s *PGSuite) Test6() {
	s.doStuff()
}

func (s *PGSuite) Test7() {
	s.doStuff()
}

func (s *PGSuite) Test8() {
	s.doStuff()
}

func (s *PGSuite) Test9() {
	s.doStuff()
}
func (s *PGSuite) Test10() {
	s.doStuff()
}
func (s *PGSuite) Test11() {
	s.doStuff()
}
func (s *PGSuite) Test12() {
	s.doStuff()
}
func (s *PGSuite) Test13() {
	s.doStuff()
}
func (s *PGSuite) Test14() {
	s.doStuff()
}
func (s *PGSuite) Test15() {
	s.doStuff()
}
func (s *PGSuite) Test16() {
	s.doStuff()
}
func (s *PGSuite) Test17() {
	s.doStuff()
}
func (s *PGSuite) Test18() {
	s.doStuff()
}

func (s *PGSuite) Test19() {
	s.doStuff()
}

func (s *PGSuite) Test20() {
	s.doStuff()
}

func (s *PGSuite) Test21() {
	s.doStuff()
}
func (s *PGSuite) Test22() {
	s.doStuff()
}
func (s *PGSuite) Test23() {
	s.doStuff()
}

func (s *PGSuite) Test24() {
	s.doStuff()
}

func (s *PGSuite) Test25() {
	s.doStuff()
}

func (s *PGSuite) Test26() {
	s.doStuff()
}
func (s *PGSuite) Test27() {
	s.doStuff()
}
func (s *PGSuite) Test28() {
	s.doStuff()
}
func (s *PGSuite) Test29() {
	s.doStuff()
}
func (s *PGSuite) Test30() {
	s.doStuff()
}

func (s *PGSuite) Test31() {
	s.doStuff()
}
func (s *PGSuite) Test32() {
	s.doStuff()
}
