package main

import (
	"context"
	"net/http"
	"time"

	zest "github.com/content-services/zest/release/v2023"
	"github.com/labstack/gommon/log"
)

func connectPulp() {
	configuration := zest.NewConfiguration()
	apiClient := zest.NewAPIClient(configuration)
	resp, r, err := apiClient.StatusAPI.StatusRead1(context.Background()).Execute()
	if err != nil {
		log.Fatalf("Error when calling `StatusAPI.StatusRead``: %v\n", err)
		log.Fatalf("Full HTTP response: %v\n", r)
	}
	// response from `StatusRead`: StatusResponse
	log.Infof("Response from `StatusAPI.StatusRead`: %v\n", resp)
}

func listUpstreamPulps() {
	ctx2 := context.WithValue(context.Background(), zest.ContextServerIndex, 0)
	timeout := 60 * time.Second
	transport := &http.Transport{ResponseHeaderTimeout: timeout}
	httpClient := http.Client{Transport: transport, Timeout: timeout}

	pulpConfig := zest.NewConfiguration()
	pulpConfig.HTTPClient = &httpClient
	pulpConfig.Servers = zest.ServerConfigurations{zest.ServerConfiguration{
		URL: "http://localhost:8080",
	}}
	client := zest.NewAPIClient(pulpConfig)

	authCtx := context.WithValue(ctx2, zest.ContextBasicAuth, zest.BasicAuth{
		UserName: "admin",
		Password: "password",
	})

	resp, r, err := client.UpstreamPulpsAPI.UpstreamPulpsList(authCtx, "default").Execute()
	if err != nil {
		log.Fatalf("Error when calling `StatusAPI.StatusRead``: %v\n", err)
		log.Fatalf("Full HTTP response: %v\n", r)
	}
	// response from `UpstreamPulpsList`: PaginatedUpstreamPulpResponseList
	log.Infof("Response from `StatusAPI.StatusRead`: %v\n", *resp.Count)
}

func main() {
	listUpstreamPulps()
}
