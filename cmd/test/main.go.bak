package main

import (
	"sync"

	"github.com/content-services/content-sources-backend/pkg/config"
	"github.com/content-services/content-sources-backend/pkg/db"
	"github.com/content-services/content-sources-backend/pkg/pulp_client"
	uuid2 "github.com/google/uuid"
	"github.com/rs/zerolog/log"
)

func main() {
	config.Load()
	config.ConfigureLogging()
	err := db.Connect()
	if err != nil {
		panic(err)
	}
	defer db.Close()

	// _, err = pulp_client.GetGlobalPulpClient().LookupOrCreateDomain(uuid2.NewString())
	// for i := 0; i < 1000; i++ {
	// 	seeds.SeedTasks(db.DB, 100, seeds.TaskSeedOptions{
	// 		AccountID: uuid2.NewString(),
	// 		OrgID:     uuid2.NewString(),
	// 	})
	// }
	count := 1
	wg := sync.WaitGroup{}
	wg.Add(count)
	c := pulp_client.GetGlobalPulpClient()
	name := uuid2.NewString()
	for i := 0; i < count; i++ {
		go func() {
			name, err := c.LookupOrCreateDomain(name)
			if err != nil {
				log.Logger.Error().Err(err).Msg("ERORR: ")
			} else if name == nil {
				log.Logger.Error().Msg("nil name")
			} else {
				log.Logger.Info().Msg("Created")
			}
			wg.Done()
		}()
	}
	wg.Wait()
}
